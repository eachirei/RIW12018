<div> JavaScript is disabled on your browser. </div> Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | Method Package org.jsoup Interface Connection All Known Implementing Classes: HttpConnection public interface Connection A Connection provides a convenient interface to fetch content from the web, and parse them into Documents. To get a new Connection, use Jsoup.connect(String). Connections contain Connection.Request and Connection.Response objects. The request objects are reusable as prototype requests. Request configuration can be made using either the shortcut methods in Connection (e.g. userAgent(String)), or by methods in the Connection.Request object directly. All request configuration must be made before the request is executed. Nested Class Summary Nested Classes Modifier and Type Interface Description static interface Connection.Base<T extends Connection.Base> Common methods for Requests and Responses static interface Connection.KeyVal A Key:Value tuple(+), used for form data. static class Connection.Method GET and POST http methods. static interface Connection.Request Represents a HTTP request. static interface Connection.Response Represents a HTTP response. Method Summary All Methods Instance Methods Abstract Methods Deprecated Methods Modifier and Type Method Description Connection cookie​(String name, String value) Set a cookie to be sent in the request. Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request. Connection.KeyVal data​(String key) Get the data KeyVal for this key, if any Connection data​(String... keyvals) Add a number of request data parameters. Connection data​(String key, String value) Add a request data parameter. Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter. Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter. Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parameters Connection data​(Map<String,String> data) Adds all of the supplied data to the request data parameters Connection.Response execute​() Execute the request. Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects. Document get​() Execute the request as a GET, and parse the result. Connection header​(String name, String value) Set a request header. Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request. Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response. Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs. Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. Connection method​(Connection.Method method) Set the request method to use, GET or POST. Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document. Document post​() Execute the request as a POST, and parse the result. Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post data Connection proxy​(String host, int port) Set the HTTP proxy to use for this request. Connection proxy​(Proxy proxy) Set the proxy to use for this request. Connection referrer​(String referrer) Set the request referrer (aka "referer") header. Connection.Request request​() Get the request object associated with this connection Connection request​(Connection.Request request) Set the connection's request Connection requestBody​(String body) Set a POST (or PUT) request body. Connection.Response response​() Get the response, once the request has been executed Connection response​(Connection.Response response) Set the connection's response Connection timeout​(int millis) Set the total request timeout duration. Connection url​(String url) Set the request URL to fetch. Connection url​(URL url) Set the request URL to fetch. Connection userAgent​(String userAgent) Set the request user-agent header. Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled. Method Detail url Connection url​(URL url) Set the request URL to fetch. The protocol must be HTTP or HTTPS. Parameters: url - URL to connect to Returns: this Connection, for chaining url Connection url​(String url) Set the request URL to fetch. The protocol must be HTTP or HTTPS. Parameters: url - URL to connect to Returns: this Connection, for chaining proxy Connection proxy​(Proxy proxy) Set the proxy to use for this request. Set to null to disable. Parameters: proxy - proxy to use Returns: this Connection, for chaining proxy Connection proxy​(String host, int port) Set the HTTP proxy to use for this request. Parameters: host - the proxy hostname port - the proxy port Returns: this Connection, for chaining userAgent Connection userAgent​(String userAgent) Set the request user-agent header. Parameters: userAgent - user-agent to use Returns: this Connection, for chaining See Also: HttpConnection.DEFAULT_UA timeout Connection timeout​(int millis) Set the total request timeout duration. If a timeout occurs, an SocketTimeoutException will be thrown. The default timeout is 30 seconds (30,000 millis). A timeout of zero is treated as an infinite timeout. Note that this timeout specifies the combined maximum duration of the connection time and the time to read the full response. Parameters: millis - number of milliseconds (thousandths of a second) before timing out connects or reads. Returns: this Connection, for chaining See Also: maxBodySize(int) maxBodySize Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. The default maximum is 1MB. A max size of zero is treated as an infinite amount (bounded only by your patience and the memory available on your machine). Parameters: bytes - number of bytes to read from the input before truncating Returns: this Connection, for chaining referrer Connection referrer​(String referrer) Set the request referrer (aka "referer") header. Parameters: referrer - referrer to use Returns: this Connection, for chaining followRedirects Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects. By default this is true. Parameters: followRedirects - true if server redirects should be followed. Returns: this Connection, for chaining method Connection method​(Connection.Method method) Set the request method to use, GET or POST. Default is GET. Parameters: method - HTTP request method Returns: this Connection, for chaining ignoreHttpErrors Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs. (4xx - 5xx, e.g. 404 or 500). By default this is false; an IOException is thrown if an error is encountered. If set to true, the response is populated with the error body, and the status message will reflect the error. Parameters: ignoreHttpErrors - - false (default) if HTTP errors should be ignored. Returns: this Connection, for chaining ignoreContentType Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response. By default this is false, an unrecognised content-type will cause an IOException to be thrown. (This is to prevent producing garbage by attempting to parse a JPEG binary image, for example.) Set to true to force a parse attempt regardless of content type. Parameters: ignoreContentType - set to true if you would like the content type ignored on parsing the response into a Document. Returns: this Connection, for chaining validateTLSCertificates Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled. Disable/enable TLS certificates validation for HTTPS requests. By default this is true; all connections over HTTPS perform normal validation of certificates, and will abort requests if the provided certificate does not validate. Some servers use expired, self-generated certificates; or your JDK may not support SNI hosts. In which case, you may want to enable this setting. Be careful and understand why you need to disable these validations. Parameters: value - if should validate TLS (SSL) certificates. true by default. Returns: this Connection, for chaining data Connection data​(String key, String value) Add a request data parameter. Request parameters are sent in the request query string for GETs, and in the request body for POSTs. A request may have multiple values of the same name. Parameters: key - data key value - data value Returns: this Connection, for chaining data Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream. Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. You must close the InputStream in a finally block. Returns: this Connections, for chaining See Also: if you want to set the uploaded file's mimetype. data Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream. Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. contentType - the Content Type (aka mimetype) to specify for this file. You must close the InputStream in a finally block. Returns: this Connections, for chaining data Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parameters Parameters: data - collection of data parameters Returns: this Connection, for chaining data Connection data​(Map<String,String> data) Adds all of the supplied data to the request data parameters Parameters: data - map of data parameters Returns: this Connection, for chaining data Connection data​(String... keyvals) Add a number of request data parameters. Multiple parameters may be set at once, e.g.: .data("name", "jsoup", "language", "Java", "language", "English"); creates a query string like: ?name=jsoup&language=Java&language=English Parameters: keyvals - a set of key value pairs. Returns: this Connection, for chaining data Connection.KeyVal data​(String key) Get the data KeyVal for this key, if any Parameters: key - the data key Returns: null if not set requestBody Connection requestBody​(String body) Set a POST (or PUT) request body. Useful when a server expects a plain request body, not a set for URL encoded form key/value pairs. E.g.: Jsoup.connect(url) .requestBody(json) .header("Content-Type", "application/json") .post(); If any data key/vals are supplied, they will be sent as URL query params. Returns: this Request, for chaining header Connection header​(String name, String value) Set a request header. Parameters: name - header name value - header value Returns: this Connection, for chaining See Also: Connection.Base.headers() headers Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request. Parameters: headers - map of headers name -> value pairs Returns: this Connection, for chaining See Also: Connection.Base.headers() cookie Connection cookie​(String name, String value) Set a cookie to be sent in the request. Parameters: name - name of cookie value - value of cookie Returns: this Connection, for chaining cookies Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request. Parameters: cookies - map of cookie name -> value pairs Returns: this Connection, for chaining parser Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document. If not set, defaults to the HTML parser, unless the response content-type is XML, in which case the XML parser is used. Parameters: parser - alternate parser Returns: this Connection, for chaining postDataCharset Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post data Parameters: charset - character set to encode post data Returns: this Connection, for chaining get Document get​() throws IOException Execute the request as a GET, and parse the result. Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error post Document post​() throws IOException Execute the request as a POST, and parse the result. Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error execute Connection.Response execute​() throws IOException Execute the request. Returns: a response object Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error request Connection.Request request​() Get the request object associated with this connection Returns: request request Connection request​(Connection.Request request) Set the connection's request Parameters: request - new request object Returns: this Connection, for chaining response Connection.Response response​() Get the response, once the request has been executed Returns: response response Connection response​(Connection.Response response) Set the connection's response Parameters: response - new response Returns: this Connection, for chaining Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | Method Copyright © 2009–2017 Jonathan Hedley. All rights reserved.<div> JavaScript is disabled on your browser. </div>Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSkip navigation links Overview Package Class Use Tree Deprecated Index HelpSkip navigation linksSkip navigation linksOverview Package Class Use Tree Deprecated Index HelpOverviewOverviewPackagePackageClassUseUseTreeTreeDeprecatedDeprecatedIndexIndexHelpHelpPrev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodPrev Class Next ClassPrev ClassNext ClassNext ClassNext ClassFrames No FramesFramesFramesNo FramesNo FramesAll ClassesAll ClassesAll ClassesSEARCH:SEARCH:SEARCH:<div> JavaScript is disabled on your browser. </div><div> JavaScript is disabled on your browser. </div>Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSummary: Nested | Field | Constr | MethodSummary:Nested |NestedField |Constr |MethodMethodDetail: Field | Constr | MethodDetail:Field |Constr |MethodMethodPackage org.jsoup Interface ConnectionPackage org.jsoupPackageorg.jsoupInterface ConnectionAll Known Implementing Classes: HttpConnection public interface Connection A Connection provides a convenient interface to fetch content from the web, and parse them into Documents. To get a new Connection, use Jsoup.connect(String). Connections contain Connection.Request and Connection.Response objects. The request objects are reusable as prototype requests. Request configuration can be made using either the shortcut methods in Connection (e.g. userAgent(String)), or by methods in the Connection.Request object directly. All request configuration must be made before the request is executed. Nested Class Summary Nested Classes Modifier and Type Interface Description static interface Connection.Base<T extends Connection.Base> Common methods for Requests and Responses static interface Connection.KeyVal A Key:Value tuple(+), used for form data. static class Connection.Method GET and POST http methods. static interface Connection.Request Represents a HTTP request. static interface Connection.Response Represents a HTTP response. Method Summary All Methods Instance Methods Abstract Methods Deprecated Methods Modifier and Type Method Description Connection cookie​(String name, String value) Set a cookie to be sent in the request. Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request. Connection.KeyVal data​(String key) Get the data KeyVal for this key, if any Connection data​(String... keyvals) Add a number of request data parameters. Connection data​(String key, String value) Add a request data parameter. Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter. Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter. Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parameters Connection data​(Map<String,String> data) Adds all of the supplied data to the request data parameters Connection.Response execute​() Execute the request. Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects. Document get​() Execute the request as a GET, and parse the result. Connection header​(String name, String value) Set a request header. Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request. Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response. Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs. Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. Connection method​(Connection.Method method) Set the request method to use, GET or POST. Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document. Document post​() Execute the request as a POST, and parse the result. Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post data Connection proxy​(String host, int port) Set the HTTP proxy to use for this request. Connection proxy​(Proxy proxy) Set the proxy to use for this request. Connection referrer​(String referrer) Set the request referrer (aka "referer") header. Connection.Request request​() Get the request object associated with this connection Connection request​(Connection.Request request) Set the connection's request Connection requestBody​(String body) Set a POST (or PUT) request body. Connection.Response response​() Get the response, once the request has been executed Connection response​(Connection.Response response) Set the connection's response Connection timeout​(int millis) Set the total request timeout duration. Connection url​(String url) Set the request URL to fetch. Connection url​(URL url) Set the request URL to fetch. Connection userAgent​(String userAgent) Set the request user-agent header. Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled. Method Detail url Connection url​(URL url) Set the request URL to fetch. The protocol must be HTTP or HTTPS. Parameters: url - URL to connect to Returns: this Connection, for chaining url Connection url​(String url) Set the request URL to fetch. The protocol must be HTTP or HTTPS. Parameters: url - URL to connect to Returns: this Connection, for chaining proxy Connection proxy​(Proxy proxy) Set the proxy to use for this request. Set to null to disable. Parameters: proxy - proxy to use Returns: this Connection, for chaining proxy Connection proxy​(String host, int port) Set the HTTP proxy to use for this request. Parameters: host - the proxy hostname port - the proxy port Returns: this Connection, for chaining userAgent Connection userAgent​(String userAgent) Set the request user-agent header. Parameters: userAgent - user-agent to use Returns: this Connection, for chaining See Also: HttpConnection.DEFAULT_UA timeout Connection timeout​(int millis) Set the total request timeout duration. If a timeout occurs, an SocketTimeoutException will be thrown. The default timeout is 30 seconds (30,000 millis). A timeout of zero is treated as an infinite timeout. Note that this timeout specifies the combined maximum duration of the connection time and the time to read the full response. Parameters: millis - number of milliseconds (thousandths of a second) before timing out connects or reads. Returns: this Connection, for chaining See Also: maxBodySize(int) maxBodySize Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. The default maximum is 1MB. A max size of zero is treated as an infinite amount (bounded only by your patience and the memory available on your machine). Parameters: bytes - number of bytes to read from the input before truncating Returns: this Connection, for chaining referrer Connection referrer​(String referrer) Set the request referrer (aka "referer") header. Parameters: referrer - referrer to use Returns: this Connection, for chaining followRedirects Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects. By default this is true. Parameters: followRedirects - true if server redirects should be followed. Returns: this Connection, for chaining method Connection method​(Connection.Method method) Set the request method to use, GET or POST. Default is GET. Parameters: method - HTTP request method Returns: this Connection, for chaining ignoreHttpErrors Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs. (4xx - 5xx, e.g. 404 or 500). By default this is false; an IOException is thrown if an error is encountered. If set to true, the response is populated with the error body, and the status message will reflect the error. Parameters: ignoreHttpErrors - - false (default) if HTTP errors should be ignored. Returns: this Connection, for chaining ignoreContentType Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response. By default this is false, an unrecognised content-type will cause an IOException to be thrown. (This is to prevent producing garbage by attempting to parse a JPEG binary image, for example.) Set to true to force a parse attempt regardless of content type. Parameters: ignoreContentType - set to true if you would like the content type ignored on parsing the response into a Document. Returns: this Connection, for chaining validateTLSCertificates Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled. Disable/enable TLS certificates validation for HTTPS requests. By default this is true; all connections over HTTPS perform normal validation of certificates, and will abort requests if the provided certificate does not validate. Some servers use expired, self-generated certificates; or your JDK may not support SNI hosts. In which case, you may want to enable this setting. Be careful and understand why you need to disable these validations. Parameters: value - if should validate TLS (SSL) certificates. true by default. Returns: this Connection, for chaining data Connection data​(String key, String value) Add a request data parameter. Request parameters are sent in the request query string for GETs, and in the request body for POSTs. A request may have multiple values of the same name. Parameters: key - data key value - data value Returns: this Connection, for chaining data Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream. Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. You must close the InputStream in a finally block. Returns: this Connections, for chaining See Also: if you want to set the uploaded file's mimetype. data Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream. Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. contentType - the Content Type (aka mimetype) to specify for this file. You must close the InputStream in a finally block. Returns: this Connections, for chaining data Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parameters Parameters: data - collection of data parameters Returns: this Connection, for chaining data Connection data​(Map<String,String> data) Adds all of the supplied data to the request data parameters Parameters: data - map of data parameters Returns: this Connection, for chaining data Connection data​(String... keyvals) Add a number of request data parameters. Multiple parameters may be set at once, e.g.: .data("name", "jsoup", "language", "Java", "language", "English"); creates a query string like: ?name=jsoup&language=Java&language=English Parameters: keyvals - a set of key value pairs. Returns: this Connection, for chaining data Connection.KeyVal data​(String key) Get the data KeyVal for this key, if any Parameters: key - the data key Returns: null if not set requestBody Connection requestBody​(String body) Set a POST (or PUT) request body. Useful when a server expects a plain request body, not a set for URL encoded form key/value pairs. E.g.: Jsoup.connect(url) .requestBody(json) .header("Content-Type", "application/json") .post(); If any data key/vals are supplied, they will be sent as URL query params. Returns: this Request, for chaining header Connection header​(String name, String value) Set a request header. Parameters: name - header name value - header value Returns: this Connection, for chaining See Also: Connection.Base.headers() headers Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request. Parameters: headers - map of headers name -> value pairs Returns: this Connection, for chaining See Also: Connection.Base.headers() cookie Connection cookie​(String name, String value) Set a cookie to be sent in the request. Parameters: name - name of cookie value - value of cookie Returns: this Connection, for chaining cookies Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request. Parameters: cookies - map of cookie name -> value pairs Returns: this Connection, for chaining parser Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document. If not set, defaults to the HTML parser, unless the response content-type is XML, in which case the XML parser is used. Parameters: parser - alternate parser Returns: this Connection, for chaining postDataCharset Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post data Parameters: charset - character set to encode post data Returns: this Connection, for chaining get Document get​() throws IOException Execute the request as a GET, and parse the result. Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error post Document post​() throws IOException Execute the request as a POST, and parse the result. Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error execute Connection.Response execute​() throws IOException Execute the request. Returns: a response object Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error request Connection.Request request​() Get the request object associated with this connection Returns: request request Connection request​(Connection.Request request) Set the connection's request Parameters: request - new request object Returns: this Connection, for chaining response Connection.Response response​() Get the response, once the request has been executed Returns: response response Connection response​(Connection.Response response) Set the connection's response Parameters: response - new response Returns: this Connection, for chainingAll Known Implementing Classes: HttpConnection public interface Connection A Connection provides a convenient interface to fetch content from the web, and parse them into Documents. To get a new Connection, use Jsoup.connect(String). Connections contain Connection.Request and Connection.Response objects. The request objects are reusable as prototype requests. Request configuration can be made using either the shortcut methods in Connection (e.g. userAgent(String)), or by methods in the Connection.Request object directly. All request configuration must be made before the request is executed.All Known Implementing Classes: HttpConnection public interface Connection A Connection provides a convenient interface to fetch content from the web, and parse them into Documents. To get a new Connection, use Jsoup.connect(String). Connections contain Connection.Request and Connection.Response objects. The request objects are reusable as prototype requests. Request configuration can be made using either the shortcut methods in Connection (e.g. userAgent(String)), or by methods in the Connection.Request object directly. All request configuration must be made before the request is executed.All Known Implementing Classes: HttpConnection public interface Connection A Connection provides a convenient interface to fetch content from the web, and parse them into Documents. To get a new Connection, use Jsoup.connect(String). Connections contain Connection.Request and Connection.Response objects. The request objects are reusable as prototype requests. Request configuration can be made using either the shortcut methods in Connection (e.g. userAgent(String)), or by methods in the Connection.Request object directly. All request configuration must be made before the request is executed.All Known Implementing Classes: HttpConnectionAll Known Implementing Classes:HttpConnectionHttpConnectionHttpConnectionpublic interface ConnectionConnectionA Connection provides a convenient interface to fetch content from the web, and parse them into Documents. To get a new Connection, use Jsoup.connect(String). Connections contain Connection.Request and Connection.Response objects. The request objects are reusable as prototype requests. Request configuration can be made using either the shortcut methods in Connection (e.g. userAgent(String)), or by methods in the Connection.Request object directly. All request configuration must be made before the request is executed.To get a new Connection, use Jsoup.connect(String). Connections contain Connection.Request and Connection.Response objects. The request objects are reusable as prototype requests.Jsoup.connect(String)Jsoup.connect(String)Connection.RequestConnection.RequestConnection.ResponseConnection.ResponseRequest configuration can be made using either the shortcut methods in Connection (e.g. userAgent(String)), or by methods in the Connection.Request object directly. All request configuration must be made before the request is executed.userAgent(String)userAgent(String)Nested Class Summary Nested Classes Modifier and Type Interface Description static interface Connection.Base<T extends Connection.Base> Common methods for Requests and Responses static interface Connection.KeyVal A Key:Value tuple(+), used for form data. static class Connection.Method GET and POST http methods. static interface Connection.Request Represents a HTTP request. static interface Connection.Response Represents a HTTP response. Method Summary All Methods Instance Methods Abstract Methods Deprecated Methods Modifier and Type Method Description Connection cookie​(String name, String value) Set a cookie to be sent in the request. Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request. Connection.KeyVal data​(String key) Get the data KeyVal for this key, if any Connection data​(String... keyvals) Add a number of request data parameters. Connection data​(String key, String value) Add a request data parameter. Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter. Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter. Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parameters Connection data​(Map<String,String> data) Adds all of the supplied data to the request data parameters Connection.Response execute​() Execute the request. Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects. Document get​() Execute the request as a GET, and parse the result. Connection header​(String name, String value) Set a request header. Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request. Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response. Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs. Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. Connection method​(Connection.Method method) Set the request method to use, GET or POST. Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document. Document post​() Execute the request as a POST, and parse the result. Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post data Connection proxy​(String host, int port) Set the HTTP proxy to use for this request. Connection proxy​(Proxy proxy) Set the proxy to use for this request. Connection referrer​(String referrer) Set the request referrer (aka "referer") header. Connection.Request request​() Get the request object associated with this connection Connection request​(Connection.Request request) Set the connection's request Connection requestBody​(String body) Set a POST (or PUT) request body. Connection.Response response​() Get the response, once the request has been executed Connection response​(Connection.Response response) Set the connection's response Connection timeout​(int millis) Set the total request timeout duration. Connection url​(String url) Set the request URL to fetch. Connection url​(URL url) Set the request URL to fetch. Connection userAgent​(String userAgent) Set the request user-agent header. Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled.Nested Class Summary Nested Classes Modifier and Type Interface Description static interface Connection.Base<T extends Connection.Base> Common methods for Requests and Responses static interface Connection.KeyVal A Key:Value tuple(+), used for form data. static class Connection.Method GET and POST http methods. static interface Connection.Request Represents a HTTP request. static interface Connection.Response Represents a HTTP response. Method Summary All Methods Instance Methods Abstract Methods Deprecated Methods Modifier and Type Method Description Connection cookie​(String name, String value) Set a cookie to be sent in the request. Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request. Connection.KeyVal data​(String key) Get the data KeyVal for this key, if any Connection data​(String... keyvals) Add a number of request data parameters. Connection data​(String key, String value) Add a request data parameter. Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter. Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter. Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parameters Connection data​(Map<String,String> data) Adds all of the supplied data to the request data parameters Connection.Response execute​() Execute the request. Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects. Document get​() Execute the request as a GET, and parse the result. Connection header​(String name, String value) Set a request header. Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request. Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response. Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs. Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. Connection method​(Connection.Method method) Set the request method to use, GET or POST. Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document. Document post​() Execute the request as a POST, and parse the result. Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post data Connection proxy​(String host, int port) Set the HTTP proxy to use for this request. Connection proxy​(Proxy proxy) Set the proxy to use for this request. Connection referrer​(String referrer) Set the request referrer (aka "referer") header. Connection.Request request​() Get the request object associated with this connection Connection request​(Connection.Request request) Set the connection's request Connection requestBody​(String body) Set a POST (or PUT) request body. Connection.Response response​() Get the response, once the request has been executed Connection response​(Connection.Response response) Set the connection's response Connection timeout​(int millis) Set the total request timeout duration. Connection url​(String url) Set the request URL to fetch. Connection url​(URL url) Set the request URL to fetch. Connection userAgent​(String userAgent) Set the request user-agent header. Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled.Nested Class Summary Nested Classes Modifier and Type Interface Description static interface Connection.Base<T extends Connection.Base> Common methods for Requests and Responses static interface Connection.KeyVal A Key:Value tuple(+), used for form data. static class Connection.Method GET and POST http methods. static interface Connection.Request Represents a HTTP request. static interface Connection.Response Represents a HTTP response. Method Summary All Methods Instance Methods Abstract Methods Deprecated Methods Modifier and Type Method Description Connection cookie​(String name, String value) Set a cookie to be sent in the request. Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request. Connection.KeyVal data​(String key) Get the data KeyVal for this key, if any Connection data​(String... keyvals) Add a number of request data parameters. Connection data​(String key, String value) Add a request data parameter. Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter. Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter. Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parameters Connection data​(Map<String,String> data) Adds all of the supplied data to the request data parameters Connection.Response execute​() Execute the request. Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects. Document get​() Execute the request as a GET, and parse the result. Connection header​(String name, String value) Set a request header. Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request. Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response. Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs. Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. Connection method​(Connection.Method method) Set the request method to use, GET or POST. Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document. Document post​() Execute the request as a POST, and parse the result. Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post data Connection proxy​(String host, int port) Set the HTTP proxy to use for this request. Connection proxy​(Proxy proxy) Set the proxy to use for this request. Connection referrer​(String referrer) Set the request referrer (aka "referer") header. Connection.Request request​() Get the request object associated with this connection Connection request​(Connection.Request request) Set the connection's request Connection requestBody​(String body) Set a POST (or PUT) request body. Connection.Response response​() Get the response, once the request has been executed Connection response​(Connection.Response response) Set the connection's response Connection timeout​(int millis) Set the total request timeout duration. Connection url​(String url) Set the request URL to fetch. Connection url​(URL url) Set the request URL to fetch. Connection userAgent​(String userAgent) Set the request user-agent header. Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled.Nested Class Summary Nested Classes Modifier and Type Interface Description static interface Connection.Base<T extends Connection.Base> Common methods for Requests and Responses static interface Connection.KeyVal A Key:Value tuple(+), used for form data. static class Connection.Method GET and POST http methods. static interface Connection.Request Represents a HTTP request. static interface Connection.Response Represents a HTTP response.Nested Class Summary Nested Classes Modifier and Type Interface Description static interface Connection.Base<T extends Connection.Base> Common methods for Requests and Responses static interface Connection.KeyVal A Key:Value tuple(+), used for form data. static class Connection.Method GET and POST http methods. static interface Connection.Request Represents a HTTP request. static interface Connection.Response Represents a HTTP response.Nested Class SummaryNested Classes Modifier and Type Interface Description static interface Connection.Base<T extends Connection.Base> Common methods for Requests and Responses static interface Connection.KeyVal A Key:Value tuple(+), used for form data. static class Connection.Method GET and POST http methods. static interface Connection.Request Represents a HTTP request. static interface Connection.Response Represents a HTTP response.Nested ClassesNested ClassesModifier and Type Interface Description static interface Connection.Base<T extends Connection.Base> Common methods for Requests and Responses static interface Connection.KeyVal A Key:Value tuple(+), used for form data. static class Connection.Method GET and POST http methods. static interface Connection.Request Represents a HTTP request. static interface Connection.Response Represents a HTTP response.Modifier and Type Interface DescriptionModifier and TypeInterfaceDescriptionstatic interface Connection.Base<T extends Connection.Base> Common methods for Requests and Responsesstatic interfacestatic interfaceConnection.Base<T extends Connection.Base>Connection.Base<T extends Connection.Base>Connection.Base<T extends Connection.Base>Connection.BaseTConnection.BaseCommon methods for Requests and ResponsesCommon methods for Requests and Responsesstatic interface Connection.KeyVal A Key:Value tuple(+), used for form data.static interfacestatic interfaceConnection.KeyValConnection.KeyValConnection.KeyValConnection.KeyValA Key:Value tuple(+), used for form data.A Key:Value tuple(+), used for form data.static class Connection.Method GET and POST http methods.static classstatic classConnection.MethodConnection.MethodConnection.MethodConnection.MethodGET and POST http methods.GET and POST http methods.static interface Connection.Request Represents a HTTP request.static interfacestatic interfaceConnection.RequestConnection.RequestConnection.RequestConnection.RequestRepresents a HTTP request.Represents a HTTP request.static interface Connection.Response Represents a HTTP response.static interfacestatic interfaceConnection.ResponseConnection.ResponseConnection.ResponseConnection.ResponseRepresents a HTTP response.Represents a HTTP response.Method Summary All Methods Instance Methods Abstract Methods Deprecated Methods Modifier and Type Method Description Connection cookie​(String name, String value) Set a cookie to be sent in the request. Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request. Connection.KeyVal data​(String key) Get the data KeyVal for this key, if any Connection data​(String... keyvals) Add a number of request data parameters. Connection data​(String key, String value) Add a request data parameter. Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter. Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter. Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parameters Connection data​(Map<String,String> data) Adds all of the supplied data to the request data parameters Connection.Response execute​() Execute the request. Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects. Document get​() Execute the request as a GET, and parse the result. Connection header​(String name, String value) Set a request header. Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request. Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response. Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs. Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. Connection method​(Connection.Method method) Set the request method to use, GET or POST. Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document. Document post​() Execute the request as a POST, and parse the result. Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post data Connection proxy​(String host, int port) Set the HTTP proxy to use for this request. Connection proxy​(Proxy proxy) Set the proxy to use for this request. Connection referrer​(String referrer) Set the request referrer (aka "referer") header. Connection.Request request​() Get the request object associated with this connection Connection request​(Connection.Request request) Set the connection's request Connection requestBody​(String body) Set a POST (or PUT) request body. Connection.Response response​() Get the response, once the request has been executed Connection response​(Connection.Response response) Set the connection's response Connection timeout​(int millis) Set the total request timeout duration. Connection url​(String url) Set the request URL to fetch. Connection url​(URL url) Set the request URL to fetch. Connection userAgent​(String userAgent) Set the request user-agent header. Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled.Method Summary All Methods Instance Methods Abstract Methods Deprecated Methods Modifier and Type Method Description Connection cookie​(String name, String value) Set a cookie to be sent in the request. Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request. Connection.KeyVal data​(String key) Get the data KeyVal for this key, if any Connection data​(String... keyvals) Add a number of request data parameters. Connection data​(String key, String value) Add a request data parameter. Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter. Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter. Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parameters Connection data​(Map<String,String> data) Adds all of the supplied data to the request data parameters Connection.Response execute​() Execute the request. Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects. Document get​() Execute the request as a GET, and parse the result. Connection header​(String name, String value) Set a request header. Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request. Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response. Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs. Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. Connection method​(Connection.Method method) Set the request method to use, GET or POST. Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document. Document post​() Execute the request as a POST, and parse the result. Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post data Connection proxy​(String host, int port) Set the HTTP proxy to use for this request. Connection proxy​(Proxy proxy) Set the proxy to use for this request. Connection referrer​(String referrer) Set the request referrer (aka "referer") header. Connection.Request request​() Get the request object associated with this connection Connection request​(Connection.Request request) Set the connection's request Connection requestBody​(String body) Set a POST (or PUT) request body. Connection.Response response​() Get the response, once the request has been executed Connection response​(Connection.Response response) Set the connection's response Connection timeout​(int millis) Set the total request timeout duration. Connection url​(String url) Set the request URL to fetch. Connection url​(URL url) Set the request URL to fetch. Connection userAgent​(String userAgent) Set the request user-agent header. Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled.Method SummaryAll Methods Instance Methods Abstract Methods Deprecated Methods Modifier and Type Method Description Connection cookie​(String name, String value) Set a cookie to be sent in the request. Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request. Connection.KeyVal data​(String key) Get the data KeyVal for this key, if any Connection data​(String... keyvals) Add a number of request data parameters. Connection data​(String key, String value) Add a request data parameter. Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter. Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter. Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parameters Connection data​(Map<String,String> data) Adds all of the supplied data to the request data parameters Connection.Response execute​() Execute the request. Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects. Document get​() Execute the request as a GET, and parse the result. Connection header​(String name, String value) Set a request header. Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request. Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response. Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs. Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. Connection method​(Connection.Method method) Set the request method to use, GET or POST. Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document. Document post​() Execute the request as a POST, and parse the result. Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post data Connection proxy​(String host, int port) Set the HTTP proxy to use for this request. Connection proxy​(Proxy proxy) Set the proxy to use for this request. Connection referrer​(String referrer) Set the request referrer (aka "referer") header. Connection.Request request​() Get the request object associated with this connection Connection request​(Connection.Request request) Set the connection's request Connection requestBody​(String body) Set a POST (or PUT) request body. Connection.Response response​() Get the response, once the request has been executed Connection response​(Connection.Response response) Set the connection's response Connection timeout​(int millis) Set the total request timeout duration. Connection url​(String url) Set the request URL to fetch. Connection url​(URL url) Set the request URL to fetch. Connection userAgent​(String userAgent) Set the request user-agent header. Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled.All Methods Instance Methods Abstract Methods Deprecated MethodsAll MethodsAll MethodsInstance MethodsInstance MethodsInstance MethodsAbstract MethodsAbstract MethodsAbstract MethodsDeprecated MethodsDeprecated MethodsDeprecated MethodsModifier and Type Method Description Connection cookie​(String name, String value) Set a cookie to be sent in the request. Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request. Connection.KeyVal data​(String key) Get the data KeyVal for this key, if any Connection data​(String... keyvals) Add a number of request data parameters. Connection data​(String key, String value) Add a request data parameter. Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter. Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter. Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parameters Connection data​(Map<String,String> data) Adds all of the supplied data to the request data parameters Connection.Response execute​() Execute the request. Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects. Document get​() Execute the request as a GET, and parse the result. Connection header​(String name, String value) Set a request header. Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request. Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response. Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs. Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. Connection method​(Connection.Method method) Set the request method to use, GET or POST. Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document. Document post​() Execute the request as a POST, and parse the result. Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post data Connection proxy​(String host, int port) Set the HTTP proxy to use for this request. Connection proxy​(Proxy proxy) Set the proxy to use for this request. Connection referrer​(String referrer) Set the request referrer (aka "referer") header. Connection.Request request​() Get the request object associated with this connection Connection request​(Connection.Request request) Set the connection's request Connection requestBody​(String body) Set a POST (or PUT) request body. Connection.Response response​() Get the response, once the request has been executed Connection response​(Connection.Response response) Set the connection's response Connection timeout​(int millis) Set the total request timeout duration. Connection url​(String url) Set the request URL to fetch. Connection url​(URL url) Set the request URL to fetch. Connection userAgent​(String userAgent) Set the request user-agent header. Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled.Modifier and Type Method DescriptionModifier and TypeMethodDescriptionConnection cookie​(String name, String value) Set a cookie to be sent in the request.ConnectionConnectionConnectioncookie​(String name, String value)cookie​(String name, String value)cookiecookieStringStringSet a cookie to be sent in the request.Set a cookie to be sent in the request.Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request.ConnectionConnectionConnectioncookies​(Map<String,String> cookies)cookies​(Map<String,String> cookies)cookiescookiesMapStringStringAdds each of the supplied cookies to the request.Adds each of the supplied cookies to the request.Connection.KeyVal data​(String key) Get the data KeyVal for this key, if anyConnection.KeyValConnection.KeyValConnection.KeyValdata​(String key)data​(String key)datadataStringGet the data KeyVal for this key, if anyGet the data KeyVal for this key, if anyConnection data​(String... keyvals) Add a number of request data parameters.ConnectionConnectionConnectiondata​(String... keyvals)data​(String... keyvals)datadataStringAdd a number of request data parameters.Add a number of request data parameters.Connection data​(String key, String value) Add a request data parameter.ConnectionConnectionConnectiondata​(String key, String value)data​(String key, String value)datadataStringStringAdd a request data parameter.Add a request data parameter.Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter.ConnectionConnectionConnectiondata​(String key, String filename, InputStream inputStream)data​(String key, String filename, InputStream inputStream)datadataStringStringInputStreamAdd an input stream as a request data parameter.Add an input stream as a request data parameter.Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter.ConnectionConnectionConnectiondata​(String key, String filename, InputStream inputStream, String contentType)data​(String key, String filename, InputStream inputStream, String contentType)datadataStringStringInputStreamStringAdd an input stream as a request data parameter.Add an input stream as a request data parameter.Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parametersConnectionConnectionConnectiondata​(Collection<Connection.KeyVal> data)data​(Collection<Connection.KeyVal> data)datadataCollectionConnection.KeyValAdds all of the supplied data to the request data parametersAdds all of the supplied data to the request data parametersConnection data​(Map<String,String> data) Adds all of the supplied data to the request data parametersConnectionConnectionConnectiondata​(Map<String,String> data)data​(Map<String,String> data)datadataMapStringStringAdds all of the supplied data to the request data parametersAdds all of the supplied data to the request data parametersConnection.Response execute​() Execute the request.Connection.ResponseConnection.ResponseConnection.Responseexecute​()execute​()executeexecuteExecute the request.Execute the request.Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects.ConnectionConnectionConnectionfollowRedirects​(boolean followRedirects)followRedirects​(boolean followRedirects)followRedirectsfollowRedirectsConfigures the connection to (not) follow server redirects.Configures the connection to (not) follow server redirects.Document get​() Execute the request as a GET, and parse the result.DocumentDocumentDocumentget​()get​()getgetExecute the request as a GET, and parse the result.Execute the request as a GET, and parse the result.Connection header​(String name, String value) Set a request header.ConnectionConnectionConnectionheader​(String name, String value)header​(String name, String value)headerheaderStringStringSet a request header.Set a request header.Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request.ConnectionConnectionConnectionheaders​(Map<String,String> headers)headers​(Map<String,String> headers)headersheadersMapStringStringAdds each of the supplied headers to the request.Adds each of the supplied headers to the request.Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response.ConnectionConnectionConnectionignoreContentType​(boolean ignoreContentType)ignoreContentType​(boolean ignoreContentType)ignoreContentTypeignoreContentTypeIgnore the document's Content-Type when parsing the response.Ignore the document's Content-Type when parsing the response.Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs.ConnectionConnectionConnectionignoreHttpErrors​(boolean ignoreHttpErrors)ignoreHttpErrors​(boolean ignoreHttpErrors)ignoreHttpErrorsignoreHttpErrorsConfigures the connection to not throw exceptions when a HTTP error occurs.Configures the connection to not throw exceptions when a HTTP error occurs.Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated.ConnectionConnectionConnectionmaxBodySize​(int bytes)maxBodySize​(int bytes)maxBodySizemaxBodySizeSet the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated.Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated.Connection method​(Connection.Method method) Set the request method to use, GET or POST.ConnectionConnectionConnectionmethod​(Connection.Method method)method​(Connection.Method method)methodmethodConnection.MethodSet the request method to use, GET or POST.Set the request method to use, GET or POST.Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document.ConnectionConnectionConnectionparser​(Parser parser)parser​(Parser parser)parserparserParserProvide an alternate parser to use when parsing the response to a Document.Provide an alternate parser to use when parsing the response to a Document.Document post​() Execute the request as a POST, and parse the result.DocumentDocumentDocumentpost​()post​()postpostExecute the request as a POST, and parse the result.Execute the request as a POST, and parse the result.Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post dataConnectionConnectionConnectionpostDataCharset​(String charset)postDataCharset​(String charset)postDataCharsetpostDataCharsetStringSets the default post data character set for x-www-form-urlencoded post dataSets the default post data character set for x-www-form-urlencoded post dataConnection proxy​(String host, int port) Set the HTTP proxy to use for this request.ConnectionConnectionConnectionproxy​(String host, int port)proxy​(String host, int port)proxyproxyStringSet the HTTP proxy to use for this request.Set the HTTP proxy to use for this request.Connection proxy​(Proxy proxy) Set the proxy to use for this request.ConnectionConnectionConnectionproxy​(Proxy proxy)proxy​(Proxy proxy)proxyproxyProxySet the proxy to use for this request.Set the proxy to use for this request.Connection referrer​(String referrer) Set the request referrer (aka "referer") header.ConnectionConnectionConnectionreferrer​(String referrer)referrer​(String referrer)referrerreferrerStringSet the request referrer (aka "referer") header.Set the request referrer (aka "referer") header.Connection.Request request​() Get the request object associated with this connectionConnection.RequestConnection.RequestConnection.Requestrequest​()request​()requestrequestGet the request object associated with this connectionGet the request object associated with this connectionConnection request​(Connection.Request request) Set the connection's requestConnectionConnectionConnectionrequest​(Connection.Request request)request​(Connection.Request request)requestrequestConnection.RequestSet the connection's requestSet the connection's requestConnection requestBody​(String body) Set a POST (or PUT) request body.ConnectionConnectionConnectionrequestBody​(String body)requestBody​(String body)requestBodyrequestBodyStringSet a POST (or PUT) request body.Set a POST (or PUT) request body.Connection.Response response​() Get the response, once the request has been executedConnection.ResponseConnection.ResponseConnection.Responseresponse​()response​()responseresponseGet the response, once the request has been executedGet the response, once the request has been executedConnection response​(Connection.Response response) Set the connection's responseConnectionConnectionConnectionresponse​(Connection.Response response)response​(Connection.Response response)responseresponseConnection.ResponseSet the connection's responseSet the connection's responseConnection timeout​(int millis) Set the total request timeout duration.ConnectionConnectionConnectiontimeout​(int millis)timeout​(int millis)timeouttimeoutSet the total request timeout duration.Set the total request timeout duration.Connection url​(String url) Set the request URL to fetch.ConnectionConnectionConnectionurl​(String url)url​(String url)urlurlStringSet the request URL to fetch.Set the request URL to fetch.Connection url​(URL url) Set the request URL to fetch.ConnectionConnectionConnectionurl​(URL url)url​(URL url)urlurlURLSet the request URL to fetch.Set the request URL to fetch.Connection userAgent​(String userAgent) Set the request user-agent header.ConnectionConnectionConnectionuserAgent​(String userAgent)userAgent​(String userAgent)userAgentuserAgentStringSet the request user-agent header.Set the request user-agent header.Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled.ConnectionConnectionConnectionvalidateTLSCertificates​(boolean value)validateTLSCertificates​(boolean value)validateTLSCertificatesvalidateTLSCertificatesDeprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled.Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled.Deprecated.as distributions (specifically Google Play) are starting to show warnings if these checks are disabled.as distributions (specifically Google Play) are starting to show warnings if these checks are disabled.Method Detail url Connection url​(URL url) Set the request URL to fetch. The protocol must be HTTP or HTTPS. Parameters: url - URL to connect to Returns: this Connection, for chaining url Connection url​(String url) Set the request URL to fetch. The protocol must be HTTP or HTTPS. Parameters: url - URL to connect to Returns: this Connection, for chaining proxy Connection proxy​(Proxy proxy) Set the proxy to use for this request. Set to null to disable. Parameters: proxy - proxy to use Returns: this Connection, for chaining proxy Connection proxy​(String host, int port) Set the HTTP proxy to use for this request. Parameters: host - the proxy hostname port - the proxy port Returns: this Connection, for chaining userAgent Connection userAgent​(String userAgent) Set the request user-agent header. Parameters: userAgent - user-agent to use Returns: this Connection, for chaining See Also: HttpConnection.DEFAULT_UA timeout Connection timeout​(int millis) Set the total request timeout duration. If a timeout occurs, an SocketTimeoutException will be thrown. The default timeout is 30 seconds (30,000 millis). A timeout of zero is treated as an infinite timeout. Note that this timeout specifies the combined maximum duration of the connection time and the time to read the full response. Parameters: millis - number of milliseconds (thousandths of a second) before timing out connects or reads. Returns: this Connection, for chaining See Also: maxBodySize(int) maxBodySize Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. The default maximum is 1MB. A max size of zero is treated as an infinite amount (bounded only by your patience and the memory available on your machine). Parameters: bytes - number of bytes to read from the input before truncating Returns: this Connection, for chaining referrer Connection referrer​(String referrer) Set the request referrer (aka "referer") header. Parameters: referrer - referrer to use Returns: this Connection, for chaining followRedirects Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects. By default this is true. Parameters: followRedirects - true if server redirects should be followed. Returns: this Connection, for chaining method Connection method​(Connection.Method method) Set the request method to use, GET or POST. Default is GET. Parameters: method - HTTP request method Returns: this Connection, for chaining ignoreHttpErrors Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs. (4xx - 5xx, e.g. 404 or 500). By default this is false; an IOException is thrown if an error is encountered. If set to true, the response is populated with the error body, and the status message will reflect the error. Parameters: ignoreHttpErrors - - false (default) if HTTP errors should be ignored. Returns: this Connection, for chaining ignoreContentType Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response. By default this is false, an unrecognised content-type will cause an IOException to be thrown. (This is to prevent producing garbage by attempting to parse a JPEG binary image, for example.) Set to true to force a parse attempt regardless of content type. Parameters: ignoreContentType - set to true if you would like the content type ignored on parsing the response into a Document. Returns: this Connection, for chaining validateTLSCertificates Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled. Disable/enable TLS certificates validation for HTTPS requests. By default this is true; all connections over HTTPS perform normal validation of certificates, and will abort requests if the provided certificate does not validate. Some servers use expired, self-generated certificates; or your JDK may not support SNI hosts. In which case, you may want to enable this setting. Be careful and understand why you need to disable these validations. Parameters: value - if should validate TLS (SSL) certificates. true by default. Returns: this Connection, for chaining data Connection data​(String key, String value) Add a request data parameter. Request parameters are sent in the request query string for GETs, and in the request body for POSTs. A request may have multiple values of the same name. Parameters: key - data key value - data value Returns: this Connection, for chaining data Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream. Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. You must close the InputStream in a finally block. Returns: this Connections, for chaining See Also: if you want to set the uploaded file's mimetype. data Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream. Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. contentType - the Content Type (aka mimetype) to specify for this file. You must close the InputStream in a finally block. Returns: this Connections, for chaining data Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parameters Parameters: data - collection of data parameters Returns: this Connection, for chaining data Connection data​(Map<String,String> data) Adds all of the supplied data to the request data parameters Parameters: data - map of data parameters Returns: this Connection, for chaining data Connection data​(String... keyvals) Add a number of request data parameters. Multiple parameters may be set at once, e.g.: .data("name", "jsoup", "language", "Java", "language", "English"); creates a query string like: ?name=jsoup&language=Java&language=English Parameters: keyvals - a set of key value pairs. Returns: this Connection, for chaining data Connection.KeyVal data​(String key) Get the data KeyVal for this key, if any Parameters: key - the data key Returns: null if not set requestBody Connection requestBody​(String body) Set a POST (or PUT) request body. Useful when a server expects a plain request body, not a set for URL encoded form key/value pairs. E.g.: Jsoup.connect(url) .requestBody(json) .header("Content-Type", "application/json") .post(); If any data key/vals are supplied, they will be sent as URL query params. Returns: this Request, for chaining header Connection header​(String name, String value) Set a request header. Parameters: name - header name value - header value Returns: this Connection, for chaining See Also: Connection.Base.headers() headers Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request. Parameters: headers - map of headers name -> value pairs Returns: this Connection, for chaining See Also: Connection.Base.headers() cookie Connection cookie​(String name, String value) Set a cookie to be sent in the request. Parameters: name - name of cookie value - value of cookie Returns: this Connection, for chaining cookies Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request. Parameters: cookies - map of cookie name -> value pairs Returns: this Connection, for chaining parser Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document. If not set, defaults to the HTML parser, unless the response content-type is XML, in which case the XML parser is used. Parameters: parser - alternate parser Returns: this Connection, for chaining postDataCharset Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post data Parameters: charset - character set to encode post data Returns: this Connection, for chaining get Document get​() throws IOException Execute the request as a GET, and parse the result. Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error post Document post​() throws IOException Execute the request as a POST, and parse the result. Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error execute Connection.Response execute​() throws IOException Execute the request. Returns: a response object Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error request Connection.Request request​() Get the request object associated with this connection Returns: request request Connection request​(Connection.Request request) Set the connection's request Parameters: request - new request object Returns: this Connection, for chaining response Connection.Response response​() Get the response, once the request has been executed Returns: response response Connection response​(Connection.Response response) Set the connection's response Parameters: response - new response Returns: this Connection, for chainingMethod Detail url Connection url​(URL url) Set the request URL to fetch. The protocol must be HTTP or HTTPS. Parameters: url - URL to connect to Returns: this Connection, for chaining url Connection url​(String url) Set the request URL to fetch. The protocol must be HTTP or HTTPS. Parameters: url - URL to connect to Returns: this Connection, for chaining proxy Connection proxy​(Proxy proxy) Set the proxy to use for this request. Set to null to disable. Parameters: proxy - proxy to use Returns: this Connection, for chaining proxy Connection proxy​(String host, int port) Set the HTTP proxy to use for this request. Parameters: host - the proxy hostname port - the proxy port Returns: this Connection, for chaining userAgent Connection userAgent​(String userAgent) Set the request user-agent header. Parameters: userAgent - user-agent to use Returns: this Connection, for chaining See Also: HttpConnection.DEFAULT_UA timeout Connection timeout​(int millis) Set the total request timeout duration. If a timeout occurs, an SocketTimeoutException will be thrown. The default timeout is 30 seconds (30,000 millis). A timeout of zero is treated as an infinite timeout. Note that this timeout specifies the combined maximum duration of the connection time and the time to read the full response. Parameters: millis - number of milliseconds (thousandths of a second) before timing out connects or reads. Returns: this Connection, for chaining See Also: maxBodySize(int) maxBodySize Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. The default maximum is 1MB. A max size of zero is treated as an infinite amount (bounded only by your patience and the memory available on your machine). Parameters: bytes - number of bytes to read from the input before truncating Returns: this Connection, for chaining referrer Connection referrer​(String referrer) Set the request referrer (aka "referer") header. Parameters: referrer - referrer to use Returns: this Connection, for chaining followRedirects Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects. By default this is true. Parameters: followRedirects - true if server redirects should be followed. Returns: this Connection, for chaining method Connection method​(Connection.Method method) Set the request method to use, GET or POST. Default is GET. Parameters: method - HTTP request method Returns: this Connection, for chaining ignoreHttpErrors Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs. (4xx - 5xx, e.g. 404 or 500). By default this is false; an IOException is thrown if an error is encountered. If set to true, the response is populated with the error body, and the status message will reflect the error. Parameters: ignoreHttpErrors - - false (default) if HTTP errors should be ignored. Returns: this Connection, for chaining ignoreContentType Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response. By default this is false, an unrecognised content-type will cause an IOException to be thrown. (This is to prevent producing garbage by attempting to parse a JPEG binary image, for example.) Set to true to force a parse attempt regardless of content type. Parameters: ignoreContentType - set to true if you would like the content type ignored on parsing the response into a Document. Returns: this Connection, for chaining validateTLSCertificates Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled. Disable/enable TLS certificates validation for HTTPS requests. By default this is true; all connections over HTTPS perform normal validation of certificates, and will abort requests if the provided certificate does not validate. Some servers use expired, self-generated certificates; or your JDK may not support SNI hosts. In which case, you may want to enable this setting. Be careful and understand why you need to disable these validations. Parameters: value - if should validate TLS (SSL) certificates. true by default. Returns: this Connection, for chaining data Connection data​(String key, String value) Add a request data parameter. Request parameters are sent in the request query string for GETs, and in the request body for POSTs. A request may have multiple values of the same name. Parameters: key - data key value - data value Returns: this Connection, for chaining data Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream. Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. You must close the InputStream in a finally block. Returns: this Connections, for chaining See Also: if you want to set the uploaded file's mimetype. data Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream. Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. contentType - the Content Type (aka mimetype) to specify for this file. You must close the InputStream in a finally block. Returns: this Connections, for chaining data Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parameters Parameters: data - collection of data parameters Returns: this Connection, for chaining data Connection data​(Map<String,String> data) Adds all of the supplied data to the request data parameters Parameters: data - map of data parameters Returns: this Connection, for chaining data Connection data​(String... keyvals) Add a number of request data parameters. Multiple parameters may be set at once, e.g.: .data("name", "jsoup", "language", "Java", "language", "English"); creates a query string like: ?name=jsoup&language=Java&language=English Parameters: keyvals - a set of key value pairs. Returns: this Connection, for chaining data Connection.KeyVal data​(String key) Get the data KeyVal for this key, if any Parameters: key - the data key Returns: null if not set requestBody Connection requestBody​(String body) Set a POST (or PUT) request body. Useful when a server expects a plain request body, not a set for URL encoded form key/value pairs. E.g.: Jsoup.connect(url) .requestBody(json) .header("Content-Type", "application/json") .post(); If any data key/vals are supplied, they will be sent as URL query params. Returns: this Request, for chaining header Connection header​(String name, String value) Set a request header. Parameters: name - header name value - header value Returns: this Connection, for chaining See Also: Connection.Base.headers() headers Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request. Parameters: headers - map of headers name -> value pairs Returns: this Connection, for chaining See Also: Connection.Base.headers() cookie Connection cookie​(String name, String value) Set a cookie to be sent in the request. Parameters: name - name of cookie value - value of cookie Returns: this Connection, for chaining cookies Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request. Parameters: cookies - map of cookie name -> value pairs Returns: this Connection, for chaining parser Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document. If not set, defaults to the HTML parser, unless the response content-type is XML, in which case the XML parser is used. Parameters: parser - alternate parser Returns: this Connection, for chaining postDataCharset Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post data Parameters: charset - character set to encode post data Returns: this Connection, for chaining get Document get​() throws IOException Execute the request as a GET, and parse the result. Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error post Document post​() throws IOException Execute the request as a POST, and parse the result. Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error execute Connection.Response execute​() throws IOException Execute the request. Returns: a response object Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error request Connection.Request request​() Get the request object associated with this connection Returns: request request Connection request​(Connection.Request request) Set the connection's request Parameters: request - new request object Returns: this Connection, for chaining response Connection.Response response​() Get the response, once the request has been executed Returns: response response Connection response​(Connection.Response response) Set the connection's response Parameters: response - new response Returns: this Connection, for chainingMethod Detail url Connection url​(URL url) Set the request URL to fetch. The protocol must be HTTP or HTTPS. Parameters: url - URL to connect to Returns: this Connection, for chaining url Connection url​(String url) Set the request URL to fetch. The protocol must be HTTP or HTTPS. Parameters: url - URL to connect to Returns: this Connection, for chaining proxy Connection proxy​(Proxy proxy) Set the proxy to use for this request. Set to null to disable. Parameters: proxy - proxy to use Returns: this Connection, for chaining proxy Connection proxy​(String host, int port) Set the HTTP proxy to use for this request. Parameters: host - the proxy hostname port - the proxy port Returns: this Connection, for chaining userAgent Connection userAgent​(String userAgent) Set the request user-agent header. Parameters: userAgent - user-agent to use Returns: this Connection, for chaining See Also: HttpConnection.DEFAULT_UA timeout Connection timeout​(int millis) Set the total request timeout duration. If a timeout occurs, an SocketTimeoutException will be thrown. The default timeout is 30 seconds (30,000 millis). A timeout of zero is treated as an infinite timeout. Note that this timeout specifies the combined maximum duration of the connection time and the time to read the full response. Parameters: millis - number of milliseconds (thousandths of a second) before timing out connects or reads. Returns: this Connection, for chaining See Also: maxBodySize(int) maxBodySize Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. The default maximum is 1MB. A max size of zero is treated as an infinite amount (bounded only by your patience and the memory available on your machine). Parameters: bytes - number of bytes to read from the input before truncating Returns: this Connection, for chaining referrer Connection referrer​(String referrer) Set the request referrer (aka "referer") header. Parameters: referrer - referrer to use Returns: this Connection, for chaining followRedirects Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects. By default this is true. Parameters: followRedirects - true if server redirects should be followed. Returns: this Connection, for chaining method Connection method​(Connection.Method method) Set the request method to use, GET or POST. Default is GET. Parameters: method - HTTP request method Returns: this Connection, for chaining ignoreHttpErrors Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs. (4xx - 5xx, e.g. 404 or 500). By default this is false; an IOException is thrown if an error is encountered. If set to true, the response is populated with the error body, and the status message will reflect the error. Parameters: ignoreHttpErrors - - false (default) if HTTP errors should be ignored. Returns: this Connection, for chaining ignoreContentType Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response. By default this is false, an unrecognised content-type will cause an IOException to be thrown. (This is to prevent producing garbage by attempting to parse a JPEG binary image, for example.) Set to true to force a parse attempt regardless of content type. Parameters: ignoreContentType - set to true if you would like the content type ignored on parsing the response into a Document. Returns: this Connection, for chaining validateTLSCertificates Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled. Disable/enable TLS certificates validation for HTTPS requests. By default this is true; all connections over HTTPS perform normal validation of certificates, and will abort requests if the provided certificate does not validate. Some servers use expired, self-generated certificates; or your JDK may not support SNI hosts. In which case, you may want to enable this setting. Be careful and understand why you need to disable these validations. Parameters: value - if should validate TLS (SSL) certificates. true by default. Returns: this Connection, for chaining data Connection data​(String key, String value) Add a request data parameter. Request parameters are sent in the request query string for GETs, and in the request body for POSTs. A request may have multiple values of the same name. Parameters: key - data key value - data value Returns: this Connection, for chaining data Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream. Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. You must close the InputStream in a finally block. Returns: this Connections, for chaining See Also: if you want to set the uploaded file's mimetype. data Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream. Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. contentType - the Content Type (aka mimetype) to specify for this file. You must close the InputStream in a finally block. Returns: this Connections, for chaining data Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parameters Parameters: data - collection of data parameters Returns: this Connection, for chaining data Connection data​(Map<String,String> data) Adds all of the supplied data to the request data parameters Parameters: data - map of data parameters Returns: this Connection, for chaining data Connection data​(String... keyvals) Add a number of request data parameters. Multiple parameters may be set at once, e.g.: .data("name", "jsoup", "language", "Java", "language", "English"); creates a query string like: ?name=jsoup&language=Java&language=English Parameters: keyvals - a set of key value pairs. Returns: this Connection, for chaining data Connection.KeyVal data​(String key) Get the data KeyVal for this key, if any Parameters: key - the data key Returns: null if not set requestBody Connection requestBody​(String body) Set a POST (or PUT) request body. Useful when a server expects a plain request body, not a set for URL encoded form key/value pairs. E.g.: Jsoup.connect(url) .requestBody(json) .header("Content-Type", "application/json") .post(); If any data key/vals are supplied, they will be sent as URL query params. Returns: this Request, for chaining header Connection header​(String name, String value) Set a request header. Parameters: name - header name value - header value Returns: this Connection, for chaining See Also: Connection.Base.headers() headers Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request. Parameters: headers - map of headers name -> value pairs Returns: this Connection, for chaining See Also: Connection.Base.headers() cookie Connection cookie​(String name, String value) Set a cookie to be sent in the request. Parameters: name - name of cookie value - value of cookie Returns: this Connection, for chaining cookies Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request. Parameters: cookies - map of cookie name -> value pairs Returns: this Connection, for chaining parser Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document. If not set, defaults to the HTML parser, unless the response content-type is XML, in which case the XML parser is used. Parameters: parser - alternate parser Returns: this Connection, for chaining postDataCharset Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post data Parameters: charset - character set to encode post data Returns: this Connection, for chaining get Document get​() throws IOException Execute the request as a GET, and parse the result. Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error post Document post​() throws IOException Execute the request as a POST, and parse the result. Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error execute Connection.Response execute​() throws IOException Execute the request. Returns: a response object Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error request Connection.Request request​() Get the request object associated with this connection Returns: request request Connection request​(Connection.Request request) Set the connection's request Parameters: request - new request object Returns: this Connection, for chaining response Connection.Response response​() Get the response, once the request has been executed Returns: response response Connection response​(Connection.Response response) Set the connection's response Parameters: response - new response Returns: this Connection, for chainingMethod Detail url Connection url​(URL url) Set the request URL to fetch. The protocol must be HTTP or HTTPS. Parameters: url - URL to connect to Returns: this Connection, for chaining url Connection url​(String url) Set the request URL to fetch. The protocol must be HTTP or HTTPS. Parameters: url - URL to connect to Returns: this Connection, for chaining proxy Connection proxy​(Proxy proxy) Set the proxy to use for this request. Set to null to disable. Parameters: proxy - proxy to use Returns: this Connection, for chaining proxy Connection proxy​(String host, int port) Set the HTTP proxy to use for this request. Parameters: host - the proxy hostname port - the proxy port Returns: this Connection, for chaining userAgent Connection userAgent​(String userAgent) Set the request user-agent header. Parameters: userAgent - user-agent to use Returns: this Connection, for chaining See Also: HttpConnection.DEFAULT_UA timeout Connection timeout​(int millis) Set the total request timeout duration. If a timeout occurs, an SocketTimeoutException will be thrown. The default timeout is 30 seconds (30,000 millis). A timeout of zero is treated as an infinite timeout. Note that this timeout specifies the combined maximum duration of the connection time and the time to read the full response. Parameters: millis - number of milliseconds (thousandths of a second) before timing out connects or reads. Returns: this Connection, for chaining See Also: maxBodySize(int) maxBodySize Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. The default maximum is 1MB. A max size of zero is treated as an infinite amount (bounded only by your patience and the memory available on your machine). Parameters: bytes - number of bytes to read from the input before truncating Returns: this Connection, for chaining referrer Connection referrer​(String referrer) Set the request referrer (aka "referer") header. Parameters: referrer - referrer to use Returns: this Connection, for chaining followRedirects Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects. By default this is true. Parameters: followRedirects - true if server redirects should be followed. Returns: this Connection, for chaining method Connection method​(Connection.Method method) Set the request method to use, GET or POST. Default is GET. Parameters: method - HTTP request method Returns: this Connection, for chaining ignoreHttpErrors Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs. (4xx - 5xx, e.g. 404 or 500). By default this is false; an IOException is thrown if an error is encountered. If set to true, the response is populated with the error body, and the status message will reflect the error. Parameters: ignoreHttpErrors - - false (default) if HTTP errors should be ignored. Returns: this Connection, for chaining ignoreContentType Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response. By default this is false, an unrecognised content-type will cause an IOException to be thrown. (This is to prevent producing garbage by attempting to parse a JPEG binary image, for example.) Set to true to force a parse attempt regardless of content type. Parameters: ignoreContentType - set to true if you would like the content type ignored on parsing the response into a Document. Returns: this Connection, for chaining validateTLSCertificates Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled. Disable/enable TLS certificates validation for HTTPS requests. By default this is true; all connections over HTTPS perform normal validation of certificates, and will abort requests if the provided certificate does not validate. Some servers use expired, self-generated certificates; or your JDK may not support SNI hosts. In which case, you may want to enable this setting. Be careful and understand why you need to disable these validations. Parameters: value - if should validate TLS (SSL) certificates. true by default. Returns: this Connection, for chaining data Connection data​(String key, String value) Add a request data parameter. Request parameters are sent in the request query string for GETs, and in the request body for POSTs. A request may have multiple values of the same name. Parameters: key - data key value - data value Returns: this Connection, for chaining data Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream. Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. You must close the InputStream in a finally block. Returns: this Connections, for chaining See Also: if you want to set the uploaded file's mimetype. data Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream. Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. contentType - the Content Type (aka mimetype) to specify for this file. You must close the InputStream in a finally block. Returns: this Connections, for chaining data Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parameters Parameters: data - collection of data parameters Returns: this Connection, for chaining data Connection data​(Map<String,String> data) Adds all of the supplied data to the request data parameters Parameters: data - map of data parameters Returns: this Connection, for chaining data Connection data​(String... keyvals) Add a number of request data parameters. Multiple parameters may be set at once, e.g.: .data("name", "jsoup", "language", "Java", "language", "English"); creates a query string like: ?name=jsoup&language=Java&language=English Parameters: keyvals - a set of key value pairs. Returns: this Connection, for chaining data Connection.KeyVal data​(String key) Get the data KeyVal for this key, if any Parameters: key - the data key Returns: null if not set requestBody Connection requestBody​(String body) Set a POST (or PUT) request body. Useful when a server expects a plain request body, not a set for URL encoded form key/value pairs. E.g.: Jsoup.connect(url) .requestBody(json) .header("Content-Type", "application/json") .post(); If any data key/vals are supplied, they will be sent as URL query params. Returns: this Request, for chaining header Connection header​(String name, String value) Set a request header. Parameters: name - header name value - header value Returns: this Connection, for chaining See Also: Connection.Base.headers() headers Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request. Parameters: headers - map of headers name -> value pairs Returns: this Connection, for chaining See Also: Connection.Base.headers() cookie Connection cookie​(String name, String value) Set a cookie to be sent in the request. Parameters: name - name of cookie value - value of cookie Returns: this Connection, for chaining cookies Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request. Parameters: cookies - map of cookie name -> value pairs Returns: this Connection, for chaining parser Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document. If not set, defaults to the HTML parser, unless the response content-type is XML, in which case the XML parser is used. Parameters: parser - alternate parser Returns: this Connection, for chaining postDataCharset Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post data Parameters: charset - character set to encode post data Returns: this Connection, for chaining get Document get​() throws IOException Execute the request as a GET, and parse the result. Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error post Document post​() throws IOException Execute the request as a POST, and parse the result. Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error execute Connection.Response execute​() throws IOException Execute the request. Returns: a response object Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error request Connection.Request request​() Get the request object associated with this connection Returns: request request Connection request​(Connection.Request request) Set the connection's request Parameters: request - new request object Returns: this Connection, for chaining response Connection.Response response​() Get the response, once the request has been executed Returns: response response Connection response​(Connection.Response response) Set the connection's response Parameters: response - new response Returns: this Connection, for chainingMethod Detail url Connection url​(URL url) Set the request URL to fetch. The protocol must be HTTP or HTTPS. Parameters: url - URL to connect to Returns: this Connection, for chaining url Connection url​(String url) Set the request URL to fetch. The protocol must be HTTP or HTTPS. Parameters: url - URL to connect to Returns: this Connection, for chaining proxy Connection proxy​(Proxy proxy) Set the proxy to use for this request. Set to null to disable. Parameters: proxy - proxy to use Returns: this Connection, for chaining proxy Connection proxy​(String host, int port) Set the HTTP proxy to use for this request. Parameters: host - the proxy hostname port - the proxy port Returns: this Connection, for chaining userAgent Connection userAgent​(String userAgent) Set the request user-agent header. Parameters: userAgent - user-agent to use Returns: this Connection, for chaining See Also: HttpConnection.DEFAULT_UA timeout Connection timeout​(int millis) Set the total request timeout duration. If a timeout occurs, an SocketTimeoutException will be thrown. The default timeout is 30 seconds (30,000 millis). A timeout of zero is treated as an infinite timeout. Note that this timeout specifies the combined maximum duration of the connection time and the time to read the full response. Parameters: millis - number of milliseconds (thousandths of a second) before timing out connects or reads. Returns: this Connection, for chaining See Also: maxBodySize(int) maxBodySize Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. The default maximum is 1MB. A max size of zero is treated as an infinite amount (bounded only by your patience and the memory available on your machine). Parameters: bytes - number of bytes to read from the input before truncating Returns: this Connection, for chaining referrer Connection referrer​(String referrer) Set the request referrer (aka "referer") header. Parameters: referrer - referrer to use Returns: this Connection, for chaining followRedirects Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects. By default this is true. Parameters: followRedirects - true if server redirects should be followed. Returns: this Connection, for chaining method Connection method​(Connection.Method method) Set the request method to use, GET or POST. Default is GET. Parameters: method - HTTP request method Returns: this Connection, for chaining ignoreHttpErrors Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs. (4xx - 5xx, e.g. 404 or 500). By default this is false; an IOException is thrown if an error is encountered. If set to true, the response is populated with the error body, and the status message will reflect the error. Parameters: ignoreHttpErrors - - false (default) if HTTP errors should be ignored. Returns: this Connection, for chaining ignoreContentType Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response. By default this is false, an unrecognised content-type will cause an IOException to be thrown. (This is to prevent producing garbage by attempting to parse a JPEG binary image, for example.) Set to true to force a parse attempt regardless of content type. Parameters: ignoreContentType - set to true if you would like the content type ignored on parsing the response into a Document. Returns: this Connection, for chaining validateTLSCertificates Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled. Disable/enable TLS certificates validation for HTTPS requests. By default this is true; all connections over HTTPS perform normal validation of certificates, and will abort requests if the provided certificate does not validate. Some servers use expired, self-generated certificates; or your JDK may not support SNI hosts. In which case, you may want to enable this setting. Be careful and understand why you need to disable these validations. Parameters: value - if should validate TLS (SSL) certificates. true by default. Returns: this Connection, for chaining data Connection data​(String key, String value) Add a request data parameter. Request parameters are sent in the request query string for GETs, and in the request body for POSTs. A request may have multiple values of the same name. Parameters: key - data key value - data value Returns: this Connection, for chaining data Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream. Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. You must close the InputStream in a finally block. Returns: this Connections, for chaining See Also: if you want to set the uploaded file's mimetype. data Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream. Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. contentType - the Content Type (aka mimetype) to specify for this file. You must close the InputStream in a finally block. Returns: this Connections, for chaining data Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parameters Parameters: data - collection of data parameters Returns: this Connection, for chaining data Connection data​(Map<String,String> data) Adds all of the supplied data to the request data parameters Parameters: data - map of data parameters Returns: this Connection, for chaining data Connection data​(String... keyvals) Add a number of request data parameters. Multiple parameters may be set at once, e.g.: .data("name", "jsoup", "language", "Java", "language", "English"); creates a query string like: ?name=jsoup&language=Java&language=English Parameters: keyvals - a set of key value pairs. Returns: this Connection, for chaining data Connection.KeyVal data​(String key) Get the data KeyVal for this key, if any Parameters: key - the data key Returns: null if not set requestBody Connection requestBody​(String body) Set a POST (or PUT) request body. Useful when a server expects a plain request body, not a set for URL encoded form key/value pairs. E.g.: Jsoup.connect(url) .requestBody(json) .header("Content-Type", "application/json") .post(); If any data key/vals are supplied, they will be sent as URL query params. Returns: this Request, for chaining header Connection header​(String name, String value) Set a request header. Parameters: name - header name value - header value Returns: this Connection, for chaining See Also: Connection.Base.headers() headers Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request. Parameters: headers - map of headers name -> value pairs Returns: this Connection, for chaining See Also: Connection.Base.headers() cookie Connection cookie​(String name, String value) Set a cookie to be sent in the request. Parameters: name - name of cookie value - value of cookie Returns: this Connection, for chaining cookies Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request. Parameters: cookies - map of cookie name -> value pairs Returns: this Connection, for chaining parser Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document. If not set, defaults to the HTML parser, unless the response content-type is XML, in which case the XML parser is used. Parameters: parser - alternate parser Returns: this Connection, for chaining postDataCharset Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post data Parameters: charset - character set to encode post data Returns: this Connection, for chaining get Document get​() throws IOException Execute the request as a GET, and parse the result. Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error post Document post​() throws IOException Execute the request as a POST, and parse the result. Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error execute Connection.Response execute​() throws IOException Execute the request. Returns: a response object Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on error request Connection.Request request​() Get the request object associated with this connection Returns: request request Connection request​(Connection.Request request) Set the connection's request Parameters: request - new request object Returns: this Connection, for chaining response Connection.Response response​() Get the response, once the request has been executed Returns: response response Connection response​(Connection.Response response) Set the connection's response Parameters: response - new response Returns: this Connection, for chainingMethod Detailurl Connection url​(URL url) Set the request URL to fetch. The protocol must be HTTP or HTTPS. Parameters: url - URL to connect to Returns: this Connection, for chainingurl Connection url​(URL url) Set the request URL to fetch. The protocol must be HTTP or HTTPS. Parameters: url - URL to connect to Returns: this Connection, for chainingurlConnection url​(URL url)ConnectionURLSet the request URL to fetch. The protocol must be HTTP or HTTPS.Parameters: url - URL to connect to Returns: this Connection, for chainingParameters:Parameters:url - URL to connect tourlReturns:Returns:this Connection, for chainingurl Connection url​(String url) Set the request URL to fetch. The protocol must be HTTP or HTTPS. Parameters: url - URL to connect to Returns: this Connection, for chainingurl Connection url​(String url) Set the request URL to fetch. The protocol must be HTTP or HTTPS. Parameters: url - URL to connect to Returns: this Connection, for chainingurlConnection url​(String url)ConnectionStringSet the request URL to fetch. The protocol must be HTTP or HTTPS.Parameters: url - URL to connect to Returns: this Connection, for chainingParameters:Parameters:url - URL to connect tourlReturns:Returns:this Connection, for chainingproxy Connection proxy​(Proxy proxy) Set the proxy to use for this request. Set to null to disable. Parameters: proxy - proxy to use Returns: this Connection, for chainingproxy Connection proxy​(Proxy proxy) Set the proxy to use for this request. Set to null to disable. Parameters: proxy - proxy to use Returns: this Connection, for chainingproxyConnection proxy​(Proxy proxy)ConnectionProxySet the proxy to use for this request. Set to null to disable.nullParameters: proxy - proxy to use Returns: this Connection, for chainingParameters:Parameters:proxy - proxy to useproxyReturns:Returns:this Connection, for chainingproxy Connection proxy​(String host, int port) Set the HTTP proxy to use for this request. Parameters: host - the proxy hostname port - the proxy port Returns: this Connection, for chainingproxy Connection proxy​(String host, int port) Set the HTTP proxy to use for this request. Parameters: host - the proxy hostname port - the proxy port Returns: this Connection, for chainingproxyConnection proxy​(String host, int port)ConnectionStringSet the HTTP proxy to use for this request.Parameters: host - the proxy hostname port - the proxy port Returns: this Connection, for chainingParameters:Parameters:host - the proxy hostnamehostport - the proxy portportReturns:Returns:this Connection, for chaininguserAgent Connection userAgent​(String userAgent) Set the request user-agent header. Parameters: userAgent - user-agent to use Returns: this Connection, for chaining See Also: HttpConnection.DEFAULT_UAuserAgent Connection userAgent​(String userAgent) Set the request user-agent header. Parameters: userAgent - user-agent to use Returns: this Connection, for chaining See Also: HttpConnection.DEFAULT_UAuserAgentConnection userAgent​(String userAgent)ConnectionStringSet the request user-agent header.Parameters: userAgent - user-agent to use Returns: this Connection, for chaining See Also: HttpConnection.DEFAULT_UAParameters:Parameters:userAgent - user-agent to useuserAgentReturns:Returns:this Connection, for chainingSee Also:See Also:HttpConnection.DEFAULT_UAHttpConnection.DEFAULT_UAHttpConnection.DEFAULT_UAtimeout Connection timeout​(int millis) Set the total request timeout duration. If a timeout occurs, an SocketTimeoutException will be thrown. The default timeout is 30 seconds (30,000 millis). A timeout of zero is treated as an infinite timeout. Note that this timeout specifies the combined maximum duration of the connection time and the time to read the full response. Parameters: millis - number of milliseconds (thousandths of a second) before timing out connects or reads. Returns: this Connection, for chaining See Also: maxBodySize(int)timeout Connection timeout​(int millis) Set the total request timeout duration. If a timeout occurs, an SocketTimeoutException will be thrown. The default timeout is 30 seconds (30,000 millis). A timeout of zero is treated as an infinite timeout. Note that this timeout specifies the combined maximum duration of the connection time and the time to read the full response. Parameters: millis - number of milliseconds (thousandths of a second) before timing out connects or reads. Returns: this Connection, for chaining See Also: maxBodySize(int)timeoutConnection timeout​(int millis)ConnectionSet the total request timeout duration. If a timeout occurs, an SocketTimeoutException will be thrown. The default timeout is 30 seconds (30,000 millis). A timeout of zero is treated as an infinite timeout. Note that this timeout specifies the combined maximum duration of the connection time and the time to read the full response.SocketTimeoutExceptionSocketTimeoutExceptionThe default timeout is 30 seconds (30,000 millis). A timeout of zero is treated as an infinite timeout.30 secondsNote that this timeout specifies the combined maximum duration of the connection time and the time to read the full response.Parameters: millis - number of milliseconds (thousandths of a second) before timing out connects or reads. Returns: this Connection, for chaining See Also: maxBodySize(int)Parameters:Parameters:millis - number of milliseconds (thousandths of a second) before timing out connects or reads.millisReturns:Returns:this Connection, for chainingSee Also:See Also:maxBodySize(int)maxBodySize(int)maxBodySize(int)maxBodySize Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. The default maximum is 1MB. A max size of zero is treated as an infinite amount (bounded only by your patience and the memory available on your machine). Parameters: bytes - number of bytes to read from the input before truncating Returns: this Connection, for chainingmaxBodySize Connection maxBodySize​(int bytes) Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. The default maximum is 1MB. A max size of zero is treated as an infinite amount (bounded only by your patience and the memory available on your machine). Parameters: bytes - number of bytes to read from the input before truncating Returns: this Connection, for chainingmaxBodySizeConnection maxBodySize​(int bytes)ConnectionSet the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed, and the input truncated. The default maximum is 1MB. A max size of zero is treated as an infinite amount (bounded only by your patience and the memory available on your machine).Parameters: bytes - number of bytes to read from the input before truncating Returns: this Connection, for chainingParameters:Parameters:bytes - number of bytes to read from the input before truncatingbytesReturns:Returns:this Connection, for chainingreferrer Connection referrer​(String referrer) Set the request referrer (aka "referer") header. Parameters: referrer - referrer to use Returns: this Connection, for chainingreferrer Connection referrer​(String referrer) Set the request referrer (aka "referer") header. Parameters: referrer - referrer to use Returns: this Connection, for chainingreferrerConnection referrer​(String referrer)ConnectionStringSet the request referrer (aka "referer") header.Parameters: referrer - referrer to use Returns: this Connection, for chainingParameters:Parameters:referrer - referrer to usereferrerReturns:Returns:this Connection, for chainingfollowRedirects Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects. By default this is true. Parameters: followRedirects - true if server redirects should be followed. Returns: this Connection, for chainingfollowRedirects Connection followRedirects​(boolean followRedirects) Configures the connection to (not) follow server redirects. By default this is true. Parameters: followRedirects - true if server redirects should be followed. Returns: this Connection, for chainingfollowRedirectsConnection followRedirects​(boolean followRedirects)ConnectionConfigures the connection to (not) follow server redirects. By default this is true.trueParameters: followRedirects - true if server redirects should be followed. Returns: this Connection, for chainingParameters:Parameters:followRedirects - true if server redirects should be followed.followRedirectsReturns:Returns:this Connection, for chainingmethod Connection method​(Connection.Method method) Set the request method to use, GET or POST. Default is GET. Parameters: method - HTTP request method Returns: this Connection, for chainingmethod Connection method​(Connection.Method method) Set the request method to use, GET or POST. Default is GET. Parameters: method - HTTP request method Returns: this Connection, for chainingmethodConnection method​(Connection.Method method)ConnectionConnection.MethodSet the request method to use, GET or POST. Default is GET.Parameters: method - HTTP request method Returns: this Connection, for chainingParameters:Parameters:method - HTTP request methodmethodReturns:Returns:this Connection, for chainingignoreHttpErrors Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs. (4xx - 5xx, e.g. 404 or 500). By default this is false; an IOException is thrown if an error is encountered. If set to true, the response is populated with the error body, and the status message will reflect the error. Parameters: ignoreHttpErrors - - false (default) if HTTP errors should be ignored. Returns: this Connection, for chainingignoreHttpErrors Connection ignoreHttpErrors​(boolean ignoreHttpErrors) Configures the connection to not throw exceptions when a HTTP error occurs. (4xx - 5xx, e.g. 404 or 500). By default this is false; an IOException is thrown if an error is encountered. If set to true, the response is populated with the error body, and the status message will reflect the error. Parameters: ignoreHttpErrors - - false (default) if HTTP errors should be ignored. Returns: this Connection, for chainingignoreHttpErrorsConnection ignoreHttpErrors​(boolean ignoreHttpErrors)ConnectionConfigures the connection to not throw exceptions when a HTTP error occurs. (4xx - 5xx, e.g. 404 or 500). By default this is false; an IOException is thrown if an error is encountered. If set to true, the response is populated with the error body, and the status message will reflect the error.falsetrueParameters: ignoreHttpErrors - - false (default) if HTTP errors should be ignored. Returns: this Connection, for chainingParameters:Parameters:ignoreHttpErrors - - false (default) if HTTP errors should be ignored.ignoreHttpErrorsReturns:Returns:this Connection, for chainingignoreContentType Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response. By default this is false, an unrecognised content-type will cause an IOException to be thrown. (This is to prevent producing garbage by attempting to parse a JPEG binary image, for example.) Set to true to force a parse attempt regardless of content type. Parameters: ignoreContentType - set to true if you would like the content type ignored on parsing the response into a Document. Returns: this Connection, for chainingignoreContentType Connection ignoreContentType​(boolean ignoreContentType) Ignore the document's Content-Type when parsing the response. By default this is false, an unrecognised content-type will cause an IOException to be thrown. (This is to prevent producing garbage by attempting to parse a JPEG binary image, for example.) Set to true to force a parse attempt regardless of content type. Parameters: ignoreContentType - set to true if you would like the content type ignored on parsing the response into a Document. Returns: this Connection, for chainingignoreContentTypeConnection ignoreContentType​(boolean ignoreContentType)ConnectionIgnore the document's Content-Type when parsing the response. By default this is false, an unrecognised content-type will cause an IOException to be thrown. (This is to prevent producing garbage by attempting to parse a JPEG binary image, for example.) Set to true to force a parse attempt regardless of content type.falseParameters: ignoreContentType - set to true if you would like the content type ignored on parsing the response into a Document. Returns: this Connection, for chainingParameters:Parameters:ignoreContentType - set to true if you would like the content type ignored on parsing the response into a Document.ignoreContentTypeReturns:Returns:this Connection, for chainingvalidateTLSCertificates Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled. Disable/enable TLS certificates validation for HTTPS requests. By default this is true; all connections over HTTPS perform normal validation of certificates, and will abort requests if the provided certificate does not validate. Some servers use expired, self-generated certificates; or your JDK may not support SNI hosts. In which case, you may want to enable this setting. Be careful and understand why you need to disable these validations. Parameters: value - if should validate TLS (SSL) certificates. true by default. Returns: this Connection, for chainingvalidateTLSCertificates Connection validateTLSCertificates​(boolean value) Deprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled. Disable/enable TLS certificates validation for HTTPS requests. By default this is true; all connections over HTTPS perform normal validation of certificates, and will abort requests if the provided certificate does not validate. Some servers use expired, self-generated certificates; or your JDK may not support SNI hosts. In which case, you may want to enable this setting. Be careful and understand why you need to disable these validations. Parameters: value - if should validate TLS (SSL) certificates. true by default. Returns: this Connection, for chainingvalidateTLSCertificatesConnection validateTLSCertificates​(boolean value)ConnectionDeprecated. as distributions (specifically Google Play) are starting to show warnings if these checks are disabled.Deprecated.as distributions (specifically Google Play) are starting to show warnings if these checks are disabled.Disable/enable TLS certificates validation for HTTPS requests. By default this is true; all connections over HTTPS perform normal validation of certificates, and will abort requests if the provided certificate does not validate. Some servers use expired, self-generated certificates; or your JDK may not support SNI hosts. In which case, you may want to enable this setting. Be careful and understand why you need to disable these validations.By default this is true; all connections over HTTPS perform normal validation of certificates, and will abort requests if the provided certificate does not validate.trueSome servers use expired, self-generated certificates; or your JDK may not support SNI hosts. In which case, you may want to enable this setting.Be careful and understand why you need to disable these validations.Be carefulParameters: value - if should validate TLS (SSL) certificates. true by default. Returns: this Connection, for chainingParameters:Parameters:value - if should validate TLS (SSL) certificates. true by default.valuetrueReturns:Returns:this Connection, for chainingdata Connection data​(String key, String value) Add a request data parameter. Request parameters are sent in the request query string for GETs, and in the request body for POSTs. A request may have multiple values of the same name. Parameters: key - data key value - data value Returns: this Connection, for chainingdata Connection data​(String key, String value) Add a request data parameter. Request parameters are sent in the request query string for GETs, and in the request body for POSTs. A request may have multiple values of the same name. Parameters: key - data key value - data value Returns: this Connection, for chainingdataConnection data​(String key, String value)ConnectionStringStringAdd a request data parameter. Request parameters are sent in the request query string for GETs, and in the request body for POSTs. A request may have multiple values of the same name.Parameters: key - data key value - data value Returns: this Connection, for chainingParameters:Parameters:key - data keykeyvalue - data valuevalueReturns:Returns:this Connection, for chainingdata Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream. Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. You must close the InputStream in a finally block. Returns: this Connections, for chaining See Also: if you want to set the uploaded file's mimetype.data Connection data​(String key, String filename, InputStream inputStream) Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream. Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. You must close the InputStream in a finally block. Returns: this Connections, for chaining See Also: if you want to set the uploaded file's mimetype.dataConnection data​(String key, String filename, InputStream inputStream)ConnectionStringStringInputStreamAdd an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream.Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. You must close the InputStream in a finally block. Returns: this Connections, for chaining See Also: if you want to set the uploaded file's mimetype.Parameters:Parameters:key - data key (form item name)keyfilename - the name of the file to present to the remove server. Typically just the name, not path, component.filenameinputStream - the input stream to upload, that you probably obtained from a FileInputStream. You must close the InputStream in a finally block.inputStreamFileInputStreamFileInputStreamfinallyReturns:Returns:this Connections, for chainingSee Also:See Also:if you want to set the uploaded file's mimetype.if you want to set the uploaded file's mimetype.if you want to set the uploaded file's mimetype.data Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream. Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. contentType - the Content Type (aka mimetype) to specify for this file. You must close the InputStream in a finally block. Returns: this Connections, for chainingdata Connection data​(String key, String filename, InputStream inputStream, String contentType) Add an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream. Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. contentType - the Content Type (aka mimetype) to specify for this file. You must close the InputStream in a finally block. Returns: this Connections, for chainingdataConnection data​(String key, String filename, InputStream inputStream, String contentType)ConnectionStringStringInputStreamStringAdd an input stream as a request data parameter. For GETs, has no effect, but for POSTS this will upload the input stream.Parameters: key - data key (form item name) filename - the name of the file to present to the remove server. Typically just the name, not path, component. inputStream - the input stream to upload, that you probably obtained from a FileInputStream. contentType - the Content Type (aka mimetype) to specify for this file. You must close the InputStream in a finally block. Returns: this Connections, for chainingParameters:Parameters:key - data key (form item name)keyfilename - the name of the file to present to the remove server. Typically just the name, not path, component.filenameinputStream - the input stream to upload, that you probably obtained from a FileInputStream.inputStreamFileInputStreamFileInputStreamcontentType - the Content Type (aka mimetype) to specify for this file. You must close the InputStream in a finally block.contentTypefinallyReturns:Returns:this Connections, for chainingdata Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parameters Parameters: data - collection of data parameters Returns: this Connection, for chainingdata Connection data​(Collection<Connection.KeyVal> data) Adds all of the supplied data to the request data parameters Parameters: data - collection of data parameters Returns: this Connection, for chainingdataConnection data​(Collection<Connection.KeyVal> data)ConnectionCollectionConnection.KeyValAdds all of the supplied data to the request data parametersParameters: data - collection of data parameters Returns: this Connection, for chainingParameters:Parameters:data - collection of data parametersdataReturns:Returns:this Connection, for chainingdata Connection data​(Map<String,String> data) Adds all of the supplied data to the request data parameters Parameters: data - map of data parameters Returns: this Connection, for chainingdata Connection data​(Map<String,String> data) Adds all of the supplied data to the request data parameters Parameters: data - map of data parameters Returns: this Connection, for chainingdataConnection data​(Map<String,String> data)ConnectionMapStringStringAdds all of the supplied data to the request data parametersParameters: data - map of data parameters Returns: this Connection, for chainingParameters:Parameters:data - map of data parametersdataReturns:Returns:this Connection, for chainingdata Connection data​(String... keyvals) Add a number of request data parameters. Multiple parameters may be set at once, e.g.: .data("name", "jsoup", "language", "Java", "language", "English"); creates a query string like: ?name=jsoup&language=Java&language=English Parameters: keyvals - a set of key value pairs. Returns: this Connection, for chainingdata Connection data​(String... keyvals) Add a number of request data parameters. Multiple parameters may be set at once, e.g.: .data("name", "jsoup", "language", "Java", "language", "English"); creates a query string like: ?name=jsoup&language=Java&language=English Parameters: keyvals - a set of key value pairs. Returns: this Connection, for chainingdataConnection data​(String... keyvals)ConnectionStringAdd a number of request data parameters. Multiple parameters may be set at once, e.g.: .data("name", "jsoup", "language", "Java", "language", "English"); creates a query string like: ?name=jsoup&language=Java&language=English.data("name", "jsoup", "language", "Java", "language", "English");?name=jsoup&language=Java&language=EnglishParameters: keyvals - a set of key value pairs. Returns: this Connection, for chainingParameters:Parameters:keyvals - a set of key value pairs.keyvalsReturns:Returns:this Connection, for chainingdata Connection.KeyVal data​(String key) Get the data KeyVal for this key, if any Parameters: key - the data key Returns: null if not setdata Connection.KeyVal data​(String key) Get the data KeyVal for this key, if any Parameters: key - the data key Returns: null if not setdataConnection.KeyVal data​(String key)Connection.KeyValStringGet the data KeyVal for this key, if anyParameters: key - the data key Returns: null if not setParameters:Parameters:key - the data keykeyReturns:Returns:null if not setrequestBody Connection requestBody​(String body) Set a POST (or PUT) request body. Useful when a server expects a plain request body, not a set for URL encoded form key/value pairs. E.g.: Jsoup.connect(url) .requestBody(json) .header("Content-Type", "application/json") .post(); If any data key/vals are supplied, they will be sent as URL query params. Returns: this Request, for chainingrequestBody Connection requestBody​(String body) Set a POST (or PUT) request body. Useful when a server expects a plain request body, not a set for URL encoded form key/value pairs. E.g.: Jsoup.connect(url) .requestBody(json) .header("Content-Type", "application/json") .post(); If any data key/vals are supplied, they will be sent as URL query params. Returns: this Request, for chainingrequestBodyConnection requestBody​(String body)ConnectionStringSet a POST (or PUT) request body. Useful when a server expects a plain request body, not a set for URL encoded form key/value pairs. E.g.: Jsoup.connect(url) .requestBody(json) .header("Content-Type", "application/json") .post(); If any data key/vals are supplied, they will be sent as URL query params.Jsoup.connect(url) .requestBody(json) .header("Content-Type", "application/json") .post();Jsoup.connect(url) .requestBody(json) .header("Content-Type", "application/json") .post();Returns: this Request, for chainingReturns:Returns:this Request, for chainingheader Connection header​(String name, String value) Set a request header. Parameters: name - header name value - header value Returns: this Connection, for chaining See Also: Connection.Base.headers()header Connection header​(String name, String value) Set a request header. Parameters: name - header name value - header value Returns: this Connection, for chaining See Also: Connection.Base.headers()headerConnection header​(String name, String value)ConnectionStringStringSet a request header.Parameters: name - header name value - header value Returns: this Connection, for chaining See Also: Connection.Base.headers()Parameters:Parameters:name - header namenamevalue - header valuevalueReturns:Returns:this Connection, for chainingSee Also:See Also:Connection.Base.headers()Connection.Base.headers()Connection.Base.headers()headers Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request. Parameters: headers - map of headers name -> value pairs Returns: this Connection, for chaining See Also: Connection.Base.headers()headers Connection headers​(Map<String,String> headers) Adds each of the supplied headers to the request. Parameters: headers - map of headers name -> value pairs Returns: this Connection, for chaining See Also: Connection.Base.headers()headersConnection headers​(Map<String,String> headers)ConnectionMapStringStringAdds each of the supplied headers to the request.Parameters: headers - map of headers name -> value pairs Returns: this Connection, for chaining See Also: Connection.Base.headers()Parameters:Parameters:headers - map of headers name -> value pairsheadersReturns:Returns:this Connection, for chainingSee Also:See Also:Connection.Base.headers()Connection.Base.headers()Connection.Base.headers()cookie Connection cookie​(String name, String value) Set a cookie to be sent in the request. Parameters: name - name of cookie value - value of cookie Returns: this Connection, for chainingcookie Connection cookie​(String name, String value) Set a cookie to be sent in the request. Parameters: name - name of cookie value - value of cookie Returns: this Connection, for chainingcookieConnection cookie​(String name, String value)ConnectionStringStringSet a cookie to be sent in the request.Parameters: name - name of cookie value - value of cookie Returns: this Connection, for chainingParameters:Parameters:name - name of cookienamevalue - value of cookievalueReturns:Returns:this Connection, for chainingcookies Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request. Parameters: cookies - map of cookie name -> value pairs Returns: this Connection, for chainingcookies Connection cookies​(Map<String,String> cookies) Adds each of the supplied cookies to the request. Parameters: cookies - map of cookie name -> value pairs Returns: this Connection, for chainingcookiesConnection cookies​(Map<String,String> cookies)ConnectionMapStringStringAdds each of the supplied cookies to the request.Parameters: cookies - map of cookie name -> value pairs Returns: this Connection, for chainingParameters:Parameters:cookies - map of cookie name -> value pairscookiesReturns:Returns:this Connection, for chainingparser Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document. If not set, defaults to the HTML parser, unless the response content-type is XML, in which case the XML parser is used. Parameters: parser - alternate parser Returns: this Connection, for chainingparser Connection parser​(Parser parser) Provide an alternate parser to use when parsing the response to a Document. If not set, defaults to the HTML parser, unless the response content-type is XML, in which case the XML parser is used. Parameters: parser - alternate parser Returns: this Connection, for chainingparserConnection parser​(Parser parser)ConnectionParserProvide an alternate parser to use when parsing the response to a Document. If not set, defaults to the HTML parser, unless the response content-type is XML, in which case the XML parser is used.Parameters: parser - alternate parser Returns: this Connection, for chainingParameters:Parameters:parser - alternate parserparserReturns:Returns:this Connection, for chainingpostDataCharset Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post data Parameters: charset - character set to encode post data Returns: this Connection, for chainingpostDataCharset Connection postDataCharset​(String charset) Sets the default post data character set for x-www-form-urlencoded post data Parameters: charset - character set to encode post data Returns: this Connection, for chainingpostDataCharsetConnection postDataCharset​(String charset)ConnectionStringSets the default post data character set for x-www-form-urlencoded post dataParameters: charset - character set to encode post data Returns: this Connection, for chainingParameters:Parameters:charset - character set to encode post datacharsetReturns:Returns:this Connection, for chainingget Document get​() throws IOException Execute the request as a GET, and parse the result. Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on errorget Document get​() throws IOException Execute the request as a GET, and parse the result. Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on errorgetDocument get​() throws IOExceptionDocumentIOExceptionExecute the request as a GET, and parse the result.Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on errorReturns:Returns:parsed DocumentThrows:Throws:MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformedMalformedURLExceptionMalformedURLExceptionHttpStatusException - if the response is not OK and HTTP response errors are not ignoredHttpStatusExceptionHttpStatusExceptionUnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignoredUnsupportedMimeTypeExceptionUnsupportedMimeTypeExceptionSocketTimeoutException - if the connection times outSocketTimeoutExceptionSocketTimeoutExceptionIOException - on errorIOExceptionIOExceptionpost Document post​() throws IOException Execute the request as a POST, and parse the result. Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on errorpost Document post​() throws IOException Execute the request as a POST, and parse the result. Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on errorpostDocument post​() throws IOExceptionDocumentIOExceptionExecute the request as a POST, and parse the result.Returns: parsed Document Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on errorReturns:Returns:parsed DocumentThrows:Throws:MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformedMalformedURLExceptionMalformedURLExceptionHttpStatusException - if the response is not OK and HTTP response errors are not ignoredHttpStatusExceptionHttpStatusExceptionUnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignoredUnsupportedMimeTypeExceptionUnsupportedMimeTypeExceptionSocketTimeoutException - if the connection times outSocketTimeoutExceptionSocketTimeoutExceptionIOException - on errorIOExceptionIOExceptionexecute Connection.Response execute​() throws IOException Execute the request. Returns: a response object Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on errorexecute Connection.Response execute​() throws IOException Execute the request. Returns: a response object Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on errorexecuteConnection.Response execute​() throws IOExceptionConnection.ResponseIOExceptionExecute the request.Returns: a response object Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - on errorReturns:Returns:a response objectThrows:Throws:MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformedMalformedURLExceptionMalformedURLExceptionHttpStatusException - if the response is not OK and HTTP response errors are not ignoredHttpStatusExceptionHttpStatusExceptionUnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignoredUnsupportedMimeTypeExceptionUnsupportedMimeTypeExceptionSocketTimeoutException - if the connection times outSocketTimeoutExceptionSocketTimeoutExceptionIOException - on errorIOExceptionIOExceptionrequest Connection.Request request​() Get the request object associated with this connection Returns: requestrequest Connection.Request request​() Get the request object associated with this connection Returns: requestrequestConnection.Request request​()Connection.RequestGet the request object associated with this connectionReturns: requestReturns:Returns:requestrequest Connection request​(Connection.Request request) Set the connection's request Parameters: request - new request object Returns: this Connection, for chainingrequest Connection request​(Connection.Request request) Set the connection's request Parameters: request - new request object Returns: this Connection, for chainingrequestConnection request​(Connection.Request request)ConnectionConnection.RequestSet the connection's requestParameters: request - new request object Returns: this Connection, for chainingParameters:Parameters:request - new request objectrequestReturns:Returns:this Connection, for chainingresponse Connection.Response response​() Get the response, once the request has been executed Returns: responseresponse Connection.Response response​() Get the response, once the request has been executed Returns: responseresponseConnection.Response response​()Connection.ResponseGet the response, once the request has been executedReturns: responseReturns:Returns:responseresponse Connection response​(Connection.Response response) Set the connection's response Parameters: response - new response Returns: this Connection, for chainingresponse Connection response​(Connection.Response response) Set the connection's response Parameters: response - new response Returns: this Connection, for chainingresponseConnection response​(Connection.Response response)ConnectionConnection.ResponseSet the connection's responseParameters: response - new response Returns: this Connection, for chainingParameters:Parameters:response - new responseresponseReturns:Returns:this Connection, for chainingSkip navigation links Overview Package Class Use Tree Deprecated Index HelpSkip navigation linksSkip navigation linksOverview Package Class Use Tree Deprecated Index HelpOverviewOverviewPackagePackageClassUseUseTreeTreeDeprecatedDeprecatedIndexIndexHelpHelpPrev Class Next Class Frames No Frames All Classes <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodPrev Class Next ClassPrev ClassNext ClassNext ClassNext ClassFrames No FramesFramesFramesNo FramesNo FramesAll ClassesAll ClassesAll Classes<div> JavaScript is disabled on your browser. </div><div> JavaScript is disabled on your browser. </div>Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSummary: Nested | Field | Constr | MethodSummary:Nested |NestedField |Constr |MethodMethodDetail: Field | Constr | MethodDetail:Field |Constr |MethodMethodCopyright © 2009–2017 Jonathan Hedley. All rights reserved.Copyright © 2009–2017 Jonathan Hedley. All rights reserved.Jonathan Hedley