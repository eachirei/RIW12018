<div> JavaScript is disabled on your browser. </div> Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | Method Package org.jsoup.nodes Class Node java.lang.Object org.jsoup.nodes.Node All Implemented Interfaces: Cloneable Direct Known Subclasses: Comment, DataNode, DocumentType, Element, TextNode, XmlDeclaration public abstract class Node extends Object implements Cloneable The base, abstract Node model. Elements, Documents, Comments etc are all Node instances. Author: Jonathan Hedley, jonathan@hedley.net Constructor Summary Constructors Modifier Constructor Description protected Node​() Default constructor. Method Summary All Methods Instance Methods Abstract Methods Concrete Methods Modifier and Type Method Description String absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e. protected void addChildren​(int index, Node... children) protected void addChildren​(Node... children) Node after​(String html) Insert the specified HTML into the DOM after this node (i.e. Node after​(Node node) Insert the specified node into the DOM after this node (i.e. String attr​(String attributeKey) Get an attribute's value by its key. Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value). abstract Attributes attributes​() Get all of the element's attributes. abstract String baseUri​() Get the base URI of this node. Node before​(String html) Insert the specified HTML into the DOM before this node (i.e. Node before​(Node node) Insert the specified node into the DOM before this node (i.e. Node childNode​(int index) Get a child node by its 0-based index. List<Node> childNodes​() Get this node's children. protected Node[] childNodesAsArray​() List<Node> childNodesCopy​() Returns a deep copy of this node's children. abstract int childNodeSize​() Get the number of child nodes that this node holds. Node clearAttributes​() Clear (remove) all of the attributes in this node. Node clone​() Create a stand-alone, deep copy of this node, and all of its children. protected Node doClone​(Node parent) protected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. protected abstract List<Node> ensureChildNodes​() boolean equals​(Object o) Check if this node is the same instance of another (object identity test). Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants. boolean hasAttr​(String attributeKey) Test if this element has an attribute. protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object. boolean hasParent​() boolean hasSameValue​(Object o) Check if this node is has the same content as another node. <T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable. protected void indent​(Appendable accum, int depth, Document.OutputSettings out) Node nextSibling​() Get this node's next sibling. abstract String nodeName​() Get the node name of this node. String outerHtml​() Get the outer HTML of this node. protected void outerHtml​(Appendable accum) Document ownerDocument​() Gets the Document associated with this Node. Node parent​() Gets this node's parent node. Node parentNode​() Gets this node's parent node. Node previousSibling​() Get this node's previous sibling. void remove​() Remove (delete) this node from the DOM tree. Node removeAttr​(String attributeKey) Remove an attribute from this element. protected void removeChild​(Node out) protected void reparentChild​(Node child) protected void replaceChild​(Node out, Node in) void replaceWith​(Node in) Replace this node in the DOM with the supplied node. Node root​() Get this node's root node; that is, its topmost ancestor. void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants. protected void setParentNode​(Node parentNode) protected void setSiblingIndex​(int siblingIndex) Node shallowClone​() Create a stand-alone, shallow copy of this node. int siblingIndex​() Get the list index of this node in its node sibling list. List<Node> siblingNodes​() Retrieves this node's sibling nodes. String toString​() Node traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants. Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent. Node wrap​(String html) Wrap the supplied HTML around this node. Methods inherited from class java.lang.Object finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait Constructor Detail Node protected Node​() Default constructor. Doesn't setup base uri, children, or attributes; use with caution. Method Detail nodeName public abstract String nodeName​() Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). Returns: node name hasAttributes protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object. hasParent public boolean hasParent​() attr public String attr​(String attributeKey) Get an attribute's value by its key. Case insensitive To get an absolute URL from an attribute that may be a relative URL, prefix the key with abs, which is a shortcut to the absUrl(java.lang.String) method. E.g.: String url = a.attr("abs:href"); Parameters: attributeKey - The attribute key. Returns: The attribute, or empty string if not present (to avoid nulls). See Also: attributes(), hasAttr(String), absUrl(String) attributes public abstract Attributes attributes​() Get all of the element's attributes. Returns: attributes (which implements iterable, in same order as presented in original HTML). attr public Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value). If the attribute already exists, it is replaced. The attribute key comparison is case insensitive. Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this (for chaining) hasAttr public boolean hasAttr​(String attributeKey) Test if this element has an attribute. Case insensitive Parameters: attributeKey - The attribute key to check. Returns: true if the attribute exists, false if not. removeAttr public Node removeAttr​(String attributeKey) Remove an attribute from this element. Parameters: attributeKey - The attribute to remove. Returns: this (for chaining) clearAttributes public Node clearAttributes​() Clear (remove) all of the attributes in this node. Returns: this, for chaining baseUri public abstract String baseUri​() Get the base URI of this node. Returns: base URI doSetBaseUri protected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. Parameters: baseUri - new URI setBaseUri public void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants. Parameters: baseUri - base URI to set absUrl public String absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e. an <a href> or <img src>). E.g.: String absUrl = linkEl.absUrl("href"); If the attribute value is already absolute (i.e. it starts with a protocol, like http:// or https:// etc), and it successfully parses as a URL, the attribute is returned directly. Otherwise, it is treated as a URL relative to the element's baseUri(), and made absolute using that. As an alternate, you can use the attr(java.lang.String) method with the abs: prefix, e.g.: String absUrl = linkEl.attr("abs:href"); Parameters: attributeKey - The attribute key Returns: An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or could not be made successfully into a URL. See Also: attr(java.lang.String), URL(java.net.URL, String) ensureChildNodes protected abstract List<Node> ensureChildNodes​() childNode public Node childNode​(int index) Get a child node by its 0-based index. Parameters: index - index of child node Returns: the child node at this index. Throws a IndexOutOfBoundsException if the index is out of bounds. childNodes public List<Node> childNodes​() Get this node's children. Presented as an unmodifiable list: new children can not be added, but the child nodes themselves can be manipulated. Returns: list of children. If no children, returns an empty list. childNodesCopy public List<Node> childNodesCopy​() Returns a deep copy of this node's children. Changes made to these nodes will not be reflected in the original nodes Returns: a deep copy of this node's children childNodeSize public abstract int childNodeSize​() Get the number of child nodes that this node holds. Returns: the number of child nodes that this node holds. childNodesAsArray protected Node[] childNodesAsArray​() parent public Node parent​() Gets this node's parent node. Returns: parent node; or null if no parent. parentNode public final Node parentNode​() Gets this node's parent node. Not overridable by extending classes, so useful if you really just need the Node type. Returns: parent node; or null if no parent. root public Node root​() Get this node's root node; that is, its topmost ancestor. If this node is the top ancestor, returns this. Returns: topmost ancestor. ownerDocument public Document ownerDocument​() Gets the Document associated with this Node. Returns: the Document associated with this Node, or null if there is no such Document. remove public void remove​() Remove (delete) this node from the DOM tree. If this node has children, they are also removed. before public Node before​(String html) Insert the specified HTML into the DOM before this node (i.e. as a preceding sibling). Parameters: html - HTML to add before this node Returns: this node, for chaining See Also: after(String) before public Node before​(Node node) Insert the specified node into the DOM before this node (i.e. as a preceding sibling). Parameters: node - to add before this node Returns: this node, for chaining See Also: after(Node) after public Node after​(String html) Insert the specified HTML into the DOM after this node (i.e. as a following sibling). Parameters: html - HTML to add after this node Returns: this node, for chaining See Also: before(String) after public Node after​(Node node) Insert the specified node into the DOM after this node (i.e. as a following sibling). Parameters: node - to add after this node Returns: this node, for chaining See Also: before(Node) wrap public Node wrap​(String html) Wrap the supplied HTML around this node. Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this node, for chaining. unwrap public Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent. This has the effect of dropping the node but keeping its children. For example, with the input html: <div>One <span>Two <b>Three</b></span></div> Calling element.unwrap() on the span element will result in the html: <div>One Two <b>Three</b></div> and the "Two " TextNode being returned. Returns: the first child of this node, after the node has been unwrapped. Null if the node had no children. See Also: remove(), wrap(String) replaceWith public void replaceWith​(Node in) Replace this node in the DOM with the supplied node. Parameters: in - the node that will will replace the existing node. setParentNode protected void setParentNode​(Node parentNode) replaceChild protected void replaceChild​(Node out, Node in) removeChild protected void removeChild​(Node out) addChildren protected void addChildren​(Node... children) addChildren protected void addChildren​(int index, Node... children) reparentChild protected void reparentChild​(Node child) siblingNodes public List<Node> siblingNodes​() Retrieves this node's sibling nodes. Similar to node.parent.childNodes(), but does not include this node (a node is not a sibling of itself). Returns: node siblings. If the node has no parent, returns an empty list. nextSibling public Node nextSibling​() Get this node's next sibling. Returns: next sibling, or null if this is the last sibling previousSibling public Node previousSibling​() Get this node's previous sibling. Returns: the previous sibling, or null if this is the first sibling siblingIndex public int siblingIndex​() Get the list index of this node in its node sibling list. I.e. if this is the first node sibling, returns 0. Returns: position in node sibling list See Also: Element.elementSiblingIndex() setSiblingIndex protected void setSiblingIndex​(int siblingIndex) traverse public Node traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants. Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this node, for chaining filter public Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants. Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this node, for chaining outerHtml public String outerHtml​() Get the outer HTML of this node. Returns: HTML outerHtml protected void outerHtml​(Appendable accum) html public <T extends Appendable> T html​(T appendable) Write this node and its children to the given Appendable. Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining. toString public String toString​() Overrides: toString in class Object indent protected void indent​(Appendable accum, int depth, Document.OutputSettings out) throws IOException Throws: IOException equals public boolean equals​(Object o) Check if this node is the same instance of another (object identity test). Overrides: equals in class Object Parameters: o - other object to compare to Returns: true if the content of this node is the same as the other See Also: to compare nodes by their value hasSameValue public boolean hasSameValue​(Object o) Check if this node is has the same content as another node. A node is considered the same if its name, attributes and content match the other node; particularly its position in the tree does not influence its similarity. Parameters: o - other object to compare to Returns: true if the content of this node is the same as the other clone public Node clone​() Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using Element.appendChild(Node). Overrides: clone in class Object Returns: a stand-alone cloned node, including clones of any children See Also: shallowClone() shallowClone public Node shallowClone​() Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes. Returns: a single independent copy of this node See Also: clone() doClone protected Node doClone​(Node parent) Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | Method Copyright © 2009–2017 Jonathan Hedley. All rights reserved.<div> JavaScript is disabled on your browser. </div>Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSkip navigation links Overview Package Class Use Tree Deprecated Index HelpSkip navigation linksSkip navigation linksOverview Package Class Use Tree Deprecated Index HelpOverviewOverviewPackagePackageClassUseUseTreeTreeDeprecatedDeprecatedIndexIndexHelpHelpPrev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodPrev Class Next ClassPrev ClassPrev ClassPrev ClassNext ClassNext ClassNext ClassFrames No FramesFramesFramesNo FramesNo FramesAll ClassesAll ClassesAll ClassesSEARCH:SEARCH:SEARCH:<div> JavaScript is disabled on your browser. </div><div> JavaScript is disabled on your browser. </div>Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSummary: Nested | Field | Constr | MethodSummary:Nested |Field |Constr |ConstrMethodMethodDetail: Field | Constr | MethodDetail:Field |Constr |ConstrMethodMethodPackage org.jsoup.nodes Class NodePackage org.jsoup.nodesPackageorg.jsoup.nodesClass Nodejava.lang.Object org.jsoup.nodes.Node All Implemented Interfaces: Cloneable Direct Known Subclasses: Comment, DataNode, DocumentType, Element, TextNode, XmlDeclaration public abstract class Node extends Object implements Cloneable The base, abstract Node model. Elements, Documents, Comments etc are all Node instances. Author: Jonathan Hedley, jonathan@hedley.net Constructor Summary Constructors Modifier Constructor Description protected Node​() Default constructor. Method Summary All Methods Instance Methods Abstract Methods Concrete Methods Modifier and Type Method Description String absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e. protected void addChildren​(int index, Node... children) protected void addChildren​(Node... children) Node after​(String html) Insert the specified HTML into the DOM after this node (i.e. Node after​(Node node) Insert the specified node into the DOM after this node (i.e. String attr​(String attributeKey) Get an attribute's value by its key. Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value). abstract Attributes attributes​() Get all of the element's attributes. abstract String baseUri​() Get the base URI of this node. Node before​(String html) Insert the specified HTML into the DOM before this node (i.e. Node before​(Node node) Insert the specified node into the DOM before this node (i.e. Node childNode​(int index) Get a child node by its 0-based index. List<Node> childNodes​() Get this node's children. protected Node[] childNodesAsArray​() List<Node> childNodesCopy​() Returns a deep copy of this node's children. abstract int childNodeSize​() Get the number of child nodes that this node holds. Node clearAttributes​() Clear (remove) all of the attributes in this node. Node clone​() Create a stand-alone, deep copy of this node, and all of its children. protected Node doClone​(Node parent) protected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. protected abstract List<Node> ensureChildNodes​() boolean equals​(Object o) Check if this node is the same instance of another (object identity test). Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants. boolean hasAttr​(String attributeKey) Test if this element has an attribute. protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object. boolean hasParent​() boolean hasSameValue​(Object o) Check if this node is has the same content as another node. <T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable. protected void indent​(Appendable accum, int depth, Document.OutputSettings out) Node nextSibling​() Get this node's next sibling. abstract String nodeName​() Get the node name of this node. String outerHtml​() Get the outer HTML of this node. protected void outerHtml​(Appendable accum) Document ownerDocument​() Gets the Document associated with this Node. Node parent​() Gets this node's parent node. Node parentNode​() Gets this node's parent node. Node previousSibling​() Get this node's previous sibling. void remove​() Remove (delete) this node from the DOM tree. Node removeAttr​(String attributeKey) Remove an attribute from this element. protected void removeChild​(Node out) protected void reparentChild​(Node child) protected void replaceChild​(Node out, Node in) void replaceWith​(Node in) Replace this node in the DOM with the supplied node. Node root​() Get this node's root node; that is, its topmost ancestor. void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants. protected void setParentNode​(Node parentNode) protected void setSiblingIndex​(int siblingIndex) Node shallowClone​() Create a stand-alone, shallow copy of this node. int siblingIndex​() Get the list index of this node in its node sibling list. List<Node> siblingNodes​() Retrieves this node's sibling nodes. String toString​() Node traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants. Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent. Node wrap​(String html) Wrap the supplied HTML around this node. Methods inherited from class java.lang.Object finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait Constructor Detail Node protected Node​() Default constructor. Doesn't setup base uri, children, or attributes; use with caution. Method Detail nodeName public abstract String nodeName​() Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). Returns: node name hasAttributes protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object. hasParent public boolean hasParent​() attr public String attr​(String attributeKey) Get an attribute's value by its key. Case insensitive To get an absolute URL from an attribute that may be a relative URL, prefix the key with abs, which is a shortcut to the absUrl(java.lang.String) method. E.g.: String url = a.attr("abs:href"); Parameters: attributeKey - The attribute key. Returns: The attribute, or empty string if not present (to avoid nulls). See Also: attributes(), hasAttr(String), absUrl(String) attributes public abstract Attributes attributes​() Get all of the element's attributes. Returns: attributes (which implements iterable, in same order as presented in original HTML). attr public Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value). If the attribute already exists, it is replaced. The attribute key comparison is case insensitive. Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this (for chaining) hasAttr public boolean hasAttr​(String attributeKey) Test if this element has an attribute. Case insensitive Parameters: attributeKey - The attribute key to check. Returns: true if the attribute exists, false if not. removeAttr public Node removeAttr​(String attributeKey) Remove an attribute from this element. Parameters: attributeKey - The attribute to remove. Returns: this (for chaining) clearAttributes public Node clearAttributes​() Clear (remove) all of the attributes in this node. Returns: this, for chaining baseUri public abstract String baseUri​() Get the base URI of this node. Returns: base URI doSetBaseUri protected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. Parameters: baseUri - new URI setBaseUri public void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants. Parameters: baseUri - base URI to set absUrl public String absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e. an <a href> or <img src>). E.g.: String absUrl = linkEl.absUrl("href"); If the attribute value is already absolute (i.e. it starts with a protocol, like http:// or https:// etc), and it successfully parses as a URL, the attribute is returned directly. Otherwise, it is treated as a URL relative to the element's baseUri(), and made absolute using that. As an alternate, you can use the attr(java.lang.String) method with the abs: prefix, e.g.: String absUrl = linkEl.attr("abs:href"); Parameters: attributeKey - The attribute key Returns: An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or could not be made successfully into a URL. See Also: attr(java.lang.String), URL(java.net.URL, String) ensureChildNodes protected abstract List<Node> ensureChildNodes​() childNode public Node childNode​(int index) Get a child node by its 0-based index. Parameters: index - index of child node Returns: the child node at this index. Throws a IndexOutOfBoundsException if the index is out of bounds. childNodes public List<Node> childNodes​() Get this node's children. Presented as an unmodifiable list: new children can not be added, but the child nodes themselves can be manipulated. Returns: list of children. If no children, returns an empty list. childNodesCopy public List<Node> childNodesCopy​() Returns a deep copy of this node's children. Changes made to these nodes will not be reflected in the original nodes Returns: a deep copy of this node's children childNodeSize public abstract int childNodeSize​() Get the number of child nodes that this node holds. Returns: the number of child nodes that this node holds. childNodesAsArray protected Node[] childNodesAsArray​() parent public Node parent​() Gets this node's parent node. Returns: parent node; or null if no parent. parentNode public final Node parentNode​() Gets this node's parent node. Not overridable by extending classes, so useful if you really just need the Node type. Returns: parent node; or null if no parent. root public Node root​() Get this node's root node; that is, its topmost ancestor. If this node is the top ancestor, returns this. Returns: topmost ancestor. ownerDocument public Document ownerDocument​() Gets the Document associated with this Node. Returns: the Document associated with this Node, or null if there is no such Document. remove public void remove​() Remove (delete) this node from the DOM tree. If this node has children, they are also removed. before public Node before​(String html) Insert the specified HTML into the DOM before this node (i.e. as a preceding sibling). Parameters: html - HTML to add before this node Returns: this node, for chaining See Also: after(String) before public Node before​(Node node) Insert the specified node into the DOM before this node (i.e. as a preceding sibling). Parameters: node - to add before this node Returns: this node, for chaining See Also: after(Node) after public Node after​(String html) Insert the specified HTML into the DOM after this node (i.e. as a following sibling). Parameters: html - HTML to add after this node Returns: this node, for chaining See Also: before(String) after public Node after​(Node node) Insert the specified node into the DOM after this node (i.e. as a following sibling). Parameters: node - to add after this node Returns: this node, for chaining See Also: before(Node) wrap public Node wrap​(String html) Wrap the supplied HTML around this node. Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this node, for chaining. unwrap public Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent. This has the effect of dropping the node but keeping its children. For example, with the input html: <div>One <span>Two <b>Three</b></span></div> Calling element.unwrap() on the span element will result in the html: <div>One Two <b>Three</b></div> and the "Two " TextNode being returned. Returns: the first child of this node, after the node has been unwrapped. Null if the node had no children. See Also: remove(), wrap(String) replaceWith public void replaceWith​(Node in) Replace this node in the DOM with the supplied node. Parameters: in - the node that will will replace the existing node. setParentNode protected void setParentNode​(Node parentNode) replaceChild protected void replaceChild​(Node out, Node in) removeChild protected void removeChild​(Node out) addChildren protected void addChildren​(Node... children) addChildren protected void addChildren​(int index, Node... children) reparentChild protected void reparentChild​(Node child) siblingNodes public List<Node> siblingNodes​() Retrieves this node's sibling nodes. Similar to node.parent.childNodes(), but does not include this node (a node is not a sibling of itself). Returns: node siblings. If the node has no parent, returns an empty list. nextSibling public Node nextSibling​() Get this node's next sibling. Returns: next sibling, or null if this is the last sibling previousSibling public Node previousSibling​() Get this node's previous sibling. Returns: the previous sibling, or null if this is the first sibling siblingIndex public int siblingIndex​() Get the list index of this node in its node sibling list. I.e. if this is the first node sibling, returns 0. Returns: position in node sibling list See Also: Element.elementSiblingIndex() setSiblingIndex protected void setSiblingIndex​(int siblingIndex) traverse public Node traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants. Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this node, for chaining filter public Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants. Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this node, for chaining outerHtml public String outerHtml​() Get the outer HTML of this node. Returns: HTML outerHtml protected void outerHtml​(Appendable accum) html public <T extends Appendable> T html​(T appendable) Write this node and its children to the given Appendable. Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining. toString public String toString​() Overrides: toString in class Object indent protected void indent​(Appendable accum, int depth, Document.OutputSettings out) throws IOException Throws: IOException equals public boolean equals​(Object o) Check if this node is the same instance of another (object identity test). Overrides: equals in class Object Parameters: o - other object to compare to Returns: true if the content of this node is the same as the other See Also: to compare nodes by their value hasSameValue public boolean hasSameValue​(Object o) Check if this node is has the same content as another node. A node is considered the same if its name, attributes and content match the other node; particularly its position in the tree does not influence its similarity. Parameters: o - other object to compare to Returns: true if the content of this node is the same as the other clone public Node clone​() Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using Element.appendChild(Node). Overrides: clone in class Object Returns: a stand-alone cloned node, including clones of any children See Also: shallowClone() shallowClone public Node shallowClone​() Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes. Returns: a single independent copy of this node See Also: clone() doClone protected Node doClone​(Node parent)java.lang.Object org.jsoup.nodes.Nodejava.lang.Objectjava.lang.Objectorg.jsoup.nodes.Nodeorg.jsoup.nodes.Nodeorg.jsoup.nodes.NodeAll Implemented Interfaces: Cloneable Direct Known Subclasses: Comment, DataNode, DocumentType, Element, TextNode, XmlDeclaration public abstract class Node extends Object implements Cloneable The base, abstract Node model. Elements, Documents, Comments etc are all Node instances. Author: Jonathan Hedley, jonathan@hedley.netAll Implemented Interfaces: Cloneable Direct Known Subclasses: Comment, DataNode, DocumentType, Element, TextNode, XmlDeclaration public abstract class Node extends Object implements Cloneable The base, abstract Node model. Elements, Documents, Comments etc are all Node instances. Author: Jonathan Hedley, jonathan@hedley.netAll Implemented Interfaces: Cloneable Direct Known Subclasses: Comment, DataNode, DocumentType, Element, TextNode, XmlDeclaration public abstract class Node extends Object implements Cloneable The base, abstract Node model. Elements, Documents, Comments etc are all Node instances. Author: Jonathan Hedley, jonathan@hedley.netAll Implemented Interfaces: CloneableAll Implemented Interfaces:CloneableCloneableCloneableDirect Known Subclasses: Comment, DataNode, DocumentType, Element, TextNode, XmlDeclarationDirect Known Subclasses:Comment, DataNode, DocumentType, Element, TextNode, XmlDeclarationCommentCommentDataNodeDataNodeDocumentTypeDocumentTypeElementElementTextNodeTextNodeXmlDeclarationXmlDeclarationpublic abstract class Node extends Object implements CloneableNodeObjectCloneableThe base, abstract Node model. Elements, Documents, Comments etc are all Node instances.Author: Jonathan Hedley, jonathan@hedley.netAuthor:Author:Jonathan Hedley, jonathan@hedley.netConstructor Summary Constructors Modifier Constructor Description protected Node​() Default constructor. Method Summary All Methods Instance Methods Abstract Methods Concrete Methods Modifier and Type Method Description String absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e. protected void addChildren​(int index, Node... children) protected void addChildren​(Node... children) Node after​(String html) Insert the specified HTML into the DOM after this node (i.e. Node after​(Node node) Insert the specified node into the DOM after this node (i.e. String attr​(String attributeKey) Get an attribute's value by its key. Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value). abstract Attributes attributes​() Get all of the element's attributes. abstract String baseUri​() Get the base URI of this node. Node before​(String html) Insert the specified HTML into the DOM before this node (i.e. Node before​(Node node) Insert the specified node into the DOM before this node (i.e. Node childNode​(int index) Get a child node by its 0-based index. List<Node> childNodes​() Get this node's children. protected Node[] childNodesAsArray​() List<Node> childNodesCopy​() Returns a deep copy of this node's children. abstract int childNodeSize​() Get the number of child nodes that this node holds. Node clearAttributes​() Clear (remove) all of the attributes in this node. Node clone​() Create a stand-alone, deep copy of this node, and all of its children. protected Node doClone​(Node parent) protected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. protected abstract List<Node> ensureChildNodes​() boolean equals​(Object o) Check if this node is the same instance of another (object identity test). Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants. boolean hasAttr​(String attributeKey) Test if this element has an attribute. protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object. boolean hasParent​() boolean hasSameValue​(Object o) Check if this node is has the same content as another node. <T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable. protected void indent​(Appendable accum, int depth, Document.OutputSettings out) Node nextSibling​() Get this node's next sibling. abstract String nodeName​() Get the node name of this node. String outerHtml​() Get the outer HTML of this node. protected void outerHtml​(Appendable accum) Document ownerDocument​() Gets the Document associated with this Node. Node parent​() Gets this node's parent node. Node parentNode​() Gets this node's parent node. Node previousSibling​() Get this node's previous sibling. void remove​() Remove (delete) this node from the DOM tree. Node removeAttr​(String attributeKey) Remove an attribute from this element. protected void removeChild​(Node out) protected void reparentChild​(Node child) protected void replaceChild​(Node out, Node in) void replaceWith​(Node in) Replace this node in the DOM with the supplied node. Node root​() Get this node's root node; that is, its topmost ancestor. void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants. protected void setParentNode​(Node parentNode) protected void setSiblingIndex​(int siblingIndex) Node shallowClone​() Create a stand-alone, shallow copy of this node. int siblingIndex​() Get the list index of this node in its node sibling list. List<Node> siblingNodes​() Retrieves this node's sibling nodes. String toString​() Node traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants. Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent. Node wrap​(String html) Wrap the supplied HTML around this node. Methods inherited from class java.lang.Object finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitConstructor Summary Constructors Modifier Constructor Description protected Node​() Default constructor. Method Summary All Methods Instance Methods Abstract Methods Concrete Methods Modifier and Type Method Description String absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e. protected void addChildren​(int index, Node... children) protected void addChildren​(Node... children) Node after​(String html) Insert the specified HTML into the DOM after this node (i.e. Node after​(Node node) Insert the specified node into the DOM after this node (i.e. String attr​(String attributeKey) Get an attribute's value by its key. Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value). abstract Attributes attributes​() Get all of the element's attributes. abstract String baseUri​() Get the base URI of this node. Node before​(String html) Insert the specified HTML into the DOM before this node (i.e. Node before​(Node node) Insert the specified node into the DOM before this node (i.e. Node childNode​(int index) Get a child node by its 0-based index. List<Node> childNodes​() Get this node's children. protected Node[] childNodesAsArray​() List<Node> childNodesCopy​() Returns a deep copy of this node's children. abstract int childNodeSize​() Get the number of child nodes that this node holds. Node clearAttributes​() Clear (remove) all of the attributes in this node. Node clone​() Create a stand-alone, deep copy of this node, and all of its children. protected Node doClone​(Node parent) protected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. protected abstract List<Node> ensureChildNodes​() boolean equals​(Object o) Check if this node is the same instance of another (object identity test). Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants. boolean hasAttr​(String attributeKey) Test if this element has an attribute. protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object. boolean hasParent​() boolean hasSameValue​(Object o) Check if this node is has the same content as another node. <T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable. protected void indent​(Appendable accum, int depth, Document.OutputSettings out) Node nextSibling​() Get this node's next sibling. abstract String nodeName​() Get the node name of this node. String outerHtml​() Get the outer HTML of this node. protected void outerHtml​(Appendable accum) Document ownerDocument​() Gets the Document associated with this Node. Node parent​() Gets this node's parent node. Node parentNode​() Gets this node's parent node. Node previousSibling​() Get this node's previous sibling. void remove​() Remove (delete) this node from the DOM tree. Node removeAttr​(String attributeKey) Remove an attribute from this element. protected void removeChild​(Node out) protected void reparentChild​(Node child) protected void replaceChild​(Node out, Node in) void replaceWith​(Node in) Replace this node in the DOM with the supplied node. Node root​() Get this node's root node; that is, its topmost ancestor. void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants. protected void setParentNode​(Node parentNode) protected void setSiblingIndex​(int siblingIndex) Node shallowClone​() Create a stand-alone, shallow copy of this node. int siblingIndex​() Get the list index of this node in its node sibling list. List<Node> siblingNodes​() Retrieves this node's sibling nodes. String toString​() Node traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants. Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent. Node wrap​(String html) Wrap the supplied HTML around this node. Methods inherited from class java.lang.Object finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitConstructor Summary Constructors Modifier Constructor Description protected Node​() Default constructor. Method Summary All Methods Instance Methods Abstract Methods Concrete Methods Modifier and Type Method Description String absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e. protected void addChildren​(int index, Node... children) protected void addChildren​(Node... children) Node after​(String html) Insert the specified HTML into the DOM after this node (i.e. Node after​(Node node) Insert the specified node into the DOM after this node (i.e. String attr​(String attributeKey) Get an attribute's value by its key. Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value). abstract Attributes attributes​() Get all of the element's attributes. abstract String baseUri​() Get the base URI of this node. Node before​(String html) Insert the specified HTML into the DOM before this node (i.e. Node before​(Node node) Insert the specified node into the DOM before this node (i.e. Node childNode​(int index) Get a child node by its 0-based index. List<Node> childNodes​() Get this node's children. protected Node[] childNodesAsArray​() List<Node> childNodesCopy​() Returns a deep copy of this node's children. abstract int childNodeSize​() Get the number of child nodes that this node holds. Node clearAttributes​() Clear (remove) all of the attributes in this node. Node clone​() Create a stand-alone, deep copy of this node, and all of its children. protected Node doClone​(Node parent) protected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. protected abstract List<Node> ensureChildNodes​() boolean equals​(Object o) Check if this node is the same instance of another (object identity test). Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants. boolean hasAttr​(String attributeKey) Test if this element has an attribute. protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object. boolean hasParent​() boolean hasSameValue​(Object o) Check if this node is has the same content as another node. <T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable. protected void indent​(Appendable accum, int depth, Document.OutputSettings out) Node nextSibling​() Get this node's next sibling. abstract String nodeName​() Get the node name of this node. String outerHtml​() Get the outer HTML of this node. protected void outerHtml​(Appendable accum) Document ownerDocument​() Gets the Document associated with this Node. Node parent​() Gets this node's parent node. Node parentNode​() Gets this node's parent node. Node previousSibling​() Get this node's previous sibling. void remove​() Remove (delete) this node from the DOM tree. Node removeAttr​(String attributeKey) Remove an attribute from this element. protected void removeChild​(Node out) protected void reparentChild​(Node child) protected void replaceChild​(Node out, Node in) void replaceWith​(Node in) Replace this node in the DOM with the supplied node. Node root​() Get this node's root node; that is, its topmost ancestor. void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants. protected void setParentNode​(Node parentNode) protected void setSiblingIndex​(int siblingIndex) Node shallowClone​() Create a stand-alone, shallow copy of this node. int siblingIndex​() Get the list index of this node in its node sibling list. List<Node> siblingNodes​() Retrieves this node's sibling nodes. String toString​() Node traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants. Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent. Node wrap​(String html) Wrap the supplied HTML around this node. Methods inherited from class java.lang.Object finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitConstructor Summary Constructors Modifier Constructor Description protected Node​() Default constructor.Constructor Summary Constructors Modifier Constructor Description protected Node​() Default constructor.Constructor SummaryConstructors Modifier Constructor Description protected Node​() Default constructor.ConstructorsConstructorsModifier Constructor Description protected Node​() Default constructor.Modifier Constructor DescriptionModifierConstructorDescriptionprotected Node​() Default constructor.protectedprotectedNode​()Node​()NodeNodeDefault constructor.Default constructor.Method Summary All Methods Instance Methods Abstract Methods Concrete Methods Modifier and Type Method Description String absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e. protected void addChildren​(int index, Node... children) protected void addChildren​(Node... children) Node after​(String html) Insert the specified HTML into the DOM after this node (i.e. Node after​(Node node) Insert the specified node into the DOM after this node (i.e. String attr​(String attributeKey) Get an attribute's value by its key. Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value). abstract Attributes attributes​() Get all of the element's attributes. abstract String baseUri​() Get the base URI of this node. Node before​(String html) Insert the specified HTML into the DOM before this node (i.e. Node before​(Node node) Insert the specified node into the DOM before this node (i.e. Node childNode​(int index) Get a child node by its 0-based index. List<Node> childNodes​() Get this node's children. protected Node[] childNodesAsArray​() List<Node> childNodesCopy​() Returns a deep copy of this node's children. abstract int childNodeSize​() Get the number of child nodes that this node holds. Node clearAttributes​() Clear (remove) all of the attributes in this node. Node clone​() Create a stand-alone, deep copy of this node, and all of its children. protected Node doClone​(Node parent) protected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. protected abstract List<Node> ensureChildNodes​() boolean equals​(Object o) Check if this node is the same instance of another (object identity test). Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants. boolean hasAttr​(String attributeKey) Test if this element has an attribute. protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object. boolean hasParent​() boolean hasSameValue​(Object o) Check if this node is has the same content as another node. <T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable. protected void indent​(Appendable accum, int depth, Document.OutputSettings out) Node nextSibling​() Get this node's next sibling. abstract String nodeName​() Get the node name of this node. String outerHtml​() Get the outer HTML of this node. protected void outerHtml​(Appendable accum) Document ownerDocument​() Gets the Document associated with this Node. Node parent​() Gets this node's parent node. Node parentNode​() Gets this node's parent node. Node previousSibling​() Get this node's previous sibling. void remove​() Remove (delete) this node from the DOM tree. Node removeAttr​(String attributeKey) Remove an attribute from this element. protected void removeChild​(Node out) protected void reparentChild​(Node child) protected void replaceChild​(Node out, Node in) void replaceWith​(Node in) Replace this node in the DOM with the supplied node. Node root​() Get this node's root node; that is, its topmost ancestor. void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants. protected void setParentNode​(Node parentNode) protected void setSiblingIndex​(int siblingIndex) Node shallowClone​() Create a stand-alone, shallow copy of this node. int siblingIndex​() Get the list index of this node in its node sibling list. List<Node> siblingNodes​() Retrieves this node's sibling nodes. String toString​() Node traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants. Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent. Node wrap​(String html) Wrap the supplied HTML around this node. Methods inherited from class java.lang.Object finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitMethod Summary All Methods Instance Methods Abstract Methods Concrete Methods Modifier and Type Method Description String absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e. protected void addChildren​(int index, Node... children) protected void addChildren​(Node... children) Node after​(String html) Insert the specified HTML into the DOM after this node (i.e. Node after​(Node node) Insert the specified node into the DOM after this node (i.e. String attr​(String attributeKey) Get an attribute's value by its key. Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value). abstract Attributes attributes​() Get all of the element's attributes. abstract String baseUri​() Get the base URI of this node. Node before​(String html) Insert the specified HTML into the DOM before this node (i.e. Node before​(Node node) Insert the specified node into the DOM before this node (i.e. Node childNode​(int index) Get a child node by its 0-based index. List<Node> childNodes​() Get this node's children. protected Node[] childNodesAsArray​() List<Node> childNodesCopy​() Returns a deep copy of this node's children. abstract int childNodeSize​() Get the number of child nodes that this node holds. Node clearAttributes​() Clear (remove) all of the attributes in this node. Node clone​() Create a stand-alone, deep copy of this node, and all of its children. protected Node doClone​(Node parent) protected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. protected abstract List<Node> ensureChildNodes​() boolean equals​(Object o) Check if this node is the same instance of another (object identity test). Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants. boolean hasAttr​(String attributeKey) Test if this element has an attribute. protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object. boolean hasParent​() boolean hasSameValue​(Object o) Check if this node is has the same content as another node. <T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable. protected void indent​(Appendable accum, int depth, Document.OutputSettings out) Node nextSibling​() Get this node's next sibling. abstract String nodeName​() Get the node name of this node. String outerHtml​() Get the outer HTML of this node. protected void outerHtml​(Appendable accum) Document ownerDocument​() Gets the Document associated with this Node. Node parent​() Gets this node's parent node. Node parentNode​() Gets this node's parent node. Node previousSibling​() Get this node's previous sibling. void remove​() Remove (delete) this node from the DOM tree. Node removeAttr​(String attributeKey) Remove an attribute from this element. protected void removeChild​(Node out) protected void reparentChild​(Node child) protected void replaceChild​(Node out, Node in) void replaceWith​(Node in) Replace this node in the DOM with the supplied node. Node root​() Get this node's root node; that is, its topmost ancestor. void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants. protected void setParentNode​(Node parentNode) protected void setSiblingIndex​(int siblingIndex) Node shallowClone​() Create a stand-alone, shallow copy of this node. int siblingIndex​() Get the list index of this node in its node sibling list. List<Node> siblingNodes​() Retrieves this node's sibling nodes. String toString​() Node traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants. Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent. Node wrap​(String html) Wrap the supplied HTML around this node. Methods inherited from class java.lang.Object finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitMethod SummaryAll Methods Instance Methods Abstract Methods Concrete Methods Modifier and Type Method Description String absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e. protected void addChildren​(int index, Node... children) protected void addChildren​(Node... children) Node after​(String html) Insert the specified HTML into the DOM after this node (i.e. Node after​(Node node) Insert the specified node into the DOM after this node (i.e. String attr​(String attributeKey) Get an attribute's value by its key. Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value). abstract Attributes attributes​() Get all of the element's attributes. abstract String baseUri​() Get the base URI of this node. Node before​(String html) Insert the specified HTML into the DOM before this node (i.e. Node before​(Node node) Insert the specified node into the DOM before this node (i.e. Node childNode​(int index) Get a child node by its 0-based index. List<Node> childNodes​() Get this node's children. protected Node[] childNodesAsArray​() List<Node> childNodesCopy​() Returns a deep copy of this node's children. abstract int childNodeSize​() Get the number of child nodes that this node holds. Node clearAttributes​() Clear (remove) all of the attributes in this node. Node clone​() Create a stand-alone, deep copy of this node, and all of its children. protected Node doClone​(Node parent) protected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. protected abstract List<Node> ensureChildNodes​() boolean equals​(Object o) Check if this node is the same instance of another (object identity test). Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants. boolean hasAttr​(String attributeKey) Test if this element has an attribute. protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object. boolean hasParent​() boolean hasSameValue​(Object o) Check if this node is has the same content as another node. <T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable. protected void indent​(Appendable accum, int depth, Document.OutputSettings out) Node nextSibling​() Get this node's next sibling. abstract String nodeName​() Get the node name of this node. String outerHtml​() Get the outer HTML of this node. protected void outerHtml​(Appendable accum) Document ownerDocument​() Gets the Document associated with this Node. Node parent​() Gets this node's parent node. Node parentNode​() Gets this node's parent node. Node previousSibling​() Get this node's previous sibling. void remove​() Remove (delete) this node from the DOM tree. Node removeAttr​(String attributeKey) Remove an attribute from this element. protected void removeChild​(Node out) protected void reparentChild​(Node child) protected void replaceChild​(Node out, Node in) void replaceWith​(Node in) Replace this node in the DOM with the supplied node. Node root​() Get this node's root node; that is, its topmost ancestor. void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants. protected void setParentNode​(Node parentNode) protected void setSiblingIndex​(int siblingIndex) Node shallowClone​() Create a stand-alone, shallow copy of this node. int siblingIndex​() Get the list index of this node in its node sibling list. List<Node> siblingNodes​() Retrieves this node's sibling nodes. String toString​() Node traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants. Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent. Node wrap​(String html) Wrap the supplied HTML around this node.All Methods Instance Methods Abstract Methods Concrete MethodsAll MethodsAll MethodsInstance MethodsInstance MethodsInstance MethodsAbstract MethodsAbstract MethodsAbstract MethodsConcrete MethodsConcrete MethodsConcrete MethodsModifier and Type Method Description String absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e. protected void addChildren​(int index, Node... children) protected void addChildren​(Node... children) Node after​(String html) Insert the specified HTML into the DOM after this node (i.e. Node after​(Node node) Insert the specified node into the DOM after this node (i.e. String attr​(String attributeKey) Get an attribute's value by its key. Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value). abstract Attributes attributes​() Get all of the element's attributes. abstract String baseUri​() Get the base URI of this node. Node before​(String html) Insert the specified HTML into the DOM before this node (i.e. Node before​(Node node) Insert the specified node into the DOM before this node (i.e. Node childNode​(int index) Get a child node by its 0-based index. List<Node> childNodes​() Get this node's children. protected Node[] childNodesAsArray​() List<Node> childNodesCopy​() Returns a deep copy of this node's children. abstract int childNodeSize​() Get the number of child nodes that this node holds. Node clearAttributes​() Clear (remove) all of the attributes in this node. Node clone​() Create a stand-alone, deep copy of this node, and all of its children. protected Node doClone​(Node parent) protected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. protected abstract List<Node> ensureChildNodes​() boolean equals​(Object o) Check if this node is the same instance of another (object identity test). Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants. boolean hasAttr​(String attributeKey) Test if this element has an attribute. protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object. boolean hasParent​() boolean hasSameValue​(Object o) Check if this node is has the same content as another node. <T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable. protected void indent​(Appendable accum, int depth, Document.OutputSettings out) Node nextSibling​() Get this node's next sibling. abstract String nodeName​() Get the node name of this node. String outerHtml​() Get the outer HTML of this node. protected void outerHtml​(Appendable accum) Document ownerDocument​() Gets the Document associated with this Node. Node parent​() Gets this node's parent node. Node parentNode​() Gets this node's parent node. Node previousSibling​() Get this node's previous sibling. void remove​() Remove (delete) this node from the DOM tree. Node removeAttr​(String attributeKey) Remove an attribute from this element. protected void removeChild​(Node out) protected void reparentChild​(Node child) protected void replaceChild​(Node out, Node in) void replaceWith​(Node in) Replace this node in the DOM with the supplied node. Node root​() Get this node's root node; that is, its topmost ancestor. void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants. protected void setParentNode​(Node parentNode) protected void setSiblingIndex​(int siblingIndex) Node shallowClone​() Create a stand-alone, shallow copy of this node. int siblingIndex​() Get the list index of this node in its node sibling list. List<Node> siblingNodes​() Retrieves this node's sibling nodes. String toString​() Node traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants. Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent. Node wrap​(String html) Wrap the supplied HTML around this node.Modifier and Type Method DescriptionModifier and TypeMethodDescriptionString absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e.StringStringStringabsUrl​(String attributeKey)absUrl​(String attributeKey)absUrlabsUrlStringGet an absolute URL from a URL attribute that may be relative (i.e.Get an absolute URL from a URL attribute that may be relative (i.e.protected void addChildren​(int index, Node... children)protected voidprotected voidaddChildren​(int index, Node... children)addChildren​(int index, Node... children)addChildrenaddChildrenNodeprotected void addChildren​(Node... children)protected voidprotected voidaddChildren​(Node... children)addChildren​(Node... children)addChildrenaddChildrenNodeNode after​(String html) Insert the specified HTML into the DOM after this node (i.e.NodeNodeNodeafter​(String html)after​(String html)afterafterStringInsert the specified HTML into the DOM after this node (i.e.Insert the specified HTML into the DOM after this node (i.e.Node after​(Node node) Insert the specified node into the DOM after this node (i.e.NodeNodeNodeafter​(Node node)after​(Node node)afterafterNodeInsert the specified node into the DOM after this node (i.e.Insert the specified node into the DOM after this node (i.e.String attr​(String attributeKey) Get an attribute's value by its key.StringStringStringattr​(String attributeKey)attr​(String attributeKey)attrattrStringGet an attribute's value by its key.Get an attribute's value by its key.Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value).NodeNodeNodeattr​(String attributeKey, String attributeValue)attr​(String attributeKey, String attributeValue)attrattrStringStringSet an attribute (key=value).Set an attribute (key=value).abstract Attributes attributes​() Get all of the element's attributes.abstract Attributesabstract AttributesAttributesattributes​()attributes​()attributesattributesGet all of the element's attributes.Get all of the element's attributes.abstract String baseUri​() Get the base URI of this node.abstract Stringabstract StringStringbaseUri​()baseUri​()baseUribaseUriGet the base URI of this node.Get the base URI of this node.Node before​(String html) Insert the specified HTML into the DOM before this node (i.e.NodeNodeNodebefore​(String html)before​(String html)beforebeforeStringInsert the specified HTML into the DOM before this node (i.e.Insert the specified HTML into the DOM before this node (i.e.Node before​(Node node) Insert the specified node into the DOM before this node (i.e.NodeNodeNodebefore​(Node node)before​(Node node)beforebeforeNodeInsert the specified node into the DOM before this node (i.e.Insert the specified node into the DOM before this node (i.e.Node childNode​(int index) Get a child node by its 0-based index.NodeNodeNodechildNode​(int index)childNode​(int index)childNodechildNodeGet a child node by its 0-based index.Get a child node by its 0-based index.List<Node> childNodes​() Get this node's children.List<Node>List<Node>ListNodechildNodes​()childNodes​()childNodeschildNodesGet this node's children.Get this node's children.protected Node[] childNodesAsArray​()protected Node[]protected Node[]NodechildNodesAsArray​()childNodesAsArray​()childNodesAsArraychildNodesAsArrayList<Node> childNodesCopy​() Returns a deep copy of this node's children.List<Node>List<Node>ListNodechildNodesCopy​()childNodesCopy​()childNodesCopychildNodesCopyReturns a deep copy of this node's children.Returns a deep copy of this node's children.abstract int childNodeSize​() Get the number of child nodes that this node holds.abstract intabstract intchildNodeSize​()childNodeSize​()childNodeSizechildNodeSizeGet the number of child nodes that this node holds.Get the number of child nodes that this node holds.Node clearAttributes​() Clear (remove) all of the attributes in this node.NodeNodeNodeclearAttributes​()clearAttributes​()clearAttributesclearAttributesClear (remove) all of the attributes in this node.Clear (remove) all of the attributes in this node.Node clone​() Create a stand-alone, deep copy of this node, and all of its children.NodeNodeNodeclone​()clone​()clonecloneCreate a stand-alone, deep copy of this node, and all of its children.Create a stand-alone, deep copy of this node, and all of its children.protected Node doClone​(Node parent)protected Nodeprotected NodeNodedoClone​(Node parent)doClone​(Node parent)doClonedoCloneNodeprotected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs.protected abstract voidprotected abstract voiddoSetBaseUri​(String baseUri)doSetBaseUri​(String baseUri)doSetBaseUridoSetBaseUriStringSet the baseUri for just this node (not its descendants), if this Node tracks base URIs.Set the baseUri for just this node (not its descendants), if this Node tracks base URIs.protected abstract List<Node> ensureChildNodes​()protected abstract List<Node>protected abstract List<Node>ListNodeensureChildNodes​()ensureChildNodes​()ensureChildNodesensureChildNodesboolean equals​(Object o) Check if this node is the same instance of another (object identity test).booleanbooleanequals​(Object o)equals​(Object o)equalsequalsObjectCheck if this node is the same instance of another (object identity test).Check if this node is the same instance of another (object identity test).Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants.NodeNodeNodefilter​(NodeFilter nodeFilter)filter​(NodeFilter nodeFilter)filterfilterNodeFilterPerform a depth-first filtering through this node and its descendants.Perform a depth-first filtering through this node and its descendants.boolean hasAttr​(String attributeKey) Test if this element has an attribute.booleanbooleanhasAttr​(String attributeKey)hasAttr​(String attributeKey)hasAttrhasAttrStringTest if this element has an attribute.Test if this element has an attribute.protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object.protected abstract booleanprotected abstract booleanhasAttributes​()hasAttributes​()hasAttributeshasAttributesCheck if this Node has an actual Attributes object.Check if this Node has an actual Attributes object.boolean hasParent​()booleanbooleanhasParent​()hasParent​()hasParenthasParentboolean hasSameValue​(Object o) Check if this node is has the same content as another node.booleanbooleanhasSameValue​(Object o)hasSameValue​(Object o)hasSameValuehasSameValueObjectCheck if this node is has the same content as another node.Check if this node is has the same content as another node.<T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable.<T extends Appendable>T<T extends Appendable>TAppendablehtml​(T appendable)html​(T appendable)htmlhtmlWrite this node and its children to the given Appendable.Write this node and its children to the given Appendable.AppendableAppendableprotected void indent​(Appendable accum, int depth, Document.OutputSettings out)protected voidprotected voidindent​(Appendable accum, int depth, Document.OutputSettings out)indent​(Appendable accum, int depth, Document.OutputSettings out)indentindentAppendableDocument.OutputSettingsNode nextSibling​() Get this node's next sibling.NodeNodeNodenextSibling​()nextSibling​()nextSiblingnextSiblingGet this node's next sibling.Get this node's next sibling.abstract String nodeName​() Get the node name of this node.abstract Stringabstract StringStringnodeName​()nodeName​()nodeNamenodeNameGet the node name of this node.Get the node name of this node.String outerHtml​() Get the outer HTML of this node.StringStringStringouterHtml​()outerHtml​()outerHtmlouterHtmlGet the outer HTML of this node.Get the outer HTML of this node.protected void outerHtml​(Appendable accum)protected voidprotected voidouterHtml​(Appendable accum)outerHtml​(Appendable accum)outerHtmlouterHtmlAppendableDocument ownerDocument​() Gets the Document associated with this Node.DocumentDocumentDocumentownerDocument​()ownerDocument​()ownerDocumentownerDocumentGets the Document associated with this Node.Gets the Document associated with this Node.Node parent​() Gets this node's parent node.NodeNodeNodeparent​()parent​()parentparentGets this node's parent node.Gets this node's parent node.Node parentNode​() Gets this node's parent node.NodeNodeNodeparentNode​()parentNode​()parentNodeparentNodeGets this node's parent node.Gets this node's parent node.Node previousSibling​() Get this node's previous sibling.NodeNodeNodepreviousSibling​()previousSibling​()previousSiblingpreviousSiblingGet this node's previous sibling.Get this node's previous sibling.void remove​() Remove (delete) this node from the DOM tree.voidvoidremove​()remove​()removeremoveRemove (delete) this node from the DOM tree.Remove (delete) this node from the DOM tree.Node removeAttr​(String attributeKey) Remove an attribute from this element.NodeNodeNoderemoveAttr​(String attributeKey)removeAttr​(String attributeKey)removeAttrremoveAttrStringRemove an attribute from this element.Remove an attribute from this element.protected void removeChild​(Node out)protected voidprotected voidremoveChild​(Node out)removeChild​(Node out)removeChildremoveChildNodeprotected void reparentChild​(Node child)protected voidprotected voidreparentChild​(Node child)reparentChild​(Node child)reparentChildreparentChildNodeprotected void replaceChild​(Node out, Node in)protected voidprotected voidreplaceChild​(Node out, Node in)replaceChild​(Node out, Node in)replaceChildreplaceChildNodeNodevoid replaceWith​(Node in) Replace this node in the DOM with the supplied node.voidvoidreplaceWith​(Node in)replaceWith​(Node in)replaceWithreplaceWithNodeReplace this node in the DOM with the supplied node.Replace this node in the DOM with the supplied node.Node root​() Get this node's root node; that is, its topmost ancestor.NodeNodeNoderoot​()root​()rootrootGet this node's root node; that is, its topmost ancestor.Get this node's root node; that is, its topmost ancestor.void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants.voidvoidsetBaseUri​(String baseUri)setBaseUri​(String baseUri)setBaseUrisetBaseUriStringUpdate the base URI of this node and all of its descendants.Update the base URI of this node and all of its descendants.protected void setParentNode​(Node parentNode)protected voidprotected voidsetParentNode​(Node parentNode)setParentNode​(Node parentNode)setParentNodesetParentNodeNodeprotected void setSiblingIndex​(int siblingIndex)protected voidprotected voidsetSiblingIndex​(int siblingIndex)setSiblingIndex​(int siblingIndex)setSiblingIndexsetSiblingIndexNode shallowClone​() Create a stand-alone, shallow copy of this node.NodeNodeNodeshallowClone​()shallowClone​()shallowCloneshallowCloneCreate a stand-alone, shallow copy of this node.Create a stand-alone, shallow copy of this node.int siblingIndex​() Get the list index of this node in its node sibling list.intintsiblingIndex​()siblingIndex​()siblingIndexsiblingIndexGet the list index of this node in its node sibling list.Get the list index of this node in its node sibling list.List<Node> siblingNodes​() Retrieves this node's sibling nodes.List<Node>List<Node>ListNodesiblingNodes​()siblingNodes​()siblingNodessiblingNodesRetrieves this node's sibling nodes.Retrieves this node's sibling nodes.String toString​()StringStringStringtoString​()toString​()toStringtoStringNode traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants.NodeNodeNodetraverse​(NodeVisitor nodeVisitor)traverse​(NodeVisitor nodeVisitor)traversetraverseNodeVisitorPerform a depth-first traversal through this node and its descendants.Perform a depth-first traversal through this node and its descendants.Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent.NodeNodeNodeunwrap​()unwrap​()unwrapunwrapRemoves this node from the DOM, and moves its children up into the node's parent.Removes this node from the DOM, and moves its children up into the node's parent.Node wrap​(String html) Wrap the supplied HTML around this node.NodeNodeNodewrap​(String html)wrap​(String html)wrapwrapStringWrap the supplied HTML around this node.Wrap the supplied HTML around this node.Methods inherited from class java.lang.Object finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitMethods inherited from class java.lang.Object finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitMethods inherited from class java.lang.ObjectObjectfinalize, getClass, hashCode, notify, notifyAll, wait, wait, waitfinalizegetClasshashCodenotifynotifyAllwaitwaitwaitConstructor Detail Node protected Node​() Default constructor. Doesn't setup base uri, children, or attributes; use with caution. Method Detail nodeName public abstract String nodeName​() Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). Returns: node name hasAttributes protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object. hasParent public boolean hasParent​() attr public String attr​(String attributeKey) Get an attribute's value by its key. Case insensitive To get an absolute URL from an attribute that may be a relative URL, prefix the key with abs, which is a shortcut to the absUrl(java.lang.String) method. E.g.: String url = a.attr("abs:href"); Parameters: attributeKey - The attribute key. Returns: The attribute, or empty string if not present (to avoid nulls). See Also: attributes(), hasAttr(String), absUrl(String) attributes public abstract Attributes attributes​() Get all of the element's attributes. Returns: attributes (which implements iterable, in same order as presented in original HTML). attr public Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value). If the attribute already exists, it is replaced. The attribute key comparison is case insensitive. Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this (for chaining) hasAttr public boolean hasAttr​(String attributeKey) Test if this element has an attribute. Case insensitive Parameters: attributeKey - The attribute key to check. Returns: true if the attribute exists, false if not. removeAttr public Node removeAttr​(String attributeKey) Remove an attribute from this element. Parameters: attributeKey - The attribute to remove. Returns: this (for chaining) clearAttributes public Node clearAttributes​() Clear (remove) all of the attributes in this node. Returns: this, for chaining baseUri public abstract String baseUri​() Get the base URI of this node. Returns: base URI doSetBaseUri protected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. Parameters: baseUri - new URI setBaseUri public void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants. Parameters: baseUri - base URI to set absUrl public String absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e. an <a href> or <img src>). E.g.: String absUrl = linkEl.absUrl("href"); If the attribute value is already absolute (i.e. it starts with a protocol, like http:// or https:// etc), and it successfully parses as a URL, the attribute is returned directly. Otherwise, it is treated as a URL relative to the element's baseUri(), and made absolute using that. As an alternate, you can use the attr(java.lang.String) method with the abs: prefix, e.g.: String absUrl = linkEl.attr("abs:href"); Parameters: attributeKey - The attribute key Returns: An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or could not be made successfully into a URL. See Also: attr(java.lang.String), URL(java.net.URL, String) ensureChildNodes protected abstract List<Node> ensureChildNodes​() childNode public Node childNode​(int index) Get a child node by its 0-based index. Parameters: index - index of child node Returns: the child node at this index. Throws a IndexOutOfBoundsException if the index is out of bounds. childNodes public List<Node> childNodes​() Get this node's children. Presented as an unmodifiable list: new children can not be added, but the child nodes themselves can be manipulated. Returns: list of children. If no children, returns an empty list. childNodesCopy public List<Node> childNodesCopy​() Returns a deep copy of this node's children. Changes made to these nodes will not be reflected in the original nodes Returns: a deep copy of this node's children childNodeSize public abstract int childNodeSize​() Get the number of child nodes that this node holds. Returns: the number of child nodes that this node holds. childNodesAsArray protected Node[] childNodesAsArray​() parent public Node parent​() Gets this node's parent node. Returns: parent node; or null if no parent. parentNode public final Node parentNode​() Gets this node's parent node. Not overridable by extending classes, so useful if you really just need the Node type. Returns: parent node; or null if no parent. root public Node root​() Get this node's root node; that is, its topmost ancestor. If this node is the top ancestor, returns this. Returns: topmost ancestor. ownerDocument public Document ownerDocument​() Gets the Document associated with this Node. Returns: the Document associated with this Node, or null if there is no such Document. remove public void remove​() Remove (delete) this node from the DOM tree. If this node has children, they are also removed. before public Node before​(String html) Insert the specified HTML into the DOM before this node (i.e. as a preceding sibling). Parameters: html - HTML to add before this node Returns: this node, for chaining See Also: after(String) before public Node before​(Node node) Insert the specified node into the DOM before this node (i.e. as a preceding sibling). Parameters: node - to add before this node Returns: this node, for chaining See Also: after(Node) after public Node after​(String html) Insert the specified HTML into the DOM after this node (i.e. as a following sibling). Parameters: html - HTML to add after this node Returns: this node, for chaining See Also: before(String) after public Node after​(Node node) Insert the specified node into the DOM after this node (i.e. as a following sibling). Parameters: node - to add after this node Returns: this node, for chaining See Also: before(Node) wrap public Node wrap​(String html) Wrap the supplied HTML around this node. Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this node, for chaining. unwrap public Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent. This has the effect of dropping the node but keeping its children. For example, with the input html: <div>One <span>Two <b>Three</b></span></div> Calling element.unwrap() on the span element will result in the html: <div>One Two <b>Three</b></div> and the "Two " TextNode being returned. Returns: the first child of this node, after the node has been unwrapped. Null if the node had no children. See Also: remove(), wrap(String) replaceWith public void replaceWith​(Node in) Replace this node in the DOM with the supplied node. Parameters: in - the node that will will replace the existing node. setParentNode protected void setParentNode​(Node parentNode) replaceChild protected void replaceChild​(Node out, Node in) removeChild protected void removeChild​(Node out) addChildren protected void addChildren​(Node... children) addChildren protected void addChildren​(int index, Node... children) reparentChild protected void reparentChild​(Node child) siblingNodes public List<Node> siblingNodes​() Retrieves this node's sibling nodes. Similar to node.parent.childNodes(), but does not include this node (a node is not a sibling of itself). Returns: node siblings. If the node has no parent, returns an empty list. nextSibling public Node nextSibling​() Get this node's next sibling. Returns: next sibling, or null if this is the last sibling previousSibling public Node previousSibling​() Get this node's previous sibling. Returns: the previous sibling, or null if this is the first sibling siblingIndex public int siblingIndex​() Get the list index of this node in its node sibling list. I.e. if this is the first node sibling, returns 0. Returns: position in node sibling list See Also: Element.elementSiblingIndex() setSiblingIndex protected void setSiblingIndex​(int siblingIndex) traverse public Node traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants. Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this node, for chaining filter public Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants. Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this node, for chaining outerHtml public String outerHtml​() Get the outer HTML of this node. Returns: HTML outerHtml protected void outerHtml​(Appendable accum) html public <T extends Appendable> T html​(T appendable) Write this node and its children to the given Appendable. Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining. toString public String toString​() Overrides: toString in class Object indent protected void indent​(Appendable accum, int depth, Document.OutputSettings out) throws IOException Throws: IOException equals public boolean equals​(Object o) Check if this node is the same instance of another (object identity test). Overrides: equals in class Object Parameters: o - other object to compare to Returns: true if the content of this node is the same as the other See Also: to compare nodes by their value hasSameValue public boolean hasSameValue​(Object o) Check if this node is has the same content as another node. A node is considered the same if its name, attributes and content match the other node; particularly its position in the tree does not influence its similarity. Parameters: o - other object to compare to Returns: true if the content of this node is the same as the other clone public Node clone​() Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using Element.appendChild(Node). Overrides: clone in class Object Returns: a stand-alone cloned node, including clones of any children See Also: shallowClone() shallowClone public Node shallowClone​() Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes. Returns: a single independent copy of this node See Also: clone() doClone protected Node doClone​(Node parent)Constructor Detail Node protected Node​() Default constructor. Doesn't setup base uri, children, or attributes; use with caution. Method Detail nodeName public abstract String nodeName​() Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). Returns: node name hasAttributes protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object. hasParent public boolean hasParent​() attr public String attr​(String attributeKey) Get an attribute's value by its key. Case insensitive To get an absolute URL from an attribute that may be a relative URL, prefix the key with abs, which is a shortcut to the absUrl(java.lang.String) method. E.g.: String url = a.attr("abs:href"); Parameters: attributeKey - The attribute key. Returns: The attribute, or empty string if not present (to avoid nulls). See Also: attributes(), hasAttr(String), absUrl(String) attributes public abstract Attributes attributes​() Get all of the element's attributes. Returns: attributes (which implements iterable, in same order as presented in original HTML). attr public Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value). If the attribute already exists, it is replaced. The attribute key comparison is case insensitive. Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this (for chaining) hasAttr public boolean hasAttr​(String attributeKey) Test if this element has an attribute. Case insensitive Parameters: attributeKey - The attribute key to check. Returns: true if the attribute exists, false if not. removeAttr public Node removeAttr​(String attributeKey) Remove an attribute from this element. Parameters: attributeKey - The attribute to remove. Returns: this (for chaining) clearAttributes public Node clearAttributes​() Clear (remove) all of the attributes in this node. Returns: this, for chaining baseUri public abstract String baseUri​() Get the base URI of this node. Returns: base URI doSetBaseUri protected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. Parameters: baseUri - new URI setBaseUri public void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants. Parameters: baseUri - base URI to set absUrl public String absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e. an <a href> or <img src>). E.g.: String absUrl = linkEl.absUrl("href"); If the attribute value is already absolute (i.e. it starts with a protocol, like http:// or https:// etc), and it successfully parses as a URL, the attribute is returned directly. Otherwise, it is treated as a URL relative to the element's baseUri(), and made absolute using that. As an alternate, you can use the attr(java.lang.String) method with the abs: prefix, e.g.: String absUrl = linkEl.attr("abs:href"); Parameters: attributeKey - The attribute key Returns: An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or could not be made successfully into a URL. See Also: attr(java.lang.String), URL(java.net.URL, String) ensureChildNodes protected abstract List<Node> ensureChildNodes​() childNode public Node childNode​(int index) Get a child node by its 0-based index. Parameters: index - index of child node Returns: the child node at this index. Throws a IndexOutOfBoundsException if the index is out of bounds. childNodes public List<Node> childNodes​() Get this node's children. Presented as an unmodifiable list: new children can not be added, but the child nodes themselves can be manipulated. Returns: list of children. If no children, returns an empty list. childNodesCopy public List<Node> childNodesCopy​() Returns a deep copy of this node's children. Changes made to these nodes will not be reflected in the original nodes Returns: a deep copy of this node's children childNodeSize public abstract int childNodeSize​() Get the number of child nodes that this node holds. Returns: the number of child nodes that this node holds. childNodesAsArray protected Node[] childNodesAsArray​() parent public Node parent​() Gets this node's parent node. Returns: parent node; or null if no parent. parentNode public final Node parentNode​() Gets this node's parent node. Not overridable by extending classes, so useful if you really just need the Node type. Returns: parent node; or null if no parent. root public Node root​() Get this node's root node; that is, its topmost ancestor. If this node is the top ancestor, returns this. Returns: topmost ancestor. ownerDocument public Document ownerDocument​() Gets the Document associated with this Node. Returns: the Document associated with this Node, or null if there is no such Document. remove public void remove​() Remove (delete) this node from the DOM tree. If this node has children, they are also removed. before public Node before​(String html) Insert the specified HTML into the DOM before this node (i.e. as a preceding sibling). Parameters: html - HTML to add before this node Returns: this node, for chaining See Also: after(String) before public Node before​(Node node) Insert the specified node into the DOM before this node (i.e. as a preceding sibling). Parameters: node - to add before this node Returns: this node, for chaining See Also: after(Node) after public Node after​(String html) Insert the specified HTML into the DOM after this node (i.e. as a following sibling). Parameters: html - HTML to add after this node Returns: this node, for chaining See Also: before(String) after public Node after​(Node node) Insert the specified node into the DOM after this node (i.e. as a following sibling). Parameters: node - to add after this node Returns: this node, for chaining See Also: before(Node) wrap public Node wrap​(String html) Wrap the supplied HTML around this node. Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this node, for chaining. unwrap public Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent. This has the effect of dropping the node but keeping its children. For example, with the input html: <div>One <span>Two <b>Three</b></span></div> Calling element.unwrap() on the span element will result in the html: <div>One Two <b>Three</b></div> and the "Two " TextNode being returned. Returns: the first child of this node, after the node has been unwrapped. Null if the node had no children. See Also: remove(), wrap(String) replaceWith public void replaceWith​(Node in) Replace this node in the DOM with the supplied node. Parameters: in - the node that will will replace the existing node. setParentNode protected void setParentNode​(Node parentNode) replaceChild protected void replaceChild​(Node out, Node in) removeChild protected void removeChild​(Node out) addChildren protected void addChildren​(Node... children) addChildren protected void addChildren​(int index, Node... children) reparentChild protected void reparentChild​(Node child) siblingNodes public List<Node> siblingNodes​() Retrieves this node's sibling nodes. Similar to node.parent.childNodes(), but does not include this node (a node is not a sibling of itself). Returns: node siblings. If the node has no parent, returns an empty list. nextSibling public Node nextSibling​() Get this node's next sibling. Returns: next sibling, or null if this is the last sibling previousSibling public Node previousSibling​() Get this node's previous sibling. Returns: the previous sibling, or null if this is the first sibling siblingIndex public int siblingIndex​() Get the list index of this node in its node sibling list. I.e. if this is the first node sibling, returns 0. Returns: position in node sibling list See Also: Element.elementSiblingIndex() setSiblingIndex protected void setSiblingIndex​(int siblingIndex) traverse public Node traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants. Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this node, for chaining filter public Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants. Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this node, for chaining outerHtml public String outerHtml​() Get the outer HTML of this node. Returns: HTML outerHtml protected void outerHtml​(Appendable accum) html public <T extends Appendable> T html​(T appendable) Write this node and its children to the given Appendable. Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining. toString public String toString​() Overrides: toString in class Object indent protected void indent​(Appendable accum, int depth, Document.OutputSettings out) throws IOException Throws: IOException equals public boolean equals​(Object o) Check if this node is the same instance of another (object identity test). Overrides: equals in class Object Parameters: o - other object to compare to Returns: true if the content of this node is the same as the other See Also: to compare nodes by their value hasSameValue public boolean hasSameValue​(Object o) Check if this node is has the same content as another node. A node is considered the same if its name, attributes and content match the other node; particularly its position in the tree does not influence its similarity. Parameters: o - other object to compare to Returns: true if the content of this node is the same as the other clone public Node clone​() Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using Element.appendChild(Node). Overrides: clone in class Object Returns: a stand-alone cloned node, including clones of any children See Also: shallowClone() shallowClone public Node shallowClone​() Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes. Returns: a single independent copy of this node See Also: clone() doClone protected Node doClone​(Node parent)Constructor Detail Node protected Node​() Default constructor. Doesn't setup base uri, children, or attributes; use with caution. Method Detail nodeName public abstract String nodeName​() Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). Returns: node name hasAttributes protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object. hasParent public boolean hasParent​() attr public String attr​(String attributeKey) Get an attribute's value by its key. Case insensitive To get an absolute URL from an attribute that may be a relative URL, prefix the key with abs, which is a shortcut to the absUrl(java.lang.String) method. E.g.: String url = a.attr("abs:href"); Parameters: attributeKey - The attribute key. Returns: The attribute, or empty string if not present (to avoid nulls). See Also: attributes(), hasAttr(String), absUrl(String) attributes public abstract Attributes attributes​() Get all of the element's attributes. Returns: attributes (which implements iterable, in same order as presented in original HTML). attr public Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value). If the attribute already exists, it is replaced. The attribute key comparison is case insensitive. Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this (for chaining) hasAttr public boolean hasAttr​(String attributeKey) Test if this element has an attribute. Case insensitive Parameters: attributeKey - The attribute key to check. Returns: true if the attribute exists, false if not. removeAttr public Node removeAttr​(String attributeKey) Remove an attribute from this element. Parameters: attributeKey - The attribute to remove. Returns: this (for chaining) clearAttributes public Node clearAttributes​() Clear (remove) all of the attributes in this node. Returns: this, for chaining baseUri public abstract String baseUri​() Get the base URI of this node. Returns: base URI doSetBaseUri protected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. Parameters: baseUri - new URI setBaseUri public void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants. Parameters: baseUri - base URI to set absUrl public String absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e. an <a href> or <img src>). E.g.: String absUrl = linkEl.absUrl("href"); If the attribute value is already absolute (i.e. it starts with a protocol, like http:// or https:// etc), and it successfully parses as a URL, the attribute is returned directly. Otherwise, it is treated as a URL relative to the element's baseUri(), and made absolute using that. As an alternate, you can use the attr(java.lang.String) method with the abs: prefix, e.g.: String absUrl = linkEl.attr("abs:href"); Parameters: attributeKey - The attribute key Returns: An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or could not be made successfully into a URL. See Also: attr(java.lang.String), URL(java.net.URL, String) ensureChildNodes protected abstract List<Node> ensureChildNodes​() childNode public Node childNode​(int index) Get a child node by its 0-based index. Parameters: index - index of child node Returns: the child node at this index. Throws a IndexOutOfBoundsException if the index is out of bounds. childNodes public List<Node> childNodes​() Get this node's children. Presented as an unmodifiable list: new children can not be added, but the child nodes themselves can be manipulated. Returns: list of children. If no children, returns an empty list. childNodesCopy public List<Node> childNodesCopy​() Returns a deep copy of this node's children. Changes made to these nodes will not be reflected in the original nodes Returns: a deep copy of this node's children childNodeSize public abstract int childNodeSize​() Get the number of child nodes that this node holds. Returns: the number of child nodes that this node holds. childNodesAsArray protected Node[] childNodesAsArray​() parent public Node parent​() Gets this node's parent node. Returns: parent node; or null if no parent. parentNode public final Node parentNode​() Gets this node's parent node. Not overridable by extending classes, so useful if you really just need the Node type. Returns: parent node; or null if no parent. root public Node root​() Get this node's root node; that is, its topmost ancestor. If this node is the top ancestor, returns this. Returns: topmost ancestor. ownerDocument public Document ownerDocument​() Gets the Document associated with this Node. Returns: the Document associated with this Node, or null if there is no such Document. remove public void remove​() Remove (delete) this node from the DOM tree. If this node has children, they are also removed. before public Node before​(String html) Insert the specified HTML into the DOM before this node (i.e. as a preceding sibling). Parameters: html - HTML to add before this node Returns: this node, for chaining See Also: after(String) before public Node before​(Node node) Insert the specified node into the DOM before this node (i.e. as a preceding sibling). Parameters: node - to add before this node Returns: this node, for chaining See Also: after(Node) after public Node after​(String html) Insert the specified HTML into the DOM after this node (i.e. as a following sibling). Parameters: html - HTML to add after this node Returns: this node, for chaining See Also: before(String) after public Node after​(Node node) Insert the specified node into the DOM after this node (i.e. as a following sibling). Parameters: node - to add after this node Returns: this node, for chaining See Also: before(Node) wrap public Node wrap​(String html) Wrap the supplied HTML around this node. Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this node, for chaining. unwrap public Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent. This has the effect of dropping the node but keeping its children. For example, with the input html: <div>One <span>Two <b>Three</b></span></div> Calling element.unwrap() on the span element will result in the html: <div>One Two <b>Three</b></div> and the "Two " TextNode being returned. Returns: the first child of this node, after the node has been unwrapped. Null if the node had no children. See Also: remove(), wrap(String) replaceWith public void replaceWith​(Node in) Replace this node in the DOM with the supplied node. Parameters: in - the node that will will replace the existing node. setParentNode protected void setParentNode​(Node parentNode) replaceChild protected void replaceChild​(Node out, Node in) removeChild protected void removeChild​(Node out) addChildren protected void addChildren​(Node... children) addChildren protected void addChildren​(int index, Node... children) reparentChild protected void reparentChild​(Node child) siblingNodes public List<Node> siblingNodes​() Retrieves this node's sibling nodes. Similar to node.parent.childNodes(), but does not include this node (a node is not a sibling of itself). Returns: node siblings. If the node has no parent, returns an empty list. nextSibling public Node nextSibling​() Get this node's next sibling. Returns: next sibling, or null if this is the last sibling previousSibling public Node previousSibling​() Get this node's previous sibling. Returns: the previous sibling, or null if this is the first sibling siblingIndex public int siblingIndex​() Get the list index of this node in its node sibling list. I.e. if this is the first node sibling, returns 0. Returns: position in node sibling list See Also: Element.elementSiblingIndex() setSiblingIndex protected void setSiblingIndex​(int siblingIndex) traverse public Node traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants. Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this node, for chaining filter public Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants. Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this node, for chaining outerHtml public String outerHtml​() Get the outer HTML of this node. Returns: HTML outerHtml protected void outerHtml​(Appendable accum) html public <T extends Appendable> T html​(T appendable) Write this node and its children to the given Appendable. Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining. toString public String toString​() Overrides: toString in class Object indent protected void indent​(Appendable accum, int depth, Document.OutputSettings out) throws IOException Throws: IOException equals public boolean equals​(Object o) Check if this node is the same instance of another (object identity test). Overrides: equals in class Object Parameters: o - other object to compare to Returns: true if the content of this node is the same as the other See Also: to compare nodes by their value hasSameValue public boolean hasSameValue​(Object o) Check if this node is has the same content as another node. A node is considered the same if its name, attributes and content match the other node; particularly its position in the tree does not influence its similarity. Parameters: o - other object to compare to Returns: true if the content of this node is the same as the other clone public Node clone​() Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using Element.appendChild(Node). Overrides: clone in class Object Returns: a stand-alone cloned node, including clones of any children See Also: shallowClone() shallowClone public Node shallowClone​() Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes. Returns: a single independent copy of this node See Also: clone() doClone protected Node doClone​(Node parent)Constructor Detail Node protected Node​() Default constructor. Doesn't setup base uri, children, or attributes; use with caution.Constructor Detail Node protected Node​() Default constructor. Doesn't setup base uri, children, or attributes; use with caution.Constructor DetailNode protected Node​() Default constructor. Doesn't setup base uri, children, or attributes; use with caution.Node protected Node​() Default constructor. Doesn't setup base uri, children, or attributes; use with caution.Nodeprotected Node​()Default constructor. Doesn't setup base uri, children, or attributes; use with caution.Method Detail nodeName public abstract String nodeName​() Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). Returns: node name hasAttributes protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object. hasParent public boolean hasParent​() attr public String attr​(String attributeKey) Get an attribute's value by its key. Case insensitive To get an absolute URL from an attribute that may be a relative URL, prefix the key with abs, which is a shortcut to the absUrl(java.lang.String) method. E.g.: String url = a.attr("abs:href"); Parameters: attributeKey - The attribute key. Returns: The attribute, or empty string if not present (to avoid nulls). See Also: attributes(), hasAttr(String), absUrl(String) attributes public abstract Attributes attributes​() Get all of the element's attributes. Returns: attributes (which implements iterable, in same order as presented in original HTML). attr public Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value). If the attribute already exists, it is replaced. The attribute key comparison is case insensitive. Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this (for chaining) hasAttr public boolean hasAttr​(String attributeKey) Test if this element has an attribute. Case insensitive Parameters: attributeKey - The attribute key to check. Returns: true if the attribute exists, false if not. removeAttr public Node removeAttr​(String attributeKey) Remove an attribute from this element. Parameters: attributeKey - The attribute to remove. Returns: this (for chaining) clearAttributes public Node clearAttributes​() Clear (remove) all of the attributes in this node. Returns: this, for chaining baseUri public abstract String baseUri​() Get the base URI of this node. Returns: base URI doSetBaseUri protected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. Parameters: baseUri - new URI setBaseUri public void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants. Parameters: baseUri - base URI to set absUrl public String absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e. an <a href> or <img src>). E.g.: String absUrl = linkEl.absUrl("href"); If the attribute value is already absolute (i.e. it starts with a protocol, like http:// or https:// etc), and it successfully parses as a URL, the attribute is returned directly. Otherwise, it is treated as a URL relative to the element's baseUri(), and made absolute using that. As an alternate, you can use the attr(java.lang.String) method with the abs: prefix, e.g.: String absUrl = linkEl.attr("abs:href"); Parameters: attributeKey - The attribute key Returns: An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or could not be made successfully into a URL. See Also: attr(java.lang.String), URL(java.net.URL, String) ensureChildNodes protected abstract List<Node> ensureChildNodes​() childNode public Node childNode​(int index) Get a child node by its 0-based index. Parameters: index - index of child node Returns: the child node at this index. Throws a IndexOutOfBoundsException if the index is out of bounds. childNodes public List<Node> childNodes​() Get this node's children. Presented as an unmodifiable list: new children can not be added, but the child nodes themselves can be manipulated. Returns: list of children. If no children, returns an empty list. childNodesCopy public List<Node> childNodesCopy​() Returns a deep copy of this node's children. Changes made to these nodes will not be reflected in the original nodes Returns: a deep copy of this node's children childNodeSize public abstract int childNodeSize​() Get the number of child nodes that this node holds. Returns: the number of child nodes that this node holds. childNodesAsArray protected Node[] childNodesAsArray​() parent public Node parent​() Gets this node's parent node. Returns: parent node; or null if no parent. parentNode public final Node parentNode​() Gets this node's parent node. Not overridable by extending classes, so useful if you really just need the Node type. Returns: parent node; or null if no parent. root public Node root​() Get this node's root node; that is, its topmost ancestor. If this node is the top ancestor, returns this. Returns: topmost ancestor. ownerDocument public Document ownerDocument​() Gets the Document associated with this Node. Returns: the Document associated with this Node, or null if there is no such Document. remove public void remove​() Remove (delete) this node from the DOM tree. If this node has children, they are also removed. before public Node before​(String html) Insert the specified HTML into the DOM before this node (i.e. as a preceding sibling). Parameters: html - HTML to add before this node Returns: this node, for chaining See Also: after(String) before public Node before​(Node node) Insert the specified node into the DOM before this node (i.e. as a preceding sibling). Parameters: node - to add before this node Returns: this node, for chaining See Also: after(Node) after public Node after​(String html) Insert the specified HTML into the DOM after this node (i.e. as a following sibling). Parameters: html - HTML to add after this node Returns: this node, for chaining See Also: before(String) after public Node after​(Node node) Insert the specified node into the DOM after this node (i.e. as a following sibling). Parameters: node - to add after this node Returns: this node, for chaining See Also: before(Node) wrap public Node wrap​(String html) Wrap the supplied HTML around this node. Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this node, for chaining. unwrap public Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent. This has the effect of dropping the node but keeping its children. For example, with the input html: <div>One <span>Two <b>Three</b></span></div> Calling element.unwrap() on the span element will result in the html: <div>One Two <b>Three</b></div> and the "Two " TextNode being returned. Returns: the first child of this node, after the node has been unwrapped. Null if the node had no children. See Also: remove(), wrap(String) replaceWith public void replaceWith​(Node in) Replace this node in the DOM with the supplied node. Parameters: in - the node that will will replace the existing node. setParentNode protected void setParentNode​(Node parentNode) replaceChild protected void replaceChild​(Node out, Node in) removeChild protected void removeChild​(Node out) addChildren protected void addChildren​(Node... children) addChildren protected void addChildren​(int index, Node... children) reparentChild protected void reparentChild​(Node child) siblingNodes public List<Node> siblingNodes​() Retrieves this node's sibling nodes. Similar to node.parent.childNodes(), but does not include this node (a node is not a sibling of itself). Returns: node siblings. If the node has no parent, returns an empty list. nextSibling public Node nextSibling​() Get this node's next sibling. Returns: next sibling, or null if this is the last sibling previousSibling public Node previousSibling​() Get this node's previous sibling. Returns: the previous sibling, or null if this is the first sibling siblingIndex public int siblingIndex​() Get the list index of this node in its node sibling list. I.e. if this is the first node sibling, returns 0. Returns: position in node sibling list See Also: Element.elementSiblingIndex() setSiblingIndex protected void setSiblingIndex​(int siblingIndex) traverse public Node traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants. Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this node, for chaining filter public Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants. Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this node, for chaining outerHtml public String outerHtml​() Get the outer HTML of this node. Returns: HTML outerHtml protected void outerHtml​(Appendable accum) html public <T extends Appendable> T html​(T appendable) Write this node and its children to the given Appendable. Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining. toString public String toString​() Overrides: toString in class Object indent protected void indent​(Appendable accum, int depth, Document.OutputSettings out) throws IOException Throws: IOException equals public boolean equals​(Object o) Check if this node is the same instance of another (object identity test). Overrides: equals in class Object Parameters: o - other object to compare to Returns: true if the content of this node is the same as the other See Also: to compare nodes by their value hasSameValue public boolean hasSameValue​(Object o) Check if this node is has the same content as another node. A node is considered the same if its name, attributes and content match the other node; particularly its position in the tree does not influence its similarity. Parameters: o - other object to compare to Returns: true if the content of this node is the same as the other clone public Node clone​() Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using Element.appendChild(Node). Overrides: clone in class Object Returns: a stand-alone cloned node, including clones of any children See Also: shallowClone() shallowClone public Node shallowClone​() Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes. Returns: a single independent copy of this node See Also: clone() doClone protected Node doClone​(Node parent)Method Detail nodeName public abstract String nodeName​() Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). Returns: node name hasAttributes protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object. hasParent public boolean hasParent​() attr public String attr​(String attributeKey) Get an attribute's value by its key. Case insensitive To get an absolute URL from an attribute that may be a relative URL, prefix the key with abs, which is a shortcut to the absUrl(java.lang.String) method. E.g.: String url = a.attr("abs:href"); Parameters: attributeKey - The attribute key. Returns: The attribute, or empty string if not present (to avoid nulls). See Also: attributes(), hasAttr(String), absUrl(String) attributes public abstract Attributes attributes​() Get all of the element's attributes. Returns: attributes (which implements iterable, in same order as presented in original HTML). attr public Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value). If the attribute already exists, it is replaced. The attribute key comparison is case insensitive. Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this (for chaining) hasAttr public boolean hasAttr​(String attributeKey) Test if this element has an attribute. Case insensitive Parameters: attributeKey - The attribute key to check. Returns: true if the attribute exists, false if not. removeAttr public Node removeAttr​(String attributeKey) Remove an attribute from this element. Parameters: attributeKey - The attribute to remove. Returns: this (for chaining) clearAttributes public Node clearAttributes​() Clear (remove) all of the attributes in this node. Returns: this, for chaining baseUri public abstract String baseUri​() Get the base URI of this node. Returns: base URI doSetBaseUri protected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. Parameters: baseUri - new URI setBaseUri public void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants. Parameters: baseUri - base URI to set absUrl public String absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e. an <a href> or <img src>). E.g.: String absUrl = linkEl.absUrl("href"); If the attribute value is already absolute (i.e. it starts with a protocol, like http:// or https:// etc), and it successfully parses as a URL, the attribute is returned directly. Otherwise, it is treated as a URL relative to the element's baseUri(), and made absolute using that. As an alternate, you can use the attr(java.lang.String) method with the abs: prefix, e.g.: String absUrl = linkEl.attr("abs:href"); Parameters: attributeKey - The attribute key Returns: An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or could not be made successfully into a URL. See Also: attr(java.lang.String), URL(java.net.URL, String) ensureChildNodes protected abstract List<Node> ensureChildNodes​() childNode public Node childNode​(int index) Get a child node by its 0-based index. Parameters: index - index of child node Returns: the child node at this index. Throws a IndexOutOfBoundsException if the index is out of bounds. childNodes public List<Node> childNodes​() Get this node's children. Presented as an unmodifiable list: new children can not be added, but the child nodes themselves can be manipulated. Returns: list of children. If no children, returns an empty list. childNodesCopy public List<Node> childNodesCopy​() Returns a deep copy of this node's children. Changes made to these nodes will not be reflected in the original nodes Returns: a deep copy of this node's children childNodeSize public abstract int childNodeSize​() Get the number of child nodes that this node holds. Returns: the number of child nodes that this node holds. childNodesAsArray protected Node[] childNodesAsArray​() parent public Node parent​() Gets this node's parent node. Returns: parent node; or null if no parent. parentNode public final Node parentNode​() Gets this node's parent node. Not overridable by extending classes, so useful if you really just need the Node type. Returns: parent node; or null if no parent. root public Node root​() Get this node's root node; that is, its topmost ancestor. If this node is the top ancestor, returns this. Returns: topmost ancestor. ownerDocument public Document ownerDocument​() Gets the Document associated with this Node. Returns: the Document associated with this Node, or null if there is no such Document. remove public void remove​() Remove (delete) this node from the DOM tree. If this node has children, they are also removed. before public Node before​(String html) Insert the specified HTML into the DOM before this node (i.e. as a preceding sibling). Parameters: html - HTML to add before this node Returns: this node, for chaining See Also: after(String) before public Node before​(Node node) Insert the specified node into the DOM before this node (i.e. as a preceding sibling). Parameters: node - to add before this node Returns: this node, for chaining See Also: after(Node) after public Node after​(String html) Insert the specified HTML into the DOM after this node (i.e. as a following sibling). Parameters: html - HTML to add after this node Returns: this node, for chaining See Also: before(String) after public Node after​(Node node) Insert the specified node into the DOM after this node (i.e. as a following sibling). Parameters: node - to add after this node Returns: this node, for chaining See Also: before(Node) wrap public Node wrap​(String html) Wrap the supplied HTML around this node. Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this node, for chaining. unwrap public Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent. This has the effect of dropping the node but keeping its children. For example, with the input html: <div>One <span>Two <b>Three</b></span></div> Calling element.unwrap() on the span element will result in the html: <div>One Two <b>Three</b></div> and the "Two " TextNode being returned. Returns: the first child of this node, after the node has been unwrapped. Null if the node had no children. See Also: remove(), wrap(String) replaceWith public void replaceWith​(Node in) Replace this node in the DOM with the supplied node. Parameters: in - the node that will will replace the existing node. setParentNode protected void setParentNode​(Node parentNode) replaceChild protected void replaceChild​(Node out, Node in) removeChild protected void removeChild​(Node out) addChildren protected void addChildren​(Node... children) addChildren protected void addChildren​(int index, Node... children) reparentChild protected void reparentChild​(Node child) siblingNodes public List<Node> siblingNodes​() Retrieves this node's sibling nodes. Similar to node.parent.childNodes(), but does not include this node (a node is not a sibling of itself). Returns: node siblings. If the node has no parent, returns an empty list. nextSibling public Node nextSibling​() Get this node's next sibling. Returns: next sibling, or null if this is the last sibling previousSibling public Node previousSibling​() Get this node's previous sibling. Returns: the previous sibling, or null if this is the first sibling siblingIndex public int siblingIndex​() Get the list index of this node in its node sibling list. I.e. if this is the first node sibling, returns 0. Returns: position in node sibling list See Also: Element.elementSiblingIndex() setSiblingIndex protected void setSiblingIndex​(int siblingIndex) traverse public Node traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants. Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this node, for chaining filter public Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants. Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this node, for chaining outerHtml public String outerHtml​() Get the outer HTML of this node. Returns: HTML outerHtml protected void outerHtml​(Appendable accum) html public <T extends Appendable> T html​(T appendable) Write this node and its children to the given Appendable. Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining. toString public String toString​() Overrides: toString in class Object indent protected void indent​(Appendable accum, int depth, Document.OutputSettings out) throws IOException Throws: IOException equals public boolean equals​(Object o) Check if this node is the same instance of another (object identity test). Overrides: equals in class Object Parameters: o - other object to compare to Returns: true if the content of this node is the same as the other See Also: to compare nodes by their value hasSameValue public boolean hasSameValue​(Object o) Check if this node is has the same content as another node. A node is considered the same if its name, attributes and content match the other node; particularly its position in the tree does not influence its similarity. Parameters: o - other object to compare to Returns: true if the content of this node is the same as the other clone public Node clone​() Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using Element.appendChild(Node). Overrides: clone in class Object Returns: a stand-alone cloned node, including clones of any children See Also: shallowClone() shallowClone public Node shallowClone​() Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes. Returns: a single independent copy of this node See Also: clone() doClone protected Node doClone​(Node parent)Method DetailnodeName public abstract String nodeName​() Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). Returns: node namenodeName public abstract String nodeName​() Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). Returns: node namenodeNamepublic abstract String nodeName​()StringGet the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof).Returns: node nameReturns:Returns:node namehasAttributes protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object.hasAttributes protected abstract boolean hasAttributes​() Check if this Node has an actual Attributes object.hasAttributesprotected abstract boolean hasAttributes​()Check if this Node has an actual Attributes object.hasParent public boolean hasParent​()hasParent public boolean hasParent​()hasParentpublic boolean hasParent​()attr public String attr​(String attributeKey) Get an attribute's value by its key. Case insensitive To get an absolute URL from an attribute that may be a relative URL, prefix the key with abs, which is a shortcut to the absUrl(java.lang.String) method. E.g.: String url = a.attr("abs:href"); Parameters: attributeKey - The attribute key. Returns: The attribute, or empty string if not present (to avoid nulls). See Also: attributes(), hasAttr(String), absUrl(String)attr public String attr​(String attributeKey) Get an attribute's value by its key. Case insensitive To get an absolute URL from an attribute that may be a relative URL, prefix the key with abs, which is a shortcut to the absUrl(java.lang.String) method. E.g.: String url = a.attr("abs:href"); Parameters: attributeKey - The attribute key. Returns: The attribute, or empty string if not present (to avoid nulls). See Also: attributes(), hasAttr(String), absUrl(String)attrpublic String attr​(String attributeKey)StringStringGet an attribute's value by its key. Case insensitive To get an absolute URL from an attribute that may be a relative URL, prefix the key with abs, which is a shortcut to the absUrl(java.lang.String) method. E.g.: String url = a.attr("abs:href");Case insensitiveTo get an absolute URL from an attribute that may be a relative URL, prefix the key with abs, which is a shortcut to the absUrl(java.lang.String) method.absabsabsUrl(java.lang.String)absUrl(java.lang.String)String url = a.attr("abs:href");String url = a.attr("abs:href");Parameters: attributeKey - The attribute key. Returns: The attribute, or empty string if not present (to avoid nulls). See Also: attributes(), hasAttr(String), absUrl(String)Parameters:Parameters:attributeKey - The attribute key.attributeKeyReturns:Returns:The attribute, or empty string if not present (to avoid nulls).See Also:See Also:attributes(), hasAttr(String), absUrl(String)attributes()attributes()hasAttr(String)hasAttr(String)absUrl(String)absUrl(String)attributes public abstract Attributes attributes​() Get all of the element's attributes. Returns: attributes (which implements iterable, in same order as presented in original HTML).attributes public abstract Attributes attributes​() Get all of the element's attributes. Returns: attributes (which implements iterable, in same order as presented in original HTML).attributespublic abstract Attributes attributes​()AttributesGet all of the element's attributes.Returns: attributes (which implements iterable, in same order as presented in original HTML).Returns:Returns:attributes (which implements iterable, in same order as presented in original HTML).attr public Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value). If the attribute already exists, it is replaced. The attribute key comparison is case insensitive. Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this (for chaining)attr public Node attr​(String attributeKey, String attributeValue) Set an attribute (key=value). If the attribute already exists, it is replaced. The attribute key comparison is case insensitive. Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this (for chaining)attrpublic Node attr​(String attributeKey, String attributeValue)NodeStringStringSet an attribute (key=value). If the attribute already exists, it is replaced. The attribute key comparison is case insensitive.case insensitiveParameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this (for chaining)Parameters:Parameters:attributeKey - The attribute key.attributeKeyattributeValue - The attribute value.attributeValueReturns:Returns:this (for chaining)hasAttr public boolean hasAttr​(String attributeKey) Test if this element has an attribute. Case insensitive Parameters: attributeKey - The attribute key to check. Returns: true if the attribute exists, false if not.hasAttr public boolean hasAttr​(String attributeKey) Test if this element has an attribute. Case insensitive Parameters: attributeKey - The attribute key to check. Returns: true if the attribute exists, false if not.hasAttrpublic boolean hasAttr​(String attributeKey)StringTest if this element has an attribute. Case insensitiveCase insensitiveParameters: attributeKey - The attribute key to check. Returns: true if the attribute exists, false if not.Parameters:Parameters:attributeKey - The attribute key to check.attributeKeyReturns:Returns:true if the attribute exists, false if not.removeAttr public Node removeAttr​(String attributeKey) Remove an attribute from this element. Parameters: attributeKey - The attribute to remove. Returns: this (for chaining)removeAttr public Node removeAttr​(String attributeKey) Remove an attribute from this element. Parameters: attributeKey - The attribute to remove. Returns: this (for chaining)removeAttrpublic Node removeAttr​(String attributeKey)NodeStringRemove an attribute from this element.Parameters: attributeKey - The attribute to remove. Returns: this (for chaining)Parameters:Parameters:attributeKey - The attribute to remove.attributeKeyReturns:Returns:this (for chaining)clearAttributes public Node clearAttributes​() Clear (remove) all of the attributes in this node. Returns: this, for chainingclearAttributes public Node clearAttributes​() Clear (remove) all of the attributes in this node. Returns: this, for chainingclearAttributespublic Node clearAttributes​()NodeClear (remove) all of the attributes in this node.Returns: this, for chainingReturns:Returns:this, for chainingbaseUri public abstract String baseUri​() Get the base URI of this node. Returns: base URIbaseUri public abstract String baseUri​() Get the base URI of this node. Returns: base URIbaseUripublic abstract String baseUri​()StringGet the base URI of this node.Returns: base URIReturns:Returns:base URIdoSetBaseUri protected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. Parameters: baseUri - new URIdoSetBaseUri protected abstract void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. Parameters: baseUri - new URIdoSetBaseUriprotected abstract void doSetBaseUri​(String baseUri)StringSet the baseUri for just this node (not its descendants), if this Node tracks base URIs.Parameters: baseUri - new URIParameters:Parameters:baseUri - new URIbaseUrisetBaseUri public void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants. Parameters: baseUri - base URI to setsetBaseUri public void setBaseUri​(String baseUri) Update the base URI of this node and all of its descendants. Parameters: baseUri - base URI to setsetBaseUripublic void setBaseUri​(String baseUri)StringUpdate the base URI of this node and all of its descendants.Parameters: baseUri - base URI to setParameters:Parameters:baseUri - base URI to setbaseUriabsUrl public String absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e. an <a href> or <img src>). E.g.: String absUrl = linkEl.absUrl("href"); If the attribute value is already absolute (i.e. it starts with a protocol, like http:// or https:// etc), and it successfully parses as a URL, the attribute is returned directly. Otherwise, it is treated as a URL relative to the element's baseUri(), and made absolute using that. As an alternate, you can use the attr(java.lang.String) method with the abs: prefix, e.g.: String absUrl = linkEl.attr("abs:href"); Parameters: attributeKey - The attribute key Returns: An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or could not be made successfully into a URL. See Also: attr(java.lang.String), URL(java.net.URL, String)absUrl public String absUrl​(String attributeKey) Get an absolute URL from a URL attribute that may be relative (i.e. an <a href> or <img src>). E.g.: String absUrl = linkEl.absUrl("href"); If the attribute value is already absolute (i.e. it starts with a protocol, like http:// or https:// etc), and it successfully parses as a URL, the attribute is returned directly. Otherwise, it is treated as a URL relative to the element's baseUri(), and made absolute using that. As an alternate, you can use the attr(java.lang.String) method with the abs: prefix, e.g.: String absUrl = linkEl.attr("abs:href"); Parameters: attributeKey - The attribute key Returns: An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or could not be made successfully into a URL. See Also: attr(java.lang.String), URL(java.net.URL, String)absUrlpublic String absUrl​(String attributeKey)StringStringGet an absolute URL from a URL attribute that may be relative (i.e. an <a href> or <img src>). E.g.: String absUrl = linkEl.absUrl("href"); If the attribute value is already absolute (i.e. it starts with a protocol, like http:// or https:// etc), and it successfully parses as a URL, the attribute is returned directly. Otherwise, it is treated as a URL relative to the element's baseUri(), and made absolute using that. As an alternate, you can use the attr(java.lang.String) method with the abs: prefix, e.g.: String absUrl = linkEl.attr("abs:href");<a href><img src>E.g.: String absUrl = linkEl.absUrl("href");String absUrl = linkEl.absUrl("href");If the attribute value is already absolute (i.e. it starts with a protocol, like http:// or https:// etc), and it successfully parses as a URL, the attribute is returned directly. Otherwise, it is treated as a URL relative to the element's baseUri(), and made absolute using that.http://https://baseUri()baseUri()As an alternate, you can use the attr(java.lang.String) method with the abs: prefix, e.g.: String absUrl = linkEl.attr("abs:href");attr(java.lang.String)attr(java.lang.String)abs:String absUrl = linkEl.attr("abs:href");Parameters: attributeKey - The attribute key Returns: An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or could not be made successfully into a URL. See Also: attr(java.lang.String), URL(java.net.URL, String)Parameters:Parameters:attributeKey - The attribute keyattributeKeyReturns:Returns:An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or could not be made successfully into a URL.See Also:See Also:attr(java.lang.String), URL(java.net.URL, String)attr(java.lang.String)attr(java.lang.String)URL(java.net.URL, String)URL(java.net.URL, String)ensureChildNodes protected abstract List<Node> ensureChildNodes​()ensureChildNodes protected abstract List<Node> ensureChildNodes​()ensureChildNodesprotected abstract List<Node> ensureChildNodes​()ListNodechildNode public Node childNode​(int index) Get a child node by its 0-based index. Parameters: index - index of child node Returns: the child node at this index. Throws a IndexOutOfBoundsException if the index is out of bounds.childNode public Node childNode​(int index) Get a child node by its 0-based index. Parameters: index - index of child node Returns: the child node at this index. Throws a IndexOutOfBoundsException if the index is out of bounds.childNodepublic Node childNode​(int index)NodeGet a child node by its 0-based index.Parameters: index - index of child node Returns: the child node at this index. Throws a IndexOutOfBoundsException if the index is out of bounds.Parameters:Parameters:index - index of child nodeindexReturns:Returns:the child node at this index. Throws a IndexOutOfBoundsException if the index is out of bounds.IndexOutOfBoundsExceptionchildNodes public List<Node> childNodes​() Get this node's children. Presented as an unmodifiable list: new children can not be added, but the child nodes themselves can be manipulated. Returns: list of children. If no children, returns an empty list.childNodes public List<Node> childNodes​() Get this node's children. Presented as an unmodifiable list: new children can not be added, but the child nodes themselves can be manipulated. Returns: list of children. If no children, returns an empty list.childNodespublic List<Node> childNodes​()ListNodeGet this node's children. Presented as an unmodifiable list: new children can not be added, but the child nodes themselves can be manipulated.Returns: list of children. If no children, returns an empty list.Returns:Returns:list of children. If no children, returns an empty list.childNodesCopy public List<Node> childNodesCopy​() Returns a deep copy of this node's children. Changes made to these nodes will not be reflected in the original nodes Returns: a deep copy of this node's childrenchildNodesCopy public List<Node> childNodesCopy​() Returns a deep copy of this node's children. Changes made to these nodes will not be reflected in the original nodes Returns: a deep copy of this node's childrenchildNodesCopypublic List<Node> childNodesCopy​()ListNodeReturns a deep copy of this node's children. Changes made to these nodes will not be reflected in the original nodesReturns: a deep copy of this node's childrenReturns:Returns:a deep copy of this node's childrenchildNodeSize public abstract int childNodeSize​() Get the number of child nodes that this node holds. Returns: the number of child nodes that this node holds.childNodeSize public abstract int childNodeSize​() Get the number of child nodes that this node holds. Returns: the number of child nodes that this node holds.childNodeSizepublic abstract int childNodeSize​()Get the number of child nodes that this node holds.Returns: the number of child nodes that this node holds.Returns:Returns:the number of child nodes that this node holds.childNodesAsArray protected Node[] childNodesAsArray​()childNodesAsArray protected Node[] childNodesAsArray​()childNodesAsArrayprotected Node[] childNodesAsArray​()Nodeparent public Node parent​() Gets this node's parent node. Returns: parent node; or null if no parent.parent public Node parent​() Gets this node's parent node. Returns: parent node; or null if no parent.parentpublic Node parent​()NodeGets this node's parent node.Returns: parent node; or null if no parent.Returns:Returns:parent node; or null if no parent.parentNode public final Node parentNode​() Gets this node's parent node. Not overridable by extending classes, so useful if you really just need the Node type. Returns: parent node; or null if no parent.parentNode public final Node parentNode​() Gets this node's parent node. Not overridable by extending classes, so useful if you really just need the Node type. Returns: parent node; or null if no parent.parentNodepublic final Node parentNode​()NodeGets this node's parent node. Not overridable by extending classes, so useful if you really just need the Node type.Returns: parent node; or null if no parent.Returns:Returns:parent node; or null if no parent.root public Node root​() Get this node's root node; that is, its topmost ancestor. If this node is the top ancestor, returns this. Returns: topmost ancestor.root public Node root​() Get this node's root node; that is, its topmost ancestor. If this node is the top ancestor, returns this. Returns: topmost ancestor.rootpublic Node root​()NodeGet this node's root node; that is, its topmost ancestor. If this node is the top ancestor, returns this.thisReturns: topmost ancestor.Returns:Returns:topmost ancestor.ownerDocument public Document ownerDocument​() Gets the Document associated with this Node. Returns: the Document associated with this Node, or null if there is no such Document.ownerDocument public Document ownerDocument​() Gets the Document associated with this Node. Returns: the Document associated with this Node, or null if there is no such Document.ownerDocumentpublic Document ownerDocument​()DocumentGets the Document associated with this Node.Returns: the Document associated with this Node, or null if there is no such Document.Returns:Returns:the Document associated with this Node, or null if there is no such Document.remove public void remove​() Remove (delete) this node from the DOM tree. If this node has children, they are also removed.remove public void remove​() Remove (delete) this node from the DOM tree. If this node has children, they are also removed.removepublic void remove​()Remove (delete) this node from the DOM tree. If this node has children, they are also removed.before public Node before​(String html) Insert the specified HTML into the DOM before this node (i.e. as a preceding sibling). Parameters: html - HTML to add before this node Returns: this node, for chaining See Also: after(String)before public Node before​(String html) Insert the specified HTML into the DOM before this node (i.e. as a preceding sibling). Parameters: html - HTML to add before this node Returns: this node, for chaining See Also: after(String)beforepublic Node before​(String html)NodeStringInsert the specified HTML into the DOM before this node (i.e. as a preceding sibling).Parameters: html - HTML to add before this node Returns: this node, for chaining See Also: after(String)Parameters:Parameters:html - HTML to add before this nodehtmlReturns:Returns:this node, for chainingSee Also:See Also:after(String)after(String)after(String)before public Node before​(Node node) Insert the specified node into the DOM before this node (i.e. as a preceding sibling). Parameters: node - to add before this node Returns: this node, for chaining See Also: after(Node)before public Node before​(Node node) Insert the specified node into the DOM before this node (i.e. as a preceding sibling). Parameters: node - to add before this node Returns: this node, for chaining See Also: after(Node)beforepublic Node before​(Node node)NodeNodeInsert the specified node into the DOM before this node (i.e. as a preceding sibling).Parameters: node - to add before this node Returns: this node, for chaining See Also: after(Node)Parameters:Parameters:node - to add before this nodenodeReturns:Returns:this node, for chainingSee Also:See Also:after(Node)after(Node)after(Node)after public Node after​(String html) Insert the specified HTML into the DOM after this node (i.e. as a following sibling). Parameters: html - HTML to add after this node Returns: this node, for chaining See Also: before(String)after public Node after​(String html) Insert the specified HTML into the DOM after this node (i.e. as a following sibling). Parameters: html - HTML to add after this node Returns: this node, for chaining See Also: before(String)afterpublic Node after​(String html)NodeStringInsert the specified HTML into the DOM after this node (i.e. as a following sibling).Parameters: html - HTML to add after this node Returns: this node, for chaining See Also: before(String)Parameters:Parameters:html - HTML to add after this nodehtmlReturns:Returns:this node, for chainingSee Also:See Also:before(String)before(String)before(String)after public Node after​(Node node) Insert the specified node into the DOM after this node (i.e. as a following sibling). Parameters: node - to add after this node Returns: this node, for chaining See Also: before(Node)after public Node after​(Node node) Insert the specified node into the DOM after this node (i.e. as a following sibling). Parameters: node - to add after this node Returns: this node, for chaining See Also: before(Node)afterpublic Node after​(Node node)NodeNodeInsert the specified node into the DOM after this node (i.e. as a following sibling).Parameters: node - to add after this node Returns: this node, for chaining See Also: before(Node)Parameters:Parameters:node - to add after this nodenodeReturns:Returns:this node, for chainingSee Also:See Also:before(Node)before(Node)before(Node)wrap public Node wrap​(String html) Wrap the supplied HTML around this node. Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this node, for chaining.wrap public Node wrap​(String html) Wrap the supplied HTML around this node. Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this node, for chaining.wrappublic Node wrap​(String html)NodeStringWrap the supplied HTML around this node.Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this node, for chaining.Parameters:Parameters:html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep.html<div class="head"></div>Returns:Returns:this node, for chaining.unwrap public Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent. This has the effect of dropping the node but keeping its children. For example, with the input html: <div>One <span>Two <b>Three</b></span></div> Calling element.unwrap() on the span element will result in the html: <div>One Two <b>Three</b></div> and the "Two " TextNode being returned. Returns: the first child of this node, after the node has been unwrapped. Null if the node had no children. See Also: remove(), wrap(String)unwrap public Node unwrap​() Removes this node from the DOM, and moves its children up into the node's parent. This has the effect of dropping the node but keeping its children. For example, with the input html: <div>One <span>Two <b>Three</b></span></div> Calling element.unwrap() on the span element will result in the html: <div>One Two <b>Three</b></div> and the "Two " TextNode being returned. Returns: the first child of this node, after the node has been unwrapped. Null if the node had no children. See Also: remove(), wrap(String)unwrappublic Node unwrap​()NodeRemoves this node from the DOM, and moves its children up into the node's parent. This has the effect of dropping the node but keeping its children. For example, with the input html: <div>One <span>Two <b>Three</b></span></div> Calling element.unwrap() on the span element will result in the html: <div>One Two <b>Three</b></div> and the "Two " TextNode being returned.For example, with the input html:<div>One <span>Two <b>Three</b></span></div><div>One <span>Two <b>Three</b></span></div>element.unwrap()span<div>One Two <b>Three</b></div><div>One Two <b>Three</b></div>"Two "TextNodeTextNodeReturns: the first child of this node, after the node has been unwrapped. Null if the node had no children. See Also: remove(), wrap(String)Returns:Returns:the first child of this node, after the node has been unwrapped. Null if the node had no children.See Also:See Also:remove(), wrap(String)remove()remove()wrap(String)wrap(String)replaceWith public void replaceWith​(Node in) Replace this node in the DOM with the supplied node. Parameters: in - the node that will will replace the existing node.replaceWith public void replaceWith​(Node in) Replace this node in the DOM with the supplied node. Parameters: in - the node that will will replace the existing node.replaceWithpublic void replaceWith​(Node in)NodeReplace this node in the DOM with the supplied node.Parameters: in - the node that will will replace the existing node.Parameters:Parameters:in - the node that will will replace the existing node.insetParentNode protected void setParentNode​(Node parentNode)setParentNode protected void setParentNode​(Node parentNode)setParentNodeprotected void setParentNode​(Node parentNode)NodereplaceChild protected void replaceChild​(Node out, Node in)replaceChild protected void replaceChild​(Node out, Node in)replaceChildprotected void replaceChild​(Node out, Node in)NodeNoderemoveChild protected void removeChild​(Node out)removeChild protected void removeChild​(Node out)removeChildprotected void removeChild​(Node out)NodeaddChildren protected void addChildren​(Node... children)addChildren protected void addChildren​(Node... children)addChildrenprotected void addChildren​(Node... children)NodeaddChildren protected void addChildren​(int index, Node... children)addChildren protected void addChildren​(int index, Node... children)addChildrenprotected void addChildren​(int index, Node... children)NodereparentChild protected void reparentChild​(Node child)reparentChild protected void reparentChild​(Node child)reparentChildprotected void reparentChild​(Node child)NodesiblingNodes public List<Node> siblingNodes​() Retrieves this node's sibling nodes. Similar to node.parent.childNodes(), but does not include this node (a node is not a sibling of itself). Returns: node siblings. If the node has no parent, returns an empty list.siblingNodes public List<Node> siblingNodes​() Retrieves this node's sibling nodes. Similar to node.parent.childNodes(), but does not include this node (a node is not a sibling of itself). Returns: node siblings. If the node has no parent, returns an empty list.siblingNodespublic List<Node> siblingNodes​()ListNodeRetrieves this node's sibling nodes. Similar to node.parent.childNodes(), but does not include this node (a node is not a sibling of itself).node.parent.childNodes()node.parent.childNodes()Returns: node siblings. If the node has no parent, returns an empty list.Returns:Returns:node siblings. If the node has no parent, returns an empty list.nextSibling public Node nextSibling​() Get this node's next sibling. Returns: next sibling, or null if this is the last siblingnextSibling public Node nextSibling​() Get this node's next sibling. Returns: next sibling, or null if this is the last siblingnextSiblingpublic Node nextSibling​()NodeGet this node's next sibling.Returns: next sibling, or null if this is the last siblingReturns:Returns:next sibling, or null if this is the last siblingpreviousSibling public Node previousSibling​() Get this node's previous sibling. Returns: the previous sibling, or null if this is the first siblingpreviousSibling public Node previousSibling​() Get this node's previous sibling. Returns: the previous sibling, or null if this is the first siblingpreviousSiblingpublic Node previousSibling​()NodeGet this node's previous sibling.Returns: the previous sibling, or null if this is the first siblingReturns:Returns:the previous sibling, or null if this is the first siblingsiblingIndex public int siblingIndex​() Get the list index of this node in its node sibling list. I.e. if this is the first node sibling, returns 0. Returns: position in node sibling list See Also: Element.elementSiblingIndex()siblingIndex public int siblingIndex​() Get the list index of this node in its node sibling list. I.e. if this is the first node sibling, returns 0. Returns: position in node sibling list See Also: Element.elementSiblingIndex()siblingIndexpublic int siblingIndex​()Get the list index of this node in its node sibling list. I.e. if this is the first node sibling, returns 0.Returns: position in node sibling list See Also: Element.elementSiblingIndex()Returns:Returns:position in node sibling listSee Also:See Also:Element.elementSiblingIndex()Element.elementSiblingIndex()Element.elementSiblingIndex()setSiblingIndex protected void setSiblingIndex​(int siblingIndex)setSiblingIndex protected void setSiblingIndex​(int siblingIndex)setSiblingIndexprotected void setSiblingIndex​(int siblingIndex)traverse public Node traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants. Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this node, for chainingtraverse public Node traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal through this node and its descendants. Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this node, for chainingtraversepublic Node traverse​(NodeVisitor nodeVisitor)NodeNodeVisitorPerform a depth-first traversal through this node and its descendants.Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this node, for chainingParameters:Parameters:nodeVisitor - the visitor callbacks to perform on each nodenodeVisitorReturns:Returns:this node, for chainingfilter public Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants. Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this node, for chainingfilter public Node filter​(NodeFilter nodeFilter) Perform a depth-first filtering through this node and its descendants. Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this node, for chainingfilterpublic Node filter​(NodeFilter nodeFilter)NodeNodeFilterPerform a depth-first filtering through this node and its descendants.Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this node, for chainingParameters:Parameters:nodeFilter - the filter callbacks to perform on each nodenodeFilterReturns:Returns:this node, for chainingouterHtml public String outerHtml​() Get the outer HTML of this node. Returns: HTMLouterHtml public String outerHtml​() Get the outer HTML of this node. Returns: HTMLouterHtmlpublic String outerHtml​()StringGet the outer HTML of this node.Returns: HTMLReturns:Returns:HTMLouterHtml protected void outerHtml​(Appendable accum)outerHtml protected void outerHtml​(Appendable accum)outerHtmlprotected void outerHtml​(Appendable accum)Appendablehtml public <T extends Appendable> T html​(T appendable) Write this node and its children to the given Appendable. Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining.html public <T extends Appendable> T html​(T appendable) Write this node and its children to the given Appendable. Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining.htmlpublic <T extends Appendable> T html​(T appendable)AppendableWrite this node and its children to the given Appendable.AppendableAppendableParameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining.Parameters:Parameters:appendable - the Appendable to write to.appendableAppendableAppendableReturns:Returns:the supplied Appendable, for chaining.AppendableAppendabletoString public String toString​() Overrides: toString in class ObjecttoString public String toString​() Overrides: toString in class ObjecttoStringpublic String toString​()StringOverrides: toString in class ObjectOverrides:Overrides:toString in class ObjecttoStringtoStringObjectObjectindent protected void indent​(Appendable accum, int depth, Document.OutputSettings out) throws IOException Throws: IOExceptionindent protected void indent​(Appendable accum, int depth, Document.OutputSettings out) throws IOException Throws: IOExceptionindentprotected void indent​(Appendable accum, int depth, Document.OutputSettings out) throws IOExceptionAppendableDocument.OutputSettingsIOExceptionThrows: IOExceptionThrows:Throws:IOExceptionIOExceptionIOExceptionequals public boolean equals​(Object o) Check if this node is the same instance of another (object identity test). Overrides: equals in class Object Parameters: o - other object to compare to Returns: true if the content of this node is the same as the other See Also: to compare nodes by their valueequals public boolean equals​(Object o) Check if this node is the same instance of another (object identity test). Overrides: equals in class Object Parameters: o - other object to compare to Returns: true if the content of this node is the same as the other See Also: to compare nodes by their valueequalspublic boolean equals​(Object o)ObjectCheck if this node is the same instance of another (object identity test).Overrides: equals in class Object Parameters: o - other object to compare to Returns: true if the content of this node is the same as the other See Also: to compare nodes by their valueOverrides:Overrides:equals in class ObjectequalsequalsObjectObjectParameters:Parameters:o - other object to compare tooReturns:Returns:true if the content of this node is the same as the otherSee Also:See Also:to compare nodes by their valueto compare nodes by their valueto compare nodes by their valuehasSameValue public boolean hasSameValue​(Object o) Check if this node is has the same content as another node. A node is considered the same if its name, attributes and content match the other node; particularly its position in the tree does not influence its similarity. Parameters: o - other object to compare to Returns: true if the content of this node is the same as the otherhasSameValue public boolean hasSameValue​(Object o) Check if this node is has the same content as another node. A node is considered the same if its name, attributes and content match the other node; particularly its position in the tree does not influence its similarity. Parameters: o - other object to compare to Returns: true if the content of this node is the same as the otherhasSameValuepublic boolean hasSameValue​(Object o)ObjectCheck if this node is has the same content as another node. A node is considered the same if its name, attributes and content match the other node; particularly its position in the tree does not influence its similarity.Parameters: o - other object to compare to Returns: true if the content of this node is the same as the otherParameters:Parameters:o - other object to compare tooReturns:Returns:true if the content of this node is the same as the otherclone public Node clone​() Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using Element.appendChild(Node). Overrides: clone in class Object Returns: a stand-alone cloned node, including clones of any children See Also: shallowClone()clone public Node clone​() Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using Element.appendChild(Node). Overrides: clone in class Object Returns: a stand-alone cloned node, including clones of any children See Also: shallowClone()clonepublic Node clone​()NodeCreate a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using Element.appendChild(Node).The cloned node may be adopted into another Document or node structure using Element.appendChild(Node).Element.appendChild(Node)Element.appendChild(Node)Overrides: clone in class Object Returns: a stand-alone cloned node, including clones of any children See Also: shallowClone()Overrides:Overrides:clone in class ObjectclonecloneObjectObjectReturns:Returns:a stand-alone cloned node, including clones of any childrenSee Also:See Also:shallowClone()shallowClone()shallowClone()shallowClone public Node shallowClone​() Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes. Returns: a single independent copy of this node See Also: clone()shallowClone public Node shallowClone​() Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes. Returns: a single independent copy of this node See Also: clone()shallowClonepublic Node shallowClone​()NodeCreate a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes.Returns: a single independent copy of this node See Also: clone()Returns:Returns:a single independent copy of this nodeSee Also:See Also:clone()clone()clone()doClone protected Node doClone​(Node parent)doClone protected Node doClone​(Node parent)doCloneprotected Node doClone​(Node parent)NodeNodeSkip navigation links Overview Package Class Use Tree Deprecated Index HelpSkip navigation linksSkip navigation linksOverview Package Class Use Tree Deprecated Index HelpOverviewOverviewPackagePackageClassUseUseTreeTreeDeprecatedDeprecatedIndexIndexHelpHelpPrev Class Next Class Frames No Frames All Classes <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodPrev Class Next ClassPrev ClassPrev ClassPrev ClassNext ClassNext ClassNext ClassFrames No FramesFramesFramesNo FramesNo FramesAll ClassesAll ClassesAll Classes<div> JavaScript is disabled on your browser. </div><div> JavaScript is disabled on your browser. </div>Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSummary: Nested | Field | Constr | MethodSummary:Nested |Field |Constr |ConstrMethodMethodDetail: Field | Constr | MethodDetail:Field |Constr |ConstrMethodMethodCopyright © 2009–2017 Jonathan Hedley. All rights reserved.Copyright © 2009–2017 Jonathan Hedley. All rights reserved.Jonathan Hedley