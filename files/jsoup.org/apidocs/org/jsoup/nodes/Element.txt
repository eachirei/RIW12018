<div> JavaScript is disabled on your browser. </div> Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | Method Package org.jsoup.nodes Class Element java.lang.Object org.jsoup.nodes.Node org.jsoup.nodes.Element All Implemented Interfaces: Cloneable Direct Known Subclasses: Document, FormElement, PseudoTextElement public class Element extends Node A HTML element consists of a tag name, attributes, and child nodes (including text nodes and other elements). From an Element, you can extract data, traverse the node graph, and manipulate the HTML. Author: Jonathan Hedley, jonathan@hedley.net Constructor Summary Constructors Constructor Description Element​(String tag) Create a new, standalone element. Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI. Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element. Method Summary All Methods Instance Methods Concrete Methods Modifier and Type Method Description Element addClass​(String className) Add a class name to this element's class attribute. Element after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling). Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling). Element append​(String html) Add inner HTML to this element. Element appendChild​(Node child) Add a node child node to this element. Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child. Element appendText​(String text) Create and append a new TextNode to this element. Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child. Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element. Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element. Attributes attributes​() Get all of the element's attributes. String baseUri​() Get the base URI of this node. Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling). Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling). Element child​(int index) Get a child element of this element, by its 0-based index number. int childNodeSize​() Get the number of child nodes that this node holds. Elements children​() Get this element's child elements. String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated. Set<String> classNames​() Get all of the element's class names. Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names. Element clone​() Create a stand-alone, deep copy of this node, and all of its children. String cssSelector​() Get a CSS selector that will uniquely select this element. String data​() Get the combined data of this element. List<DataNode> dataNodes​() Get this element's child data nodes. Map<String,String> dataset​() Get this element's HTML5 custom data attributes. protected Element doClone​(Node parent) protected void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. int elementSiblingIndex​() Get the list index of this element in its element sibling list. Element empty​() Remove all of the element's child nodes. protected List<Node> ensureChildNodes​() Element firstElementSibling​() Gets the first element sibling of this element. Elements getAllElements​() Find all elements under this element (including self, and children of children). Element getElementById​(String id) Find an element by ID, including or under this element. Elements getElementsByAttribute​(String key) Find elements that have a named attribute set. Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix. Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value. Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string. Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix. Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression. Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression. Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value. Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix. Elements getElementsByClass​(String className) Find elements that have this class, including or under this element. Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index. Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index. Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index. Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name. Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string. Elements getElementsContainingText​(String searchText) Find elements that contain the specified string. Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression. Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression. Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression. Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression. protected boolean hasAttributes​() Check if this Node has an actual Attributes object. boolean hasClass​(String className) Tests if this element has a class. boolean hasText​() Test if this element has any text content (that is not just whitespace). String html​() Retrieves the element's inner HTML. Element html​(String html) Set this element's inner HTML. <T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable. String id​() Get the id attribute of this element. Element insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index. Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index. boolean is​(String cssQuery) Check if this element matches the given Selector CSS query. boolean is​(Evaluator evaluator) Check if this element matches the given evaluator. boolean isBlock​() Test if this element is a block-level element. Element lastElementSibling​() Gets the last element sibling of this element Element nextElementSibling​() Gets the next sibling element of this element. String nodeName​() Get the node name of this node. String ownText​() Gets the text owned by this element only; does not get the combined text of all children. Element parent​() Gets this node's parent node. Elements parents​() Get this element's parent and ancestors, up to the document root. Element prepend​(String html) Add inner HTML into this element. Element prependChild​(Node child) Add a node to the start of this element's children. Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child. Element prependText​(String text) Create and prepend a new TextNode to this element. Element previousElementSibling​() Gets the previous element sibling of this element. Element removeClass​(String className) Remove a class name from this element's class attribute. Elements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context. Element selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context. Element shallowClone​() Create a stand-alone, shallow copy of this node. Elements siblingElements​() Get sibling elements. Tag tag​() Get the Tag for this element. String tagName​() Get the name of the tag for this element. Element tagName​(String tagName) Change the tag of this element. String text​() Gets the combined text of this element and all its children. Element text​(String text) Set the text of this element. List<TextNode> textNodes​() Get this element's child text nodes. Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it. String toString​() String val​() Get the value of a form element (input, textarea, etc). Element val​(String value) Set the value of a form element (input, textarea, etc). String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original. Element wrap​(String html) Wrap the supplied HTML around this element. Methods inherited from class org.jsoup.nodes.Node absUrl, addChildren, addChildren, attr, childNode, childNodes, childNodesAsArray, childNodesCopy, clearAttributes, equals, filter, hasAttr, hasParent, hasSameValue, indent, nextSibling, outerHtml, outerHtml, ownerDocument, parentNode, previousSibling, remove, removeAttr, removeChild, reparentChild, replaceChild, replaceWith, root, setBaseUri, setParentNode, setSiblingIndex, siblingIndex, siblingNodes, traverse, unwrap Methods inherited from class java.lang.Object finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait Constructor Detail Element public Element​(String tag) Create a new, standalone element. Parameters: tag - tag name Element public Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element. (Standalone in that is has no parent.) Parameters: tag - tag of this element baseUri - the base URI attributes - initial attributes See Also: appendChild(Node), appendElement(String) Element public Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI. Parameters: tag - element tag baseUri - the base URI of this element. It is acceptable for the base URI to be an empty string, but not null. See Also: Tag.valueOf(String, ParseSettings) Method Detail ensureChildNodes protected List<Node> ensureChildNodes​() Specified by: ensureChildNodes in class Node hasAttributes protected boolean hasAttributes​() Description copied from class: Node Check if this Node has an actual Attributes object. Specified by: hasAttributes in class Node attributes public Attributes attributes​() Description copied from class: Node Get all of the element's attributes. Specified by: attributes in class Node Returns: attributes (which implements iterable, in same order as presented in original HTML). baseUri public String baseUri​() Description copied from class: Node Get the base URI of this node. Specified by: baseUri in class Node Returns: base URI doSetBaseUri protected void doSetBaseUri​(String baseUri) Description copied from class: Node Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. Specified by: doSetBaseUri in class Node Parameters: baseUri - new URI childNodeSize public int childNodeSize​() Description copied from class: Node Get the number of child nodes that this node holds. Specified by: childNodeSize in class Node Returns: the number of child nodes that this node holds. nodeName public String nodeName​() Description copied from class: Node Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). Specified by: nodeName in class Node Returns: node name tagName public String tagName​() Get the name of the tag for this element. E.g. div Returns: the tag name tagName public Element tagName​(String tagName) Change the tag of this element. For example, convert a <span> to a <div> with el.tagName("div");. Parameters: tagName - new tag name for this element Returns: this element, for chaining tag public Tag tag​() Get the Tag for this element. Returns: the tag object isBlock public boolean isBlock​() Test if this element is a block-level element. (E.g. <div> == true or an inline element <p> == false). Returns: true if block, false if not (and thus inline) id public String id​() Get the id attribute of this element. Returns: The id attribute, if present, or an empty string if not. attr public Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element. If this element already has an attribute with the key, its value is updated; otherwise, a new attribute is added. Overrides: attr in class Node Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this element attr public Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element. Setting to true sets the attribute value to "" and marks the attribute as boolean so no value is written out. Setting to false removes the attribute with the same key if it exists. Parameters: attributeKey - the attribute key attributeValue - the attribute value Returns: this element dataset public Map<String,String> dataset​() Get this element's HTML5 custom data attributes. Each attribute in the element that has a key starting with "data-" is included the dataset. E.g., the element <div data-package="jsoup" data-language="Java" class="group">... has the dataset package=jsoup, language=java. This map is a filtered view of the element's attribute map. Changes to one map (add, remove, update) are reflected in the other map. You can find elements that have data attributes using the [^data-] attribute key prefix selector. Returns: a map of key=value custom data attributes. parent public final Element parent​() Description copied from class: Node Gets this node's parent node. Overrides: parent in class Node Returns: parent node; or null if no parent. parents public Elements parents​() Get this element's parent and ancestors, up to the document root. Returns: this element's stack of parents, closest first. child public Element child​(int index) Get a child element of this element, by its 0-based index number. Note that an element can have both mixed Nodes and Elements as children. This method inspects a filtered list of children that are elements, and the index is based on that filtered list. Parameters: index - the index number of the element to retrieve Returns: the child element, if it exists, otherwise throws an IndexOutOfBoundsException See Also: Node.childNode(int) children public Elements children​() Get this element's child elements. This is effectively a filter on Node.childNodes() to get Element nodes. Returns: child elements. If this element has no children, returns an empty list. See Also: Node.childNodes() textNodes public List<TextNode> textNodes​() Get this element's child text nodes. The list is unmodifiable but the text nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Text nodes. Returns: child text nodes. If this element has no text nodes, returns an empty list. For example, with the input HTML: <p>One <span>Two</span> Three <br> Four</p> with the p element selected: p.text() = "One Two Three Four" p.ownText() = "One Three Four" p.children() = Elements[<span>, <br>] p.childNodes() = List<Node>["One ", <span>, " Three ", <br>, " Four"] p.textNodes() = List<TextNode>["One ", " Three ", " Four"] dataNodes public List<DataNode> dataNodes​() Get this element's child data nodes. The list is unmodifiable but the data nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Data nodes. Returns: child data nodes. If this element has no data nodes, returns an empty list. See Also: data() select public Elements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context. Matched elements may include this element, or any of its children. This method is generally more powerful to use than the DOM-type getElementBy* methods, because multiple filters can be combined, e.g.: el.select("a[href]") - finds links (a tags with href attributes) el.select("a[href*=example.com]") - finds links pointing to example.com (loosely) See the query syntax documentation in Selector. Parameters: cssQuery - a Selector CSS-like query Returns: elements that match the query (empty if none match) Throws: Selector.SelectorParseException - (unchecked) on an invalid CSS query. See Also: Selector selectFirst public Element selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context. This is effectively the same as calling element.select(query).first(), but is more efficient as query execution stops on the first hit. Parameters: cssQuery - cssQuery a Selector CSS-like query Returns: the first matching element, or null if there is no match. is public boolean is​(String cssQuery) Check if this element matches the given Selector CSS query. Parameters: cssQuery - a Selector CSS query Returns: if this element matches the query is public boolean is​(Evaluator evaluator) Check if this element matches the given evaluator. Parameters: evaluator - an element evaluator Returns: if this element matches appendChild public Element appendChild​(Node child) Add a node child node to this element. Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements. appendTo public Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child. Parameters: parent - element to which this element will be appended Returns: this element, so that you can continue modifying the element prependChild public Element prependChild​(Node child) Add a node to the start of this element's children. Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements. insertChildren public Element insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first. Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining. insertChildren public Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first. Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining. appendElement public Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child. Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.appendElement("h1").attr("id", "header").text("Welcome"); prependElement public Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child. Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.prependElement("h1").attr("id", "header").text("Welcome"); appendText public Element appendText​(String text) Create and append a new TextNode to this element. Parameters: text - the unencoded text to add Returns: this element prependText public Element prependText​(String text) Create and prepend a new TextNode to this element. Parameters: text - the unencoded text to add Returns: this element append public Element append​(String html) Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children. Parameters: html - HTML to add inside this element, after the existing HTML Returns: this element See Also: html(String) prepend public Element prepend​(String html) Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element's children. Parameters: html - HTML to add inside this element, before the existing HTML Returns: this element See Also: html(String) before public Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling). Overrides: before in class Node Parameters: html - HTML to add before this element Returns: this element, for chaining See Also: after(String) before public Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling). Overrides: before in class Node Parameters: node - to add before this element Returns: this Element, for chaining See Also: after(Node) after public Element after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling). Overrides: after in class Node Parameters: html - HTML to add after this element Returns: this element, for chaining See Also: before(String) after public Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling). Overrides: after in class Node Parameters: node - to add after this element Returns: this element, for chaining See Also: before(Node) empty public Element empty​() Remove all of the element's child nodes. Any attributes are left as-is. Returns: this element wrap public Element wrap​(String html) Wrap the supplied HTML around this element. Overrides: wrap in class Node Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this element, for chaining. cssSelector public String cssSelector​() Get a CSS selector that will uniquely select this element. If the element has an ID, returns #id; otherwise returns the parent (if any) CSS selector, followed by '>', followed by a unique selector for the element (tag.class.class:nth-child(n)). Returns: the CSS Path that can be used to retrieve the element in a selector. siblingElements public Elements siblingElements​() Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling of itself, so will not be included in the returned list. Returns: sibling elements nextElementSibling public Element nextElementSibling​() Gets the next sibling element of this element. E.g., if a div contains two ps, the nextElementSibling of the first p is the second p. This is similar to Node.nextSibling(), but specifically finds only Elements Returns: the next element, or null if there is no next element See Also: previousElementSibling() previousElementSibling public Element previousElementSibling​() Gets the previous element sibling of this element. Returns: the previous element, or null if there is no previous element See Also: nextElementSibling() firstElementSibling public Element firstElementSibling​() Gets the first element sibling of this element. Returns: the first sibling that is an element (aka the parent's first element child) elementSiblingIndex public int elementSiblingIndex​() Get the list index of this element in its element sibling list. I.e. if this is the first element sibling, returns 0. Returns: position in element sibling list lastElementSibling public Element lastElementSibling​() Gets the last element sibling of this element Returns: the last sibling that is an element (aka the parent's last element child) getElementsByTag public Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name. Parameters: tagName - The tag name to search for (case insensitively). Returns: a matching unmodifiable list of elements. Will be empty if this element and none of its children match. getElementById public Element getElementById​(String id) Find an element by ID, including or under this element. Note that this finds the first matching ID, starting with this element. If you search down from a different starting point, it is possible to find a different element by ID. For unique element by ID within a Document, use getElementById(String) Parameters: id - The ID to search for. Returns: The first matching element by ID, starting with this element, or null if none found. getElementsByClass public Elements getElementsByClass​(String className) Find elements that have this class, including or under this element. Case insensitive. Elements can have multiple classes (e.g. <div class="header round first">. This method checks each class, so you can find the above with el.getElementsByClass("header");. Parameters: className - the name of the class to search for. Returns: elements with the supplied class name, empty if none See Also: hasClass(String), classNames() getElementsByAttribute public Elements getElementsByAttribute​(String key) Find elements that have a named attribute set. Case insensitive. Parameters: key - name of the attribute, e.g. href Returns: elements that have this attribute, empty if none getElementsByAttributeStarting public Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix. Use data- to find elements that have HTML5 datasets. Parameters: keyPrefix - name prefix of the attribute e.g. data- Returns: elements that have attribute names that start with with the prefix, empty if none. getElementsByAttributeValue public Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value. Case insensitive. Parameters: key - name of the attribute value - value of the attribute Returns: elements that have this attribute with this value, empty if none getElementsByAttributeValueNot public Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value. Case insensitive. Parameters: key - name of the attribute value - value of the attribute Returns: elements that do not have a matching attribute getElementsByAttributeValueStarting public Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix. Case insensitive. Parameters: key - name of the attribute valuePrefix - start of attribute value Returns: elements that have attributes that start with the value prefix getElementsByAttributeValueEnding public Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix. Case insensitive. Parameters: key - name of the attribute valueSuffix - end of the attribute value Returns: elements that have attributes that end with the value suffix getElementsByAttributeValueContaining public Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string. Case insensitive. Parameters: key - name of the attribute match - substring of value to search for Returns: elements that have attributes containing this text getElementsByAttributeValueMatching public Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression. Parameters: key - name of the attribute pattern - compiled regular expression to match against attribute values Returns: elements that have attributes matching this regular expression getElementsByAttributeValueMatching public Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression. Parameters: key - name of the attribute regex - regular expression to match against attribute values. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements that have attributes matching this regular expression getElementsByIndexLessThan public Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index. Parameters: index - 0-based index Returns: elements less than index getElementsByIndexGreaterThan public Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index. Parameters: index - 0-based index Returns: elements greater than index getElementsByIndexEquals public Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index. Parameters: index - 0-based index Returns: elements equal to index getElementsContainingText public Elements getElementsContainingText​(String searchText) Find elements that contain the specified string. The search is case insensitive. The text may appear directly in the element, or in any of its descendants. Parameters: searchText - to look for in the element's text Returns: elements that contain the string, case insensitive. See Also: text() getElementsContainingOwnText public Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly in the element, not in any of its descendants. Parameters: searchText - to look for in the element's own text Returns: elements that contain the string, case insensitive. See Also: ownText() getElementsMatchingText public Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression. Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: text() getElementsMatchingText public Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression. Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: text() getElementsMatchingOwnText public Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression. Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: ownText() getElementsMatchingOwnText public Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression. Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: ownText() getAllElements public Elements getAllElements​() Find all elements under this element (including self, and children of children). Returns: all elements text public String text​() Gets the combined text of this element and all its children. Whitespace is normalized and trimmed. For example, given HTML <p>Hello <b>there</b> now! </p>, p.text() returns "Hello there now!" Returns: unencoded, normalized text, or empty string if none. See Also: if you don't want the text to be normalized., ownText(), textNodes() wholeText public String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original. Returns: unencoded, un-normalized text See Also: text() ownText public String ownText​() Gets the text owned by this element only; does not get the combined text of all children. For example, given HTML <p>Hello <b>there</b> now!</p>, p.ownText() returns "Hello now!", whereas p.text() returns "Hello there now!". Note that the text within the b element is not returned, as it is not a direct child of the p element. Returns: unencoded text, or empty string if none. See Also: text(), textNodes() text public Element text​(String text) Set the text of this element. Any existing contents (text or elements) will be cleared Parameters: text - unencoded text Returns: this element hasText public boolean hasText​() Test if this element has any text content (that is not just whitespace). Returns: true if element has non-blank text content. data public String data​() Get the combined data of this element. Data is e.g. the inside of a script tag. Note that data is NOT the text of the element. Use text() to get the text that would be visible to a user, and data() for the contents of scripts, comments, CSS styles, etc. Returns: the data, or empty string if none See Also: dataNodes() className public String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated. (E.g. on <div class="header gray"> returns, " header gray") Returns: The literal class attribute, or empty string if no class attribute set. classNames public Set<String> classNames​() Get all of the element's class names. E.g. on element <div class="header gray">, returns a set of two elements "header", "gray". Note that modifications to this set are not pushed to the backing class attribute; use the classNames(java.util.Set) method to persist them. Returns: set of classnames, empty if no class attribute classNames public Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names. Parameters: classNames - set of classes Returns: this element, for chaining hasClass public boolean hasClass​(String className) Tests if this element has a class. Case insensitive. Parameters: className - name of class to check for Returns: true if it does, false if not addClass public Element addClass​(String className) Add a class name to this element's class attribute. Parameters: className - class name to add Returns: this element removeClass public Element removeClass​(String className) Remove a class name from this element's class attribute. Parameters: className - class name to remove Returns: this element toggleClass public Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it. Parameters: className - class name to toggle Returns: this element val public String val​() Get the value of a form element (input, textarea, etc). Returns: the value of the form element, or empty string if not set. val public Element val​(String value) Set the value of a form element (input, textarea, etc). Parameters: value - value to set Returns: this element (for chaining) html public String html​() Retrieves the element's inner HTML. E.g. on a <div> with one empty <p>, would return <p></p>. (Whereas Node.outerHtml() would return <div><p></p></div>.) Returns: String of HTML. See Also: Node.outerHtml() html public <T extends Appendable> T html​(T appendable) Write this node and its children to the given Appendable. Overrides: html in class Node Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining. html public Element html​(String html) Set this element's inner HTML. Clears the existing HTML first. Parameters: html - HTML to parse and set into this element Returns: this element See Also: append(String) toString public String toString​() Overrides: toString in class Node clone public Element clone​() Description copied from class: Node Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using appendChild(Node). Overrides: clone in class Node Returns: a stand-alone cloned node, including clones of any children See Also: Node.shallowClone() shallowClone public Element shallowClone​() Description copied from class: Node Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes. Overrides: shallowClone in class Node Returns: a single independent copy of this node See Also: Node.clone() doClone protected Element doClone​(Node parent) Overrides: doClone in class Node Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | Method Copyright © 2009–2017 Jonathan Hedley. All rights reserved.<div> JavaScript is disabled on your browser. </div>Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSkip navigation links Overview Package Class Use Tree Deprecated Index HelpSkip navigation linksSkip navigation linksOverview Package Class Use Tree Deprecated Index HelpOverviewOverviewPackagePackageClassUseUseTreeTreeDeprecatedDeprecatedIndexIndexHelpHelpPrev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodPrev Class Next ClassPrev ClassPrev ClassPrev ClassNext ClassNext ClassNext ClassFrames No FramesFramesFramesNo FramesNo FramesAll ClassesAll ClassesAll ClassesSEARCH:SEARCH:SEARCH:<div> JavaScript is disabled on your browser. </div><div> JavaScript is disabled on your browser. </div>Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSummary: Nested | Field | Constr | MethodSummary:Nested |Field |Constr |ConstrMethodMethodDetail: Field | Constr | MethodDetail:Field |Constr |ConstrMethodMethodPackage org.jsoup.nodes Class ElementPackage org.jsoup.nodesPackageorg.jsoup.nodesClass Elementjava.lang.Object org.jsoup.nodes.Node org.jsoup.nodes.Element All Implemented Interfaces: Cloneable Direct Known Subclasses: Document, FormElement, PseudoTextElement public class Element extends Node A HTML element consists of a tag name, attributes, and child nodes (including text nodes and other elements). From an Element, you can extract data, traverse the node graph, and manipulate the HTML. Author: Jonathan Hedley, jonathan@hedley.net Constructor Summary Constructors Constructor Description Element​(String tag) Create a new, standalone element. Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI. Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element. Method Summary All Methods Instance Methods Concrete Methods Modifier and Type Method Description Element addClass​(String className) Add a class name to this element's class attribute. Element after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling). Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling). Element append​(String html) Add inner HTML to this element. Element appendChild​(Node child) Add a node child node to this element. Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child. Element appendText​(String text) Create and append a new TextNode to this element. Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child. Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element. Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element. Attributes attributes​() Get all of the element's attributes. String baseUri​() Get the base URI of this node. Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling). Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling). Element child​(int index) Get a child element of this element, by its 0-based index number. int childNodeSize​() Get the number of child nodes that this node holds. Elements children​() Get this element's child elements. String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated. Set<String> classNames​() Get all of the element's class names. Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names. Element clone​() Create a stand-alone, deep copy of this node, and all of its children. String cssSelector​() Get a CSS selector that will uniquely select this element. String data​() Get the combined data of this element. List<DataNode> dataNodes​() Get this element's child data nodes. Map<String,String> dataset​() Get this element's HTML5 custom data attributes. protected Element doClone​(Node parent) protected void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. int elementSiblingIndex​() Get the list index of this element in its element sibling list. Element empty​() Remove all of the element's child nodes. protected List<Node> ensureChildNodes​() Element firstElementSibling​() Gets the first element sibling of this element. Elements getAllElements​() Find all elements under this element (including self, and children of children). Element getElementById​(String id) Find an element by ID, including or under this element. Elements getElementsByAttribute​(String key) Find elements that have a named attribute set. Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix. Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value. Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string. Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix. Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression. Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression. Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value. Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix. Elements getElementsByClass​(String className) Find elements that have this class, including or under this element. Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index. Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index. Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index. Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name. Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string. Elements getElementsContainingText​(String searchText) Find elements that contain the specified string. Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression. Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression. Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression. Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression. protected boolean hasAttributes​() Check if this Node has an actual Attributes object. boolean hasClass​(String className) Tests if this element has a class. boolean hasText​() Test if this element has any text content (that is not just whitespace). String html​() Retrieves the element's inner HTML. Element html​(String html) Set this element's inner HTML. <T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable. String id​() Get the id attribute of this element. Element insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index. Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index. boolean is​(String cssQuery) Check if this element matches the given Selector CSS query. boolean is​(Evaluator evaluator) Check if this element matches the given evaluator. boolean isBlock​() Test if this element is a block-level element. Element lastElementSibling​() Gets the last element sibling of this element Element nextElementSibling​() Gets the next sibling element of this element. String nodeName​() Get the node name of this node. String ownText​() Gets the text owned by this element only; does not get the combined text of all children. Element parent​() Gets this node's parent node. Elements parents​() Get this element's parent and ancestors, up to the document root. Element prepend​(String html) Add inner HTML into this element. Element prependChild​(Node child) Add a node to the start of this element's children. Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child. Element prependText​(String text) Create and prepend a new TextNode to this element. Element previousElementSibling​() Gets the previous element sibling of this element. Element removeClass​(String className) Remove a class name from this element's class attribute. Elements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context. Element selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context. Element shallowClone​() Create a stand-alone, shallow copy of this node. Elements siblingElements​() Get sibling elements. Tag tag​() Get the Tag for this element. String tagName​() Get the name of the tag for this element. Element tagName​(String tagName) Change the tag of this element. String text​() Gets the combined text of this element and all its children. Element text​(String text) Set the text of this element. List<TextNode> textNodes​() Get this element's child text nodes. Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it. String toString​() String val​() Get the value of a form element (input, textarea, etc). Element val​(String value) Set the value of a form element (input, textarea, etc). String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original. Element wrap​(String html) Wrap the supplied HTML around this element. Methods inherited from class org.jsoup.nodes.Node absUrl, addChildren, addChildren, attr, childNode, childNodes, childNodesAsArray, childNodesCopy, clearAttributes, equals, filter, hasAttr, hasParent, hasSameValue, indent, nextSibling, outerHtml, outerHtml, ownerDocument, parentNode, previousSibling, remove, removeAttr, removeChild, reparentChild, replaceChild, replaceWith, root, setBaseUri, setParentNode, setSiblingIndex, siblingIndex, siblingNodes, traverse, unwrap Methods inherited from class java.lang.Object finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait Constructor Detail Element public Element​(String tag) Create a new, standalone element. Parameters: tag - tag name Element public Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element. (Standalone in that is has no parent.) Parameters: tag - tag of this element baseUri - the base URI attributes - initial attributes See Also: appendChild(Node), appendElement(String) Element public Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI. Parameters: tag - element tag baseUri - the base URI of this element. It is acceptable for the base URI to be an empty string, but not null. See Also: Tag.valueOf(String, ParseSettings) Method Detail ensureChildNodes protected List<Node> ensureChildNodes​() Specified by: ensureChildNodes in class Node hasAttributes protected boolean hasAttributes​() Description copied from class: Node Check if this Node has an actual Attributes object. Specified by: hasAttributes in class Node attributes public Attributes attributes​() Description copied from class: Node Get all of the element's attributes. Specified by: attributes in class Node Returns: attributes (which implements iterable, in same order as presented in original HTML). baseUri public String baseUri​() Description copied from class: Node Get the base URI of this node. Specified by: baseUri in class Node Returns: base URI doSetBaseUri protected void doSetBaseUri​(String baseUri) Description copied from class: Node Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. Specified by: doSetBaseUri in class Node Parameters: baseUri - new URI childNodeSize public int childNodeSize​() Description copied from class: Node Get the number of child nodes that this node holds. Specified by: childNodeSize in class Node Returns: the number of child nodes that this node holds. nodeName public String nodeName​() Description copied from class: Node Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). Specified by: nodeName in class Node Returns: node name tagName public String tagName​() Get the name of the tag for this element. E.g. div Returns: the tag name tagName public Element tagName​(String tagName) Change the tag of this element. For example, convert a <span> to a <div> with el.tagName("div");. Parameters: tagName - new tag name for this element Returns: this element, for chaining tag public Tag tag​() Get the Tag for this element. Returns: the tag object isBlock public boolean isBlock​() Test if this element is a block-level element. (E.g. <div> == true or an inline element <p> == false). Returns: true if block, false if not (and thus inline) id public String id​() Get the id attribute of this element. Returns: The id attribute, if present, or an empty string if not. attr public Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element. If this element already has an attribute with the key, its value is updated; otherwise, a new attribute is added. Overrides: attr in class Node Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this element attr public Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element. Setting to true sets the attribute value to "" and marks the attribute as boolean so no value is written out. Setting to false removes the attribute with the same key if it exists. Parameters: attributeKey - the attribute key attributeValue - the attribute value Returns: this element dataset public Map<String,String> dataset​() Get this element's HTML5 custom data attributes. Each attribute in the element that has a key starting with "data-" is included the dataset. E.g., the element <div data-package="jsoup" data-language="Java" class="group">... has the dataset package=jsoup, language=java. This map is a filtered view of the element's attribute map. Changes to one map (add, remove, update) are reflected in the other map. You can find elements that have data attributes using the [^data-] attribute key prefix selector. Returns: a map of key=value custom data attributes. parent public final Element parent​() Description copied from class: Node Gets this node's parent node. Overrides: parent in class Node Returns: parent node; or null if no parent. parents public Elements parents​() Get this element's parent and ancestors, up to the document root. Returns: this element's stack of parents, closest first. child public Element child​(int index) Get a child element of this element, by its 0-based index number. Note that an element can have both mixed Nodes and Elements as children. This method inspects a filtered list of children that are elements, and the index is based on that filtered list. Parameters: index - the index number of the element to retrieve Returns: the child element, if it exists, otherwise throws an IndexOutOfBoundsException See Also: Node.childNode(int) children public Elements children​() Get this element's child elements. This is effectively a filter on Node.childNodes() to get Element nodes. Returns: child elements. If this element has no children, returns an empty list. See Also: Node.childNodes() textNodes public List<TextNode> textNodes​() Get this element's child text nodes. The list is unmodifiable but the text nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Text nodes. Returns: child text nodes. If this element has no text nodes, returns an empty list. For example, with the input HTML: <p>One <span>Two</span> Three <br> Four</p> with the p element selected: p.text() = "One Two Three Four" p.ownText() = "One Three Four" p.children() = Elements[<span>, <br>] p.childNodes() = List<Node>["One ", <span>, " Three ", <br>, " Four"] p.textNodes() = List<TextNode>["One ", " Three ", " Four"] dataNodes public List<DataNode> dataNodes​() Get this element's child data nodes. The list is unmodifiable but the data nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Data nodes. Returns: child data nodes. If this element has no data nodes, returns an empty list. See Also: data() select public Elements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context. Matched elements may include this element, or any of its children. This method is generally more powerful to use than the DOM-type getElementBy* methods, because multiple filters can be combined, e.g.: el.select("a[href]") - finds links (a tags with href attributes) el.select("a[href*=example.com]") - finds links pointing to example.com (loosely) See the query syntax documentation in Selector. Parameters: cssQuery - a Selector CSS-like query Returns: elements that match the query (empty if none match) Throws: Selector.SelectorParseException - (unchecked) on an invalid CSS query. See Also: Selector selectFirst public Element selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context. This is effectively the same as calling element.select(query).first(), but is more efficient as query execution stops on the first hit. Parameters: cssQuery - cssQuery a Selector CSS-like query Returns: the first matching element, or null if there is no match. is public boolean is​(String cssQuery) Check if this element matches the given Selector CSS query. Parameters: cssQuery - a Selector CSS query Returns: if this element matches the query is public boolean is​(Evaluator evaluator) Check if this element matches the given evaluator. Parameters: evaluator - an element evaluator Returns: if this element matches appendChild public Element appendChild​(Node child) Add a node child node to this element. Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements. appendTo public Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child. Parameters: parent - element to which this element will be appended Returns: this element, so that you can continue modifying the element prependChild public Element prependChild​(Node child) Add a node to the start of this element's children. Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements. insertChildren public Element insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first. Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining. insertChildren public Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first. Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining. appendElement public Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child. Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.appendElement("h1").attr("id", "header").text("Welcome"); prependElement public Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child. Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.prependElement("h1").attr("id", "header").text("Welcome"); appendText public Element appendText​(String text) Create and append a new TextNode to this element. Parameters: text - the unencoded text to add Returns: this element prependText public Element prependText​(String text) Create and prepend a new TextNode to this element. Parameters: text - the unencoded text to add Returns: this element append public Element append​(String html) Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children. Parameters: html - HTML to add inside this element, after the existing HTML Returns: this element See Also: html(String) prepend public Element prepend​(String html) Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element's children. Parameters: html - HTML to add inside this element, before the existing HTML Returns: this element See Also: html(String) before public Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling). Overrides: before in class Node Parameters: html - HTML to add before this element Returns: this element, for chaining See Also: after(String) before public Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling). Overrides: before in class Node Parameters: node - to add before this element Returns: this Element, for chaining See Also: after(Node) after public Element after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling). Overrides: after in class Node Parameters: html - HTML to add after this element Returns: this element, for chaining See Also: before(String) after public Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling). Overrides: after in class Node Parameters: node - to add after this element Returns: this element, for chaining See Also: before(Node) empty public Element empty​() Remove all of the element's child nodes. Any attributes are left as-is. Returns: this element wrap public Element wrap​(String html) Wrap the supplied HTML around this element. Overrides: wrap in class Node Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this element, for chaining. cssSelector public String cssSelector​() Get a CSS selector that will uniquely select this element. If the element has an ID, returns #id; otherwise returns the parent (if any) CSS selector, followed by '>', followed by a unique selector for the element (tag.class.class:nth-child(n)). Returns: the CSS Path that can be used to retrieve the element in a selector. siblingElements public Elements siblingElements​() Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling of itself, so will not be included in the returned list. Returns: sibling elements nextElementSibling public Element nextElementSibling​() Gets the next sibling element of this element. E.g., if a div contains two ps, the nextElementSibling of the first p is the second p. This is similar to Node.nextSibling(), but specifically finds only Elements Returns: the next element, or null if there is no next element See Also: previousElementSibling() previousElementSibling public Element previousElementSibling​() Gets the previous element sibling of this element. Returns: the previous element, or null if there is no previous element See Also: nextElementSibling() firstElementSibling public Element firstElementSibling​() Gets the first element sibling of this element. Returns: the first sibling that is an element (aka the parent's first element child) elementSiblingIndex public int elementSiblingIndex​() Get the list index of this element in its element sibling list. I.e. if this is the first element sibling, returns 0. Returns: position in element sibling list lastElementSibling public Element lastElementSibling​() Gets the last element sibling of this element Returns: the last sibling that is an element (aka the parent's last element child) getElementsByTag public Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name. Parameters: tagName - The tag name to search for (case insensitively). Returns: a matching unmodifiable list of elements. Will be empty if this element and none of its children match. getElementById public Element getElementById​(String id) Find an element by ID, including or under this element. Note that this finds the first matching ID, starting with this element. If you search down from a different starting point, it is possible to find a different element by ID. For unique element by ID within a Document, use getElementById(String) Parameters: id - The ID to search for. Returns: The first matching element by ID, starting with this element, or null if none found. getElementsByClass public Elements getElementsByClass​(String className) Find elements that have this class, including or under this element. Case insensitive. Elements can have multiple classes (e.g. <div class="header round first">. This method checks each class, so you can find the above with el.getElementsByClass("header");. Parameters: className - the name of the class to search for. Returns: elements with the supplied class name, empty if none See Also: hasClass(String), classNames() getElementsByAttribute public Elements getElementsByAttribute​(String key) Find elements that have a named attribute set. Case insensitive. Parameters: key - name of the attribute, e.g. href Returns: elements that have this attribute, empty if none getElementsByAttributeStarting public Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix. Use data- to find elements that have HTML5 datasets. Parameters: keyPrefix - name prefix of the attribute e.g. data- Returns: elements that have attribute names that start with with the prefix, empty if none. getElementsByAttributeValue public Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value. Case insensitive. Parameters: key - name of the attribute value - value of the attribute Returns: elements that have this attribute with this value, empty if none getElementsByAttributeValueNot public Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value. Case insensitive. Parameters: key - name of the attribute value - value of the attribute Returns: elements that do not have a matching attribute getElementsByAttributeValueStarting public Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix. Case insensitive. Parameters: key - name of the attribute valuePrefix - start of attribute value Returns: elements that have attributes that start with the value prefix getElementsByAttributeValueEnding public Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix. Case insensitive. Parameters: key - name of the attribute valueSuffix - end of the attribute value Returns: elements that have attributes that end with the value suffix getElementsByAttributeValueContaining public Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string. Case insensitive. Parameters: key - name of the attribute match - substring of value to search for Returns: elements that have attributes containing this text getElementsByAttributeValueMatching public Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression. Parameters: key - name of the attribute pattern - compiled regular expression to match against attribute values Returns: elements that have attributes matching this regular expression getElementsByAttributeValueMatching public Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression. Parameters: key - name of the attribute regex - regular expression to match against attribute values. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements that have attributes matching this regular expression getElementsByIndexLessThan public Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index. Parameters: index - 0-based index Returns: elements less than index getElementsByIndexGreaterThan public Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index. Parameters: index - 0-based index Returns: elements greater than index getElementsByIndexEquals public Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index. Parameters: index - 0-based index Returns: elements equal to index getElementsContainingText public Elements getElementsContainingText​(String searchText) Find elements that contain the specified string. The search is case insensitive. The text may appear directly in the element, or in any of its descendants. Parameters: searchText - to look for in the element's text Returns: elements that contain the string, case insensitive. See Also: text() getElementsContainingOwnText public Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly in the element, not in any of its descendants. Parameters: searchText - to look for in the element's own text Returns: elements that contain the string, case insensitive. See Also: ownText() getElementsMatchingText public Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression. Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: text() getElementsMatchingText public Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression. Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: text() getElementsMatchingOwnText public Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression. Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: ownText() getElementsMatchingOwnText public Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression. Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: ownText() getAllElements public Elements getAllElements​() Find all elements under this element (including self, and children of children). Returns: all elements text public String text​() Gets the combined text of this element and all its children. Whitespace is normalized and trimmed. For example, given HTML <p>Hello <b>there</b> now! </p>, p.text() returns "Hello there now!" Returns: unencoded, normalized text, or empty string if none. See Also: if you don't want the text to be normalized., ownText(), textNodes() wholeText public String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original. Returns: unencoded, un-normalized text See Also: text() ownText public String ownText​() Gets the text owned by this element only; does not get the combined text of all children. For example, given HTML <p>Hello <b>there</b> now!</p>, p.ownText() returns "Hello now!", whereas p.text() returns "Hello there now!". Note that the text within the b element is not returned, as it is not a direct child of the p element. Returns: unencoded text, or empty string if none. See Also: text(), textNodes() text public Element text​(String text) Set the text of this element. Any existing contents (text or elements) will be cleared Parameters: text - unencoded text Returns: this element hasText public boolean hasText​() Test if this element has any text content (that is not just whitespace). Returns: true if element has non-blank text content. data public String data​() Get the combined data of this element. Data is e.g. the inside of a script tag. Note that data is NOT the text of the element. Use text() to get the text that would be visible to a user, and data() for the contents of scripts, comments, CSS styles, etc. Returns: the data, or empty string if none See Also: dataNodes() className public String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated. (E.g. on <div class="header gray"> returns, " header gray") Returns: The literal class attribute, or empty string if no class attribute set. classNames public Set<String> classNames​() Get all of the element's class names. E.g. on element <div class="header gray">, returns a set of two elements "header", "gray". Note that modifications to this set are not pushed to the backing class attribute; use the classNames(java.util.Set) method to persist them. Returns: set of classnames, empty if no class attribute classNames public Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names. Parameters: classNames - set of classes Returns: this element, for chaining hasClass public boolean hasClass​(String className) Tests if this element has a class. Case insensitive. Parameters: className - name of class to check for Returns: true if it does, false if not addClass public Element addClass​(String className) Add a class name to this element's class attribute. Parameters: className - class name to add Returns: this element removeClass public Element removeClass​(String className) Remove a class name from this element's class attribute. Parameters: className - class name to remove Returns: this element toggleClass public Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it. Parameters: className - class name to toggle Returns: this element val public String val​() Get the value of a form element (input, textarea, etc). Returns: the value of the form element, or empty string if not set. val public Element val​(String value) Set the value of a form element (input, textarea, etc). Parameters: value - value to set Returns: this element (for chaining) html public String html​() Retrieves the element's inner HTML. E.g. on a <div> with one empty <p>, would return <p></p>. (Whereas Node.outerHtml() would return <div><p></p></div>.) Returns: String of HTML. See Also: Node.outerHtml() html public <T extends Appendable> T html​(T appendable) Write this node and its children to the given Appendable. Overrides: html in class Node Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining. html public Element html​(String html) Set this element's inner HTML. Clears the existing HTML first. Parameters: html - HTML to parse and set into this element Returns: this element See Also: append(String) toString public String toString​() Overrides: toString in class Node clone public Element clone​() Description copied from class: Node Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using appendChild(Node). Overrides: clone in class Node Returns: a stand-alone cloned node, including clones of any children See Also: Node.shallowClone() shallowClone public Element shallowClone​() Description copied from class: Node Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes. Overrides: shallowClone in class Node Returns: a single independent copy of this node See Also: Node.clone() doClone protected Element doClone​(Node parent) Overrides: doClone in class Nodejava.lang.Object org.jsoup.nodes.Node org.jsoup.nodes.Elementjava.lang.Objectjava.lang.Objectorg.jsoup.nodes.Node org.jsoup.nodes.Elementorg.jsoup.nodes.Node org.jsoup.nodes.Elementorg.jsoup.nodes.Nodeorg.jsoup.nodes.Nodeorg.jsoup.nodes.Elementorg.jsoup.nodes.Elementorg.jsoup.nodes.ElementAll Implemented Interfaces: Cloneable Direct Known Subclasses: Document, FormElement, PseudoTextElement public class Element extends Node A HTML element consists of a tag name, attributes, and child nodes (including text nodes and other elements). From an Element, you can extract data, traverse the node graph, and manipulate the HTML. Author: Jonathan Hedley, jonathan@hedley.netAll Implemented Interfaces: Cloneable Direct Known Subclasses: Document, FormElement, PseudoTextElement public class Element extends Node A HTML element consists of a tag name, attributes, and child nodes (including text nodes and other elements). From an Element, you can extract data, traverse the node graph, and manipulate the HTML. Author: Jonathan Hedley, jonathan@hedley.netAll Implemented Interfaces: Cloneable Direct Known Subclasses: Document, FormElement, PseudoTextElement public class Element extends Node A HTML element consists of a tag name, attributes, and child nodes (including text nodes and other elements). From an Element, you can extract data, traverse the node graph, and manipulate the HTML. Author: Jonathan Hedley, jonathan@hedley.netAll Implemented Interfaces: CloneableAll Implemented Interfaces:CloneableCloneableCloneableDirect Known Subclasses: Document, FormElement, PseudoTextElementDirect Known Subclasses:Document, FormElement, PseudoTextElementDocumentDocumentFormElementFormElementPseudoTextElementPseudoTextElementpublic class Element extends NodeElementNodeA HTML element consists of a tag name, attributes, and child nodes (including text nodes and other elements). From an Element, you can extract data, traverse the node graph, and manipulate the HTML.Author: Jonathan Hedley, jonathan@hedley.netAuthor:Author:Jonathan Hedley, jonathan@hedley.netConstructor Summary Constructors Constructor Description Element​(String tag) Create a new, standalone element. Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI. Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element. Method Summary All Methods Instance Methods Concrete Methods Modifier and Type Method Description Element addClass​(String className) Add a class name to this element's class attribute. Element after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling). Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling). Element append​(String html) Add inner HTML to this element. Element appendChild​(Node child) Add a node child node to this element. Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child. Element appendText​(String text) Create and append a new TextNode to this element. Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child. Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element. Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element. Attributes attributes​() Get all of the element's attributes. String baseUri​() Get the base URI of this node. Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling). Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling). Element child​(int index) Get a child element of this element, by its 0-based index number. int childNodeSize​() Get the number of child nodes that this node holds. Elements children​() Get this element's child elements. String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated. Set<String> classNames​() Get all of the element's class names. Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names. Element clone​() Create a stand-alone, deep copy of this node, and all of its children. String cssSelector​() Get a CSS selector that will uniquely select this element. String data​() Get the combined data of this element. List<DataNode> dataNodes​() Get this element's child data nodes. Map<String,String> dataset​() Get this element's HTML5 custom data attributes. protected Element doClone​(Node parent) protected void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. int elementSiblingIndex​() Get the list index of this element in its element sibling list. Element empty​() Remove all of the element's child nodes. protected List<Node> ensureChildNodes​() Element firstElementSibling​() Gets the first element sibling of this element. Elements getAllElements​() Find all elements under this element (including self, and children of children). Element getElementById​(String id) Find an element by ID, including or under this element. Elements getElementsByAttribute​(String key) Find elements that have a named attribute set. Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix. Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value. Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string. Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix. Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression. Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression. Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value. Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix. Elements getElementsByClass​(String className) Find elements that have this class, including or under this element. Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index. Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index. Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index. Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name. Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string. Elements getElementsContainingText​(String searchText) Find elements that contain the specified string. Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression. Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression. Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression. Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression. protected boolean hasAttributes​() Check if this Node has an actual Attributes object. boolean hasClass​(String className) Tests if this element has a class. boolean hasText​() Test if this element has any text content (that is not just whitespace). String html​() Retrieves the element's inner HTML. Element html​(String html) Set this element's inner HTML. <T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable. String id​() Get the id attribute of this element. Element insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index. Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index. boolean is​(String cssQuery) Check if this element matches the given Selector CSS query. boolean is​(Evaluator evaluator) Check if this element matches the given evaluator. boolean isBlock​() Test if this element is a block-level element. Element lastElementSibling​() Gets the last element sibling of this element Element nextElementSibling​() Gets the next sibling element of this element. String nodeName​() Get the node name of this node. String ownText​() Gets the text owned by this element only; does not get the combined text of all children. Element parent​() Gets this node's parent node. Elements parents​() Get this element's parent and ancestors, up to the document root. Element prepend​(String html) Add inner HTML into this element. Element prependChild​(Node child) Add a node to the start of this element's children. Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child. Element prependText​(String text) Create and prepend a new TextNode to this element. Element previousElementSibling​() Gets the previous element sibling of this element. Element removeClass​(String className) Remove a class name from this element's class attribute. Elements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context. Element selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context. Element shallowClone​() Create a stand-alone, shallow copy of this node. Elements siblingElements​() Get sibling elements. Tag tag​() Get the Tag for this element. String tagName​() Get the name of the tag for this element. Element tagName​(String tagName) Change the tag of this element. String text​() Gets the combined text of this element and all its children. Element text​(String text) Set the text of this element. List<TextNode> textNodes​() Get this element's child text nodes. Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it. String toString​() String val​() Get the value of a form element (input, textarea, etc). Element val​(String value) Set the value of a form element (input, textarea, etc). String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original. Element wrap​(String html) Wrap the supplied HTML around this element. Methods inherited from class org.jsoup.nodes.Node absUrl, addChildren, addChildren, attr, childNode, childNodes, childNodesAsArray, childNodesCopy, clearAttributes, equals, filter, hasAttr, hasParent, hasSameValue, indent, nextSibling, outerHtml, outerHtml, ownerDocument, parentNode, previousSibling, remove, removeAttr, removeChild, reparentChild, replaceChild, replaceWith, root, setBaseUri, setParentNode, setSiblingIndex, siblingIndex, siblingNodes, traverse, unwrap Methods inherited from class java.lang.Object finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitConstructor Summary Constructors Constructor Description Element​(String tag) Create a new, standalone element. Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI. Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element. Method Summary All Methods Instance Methods Concrete Methods Modifier and Type Method Description Element addClass​(String className) Add a class name to this element's class attribute. Element after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling). Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling). Element append​(String html) Add inner HTML to this element. Element appendChild​(Node child) Add a node child node to this element. Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child. Element appendText​(String text) Create and append a new TextNode to this element. Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child. Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element. Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element. Attributes attributes​() Get all of the element's attributes. String baseUri​() Get the base URI of this node. Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling). Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling). Element child​(int index) Get a child element of this element, by its 0-based index number. int childNodeSize​() Get the number of child nodes that this node holds. Elements children​() Get this element's child elements. String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated. Set<String> classNames​() Get all of the element's class names. Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names. Element clone​() Create a stand-alone, deep copy of this node, and all of its children. String cssSelector​() Get a CSS selector that will uniquely select this element. String data​() Get the combined data of this element. List<DataNode> dataNodes​() Get this element's child data nodes. Map<String,String> dataset​() Get this element's HTML5 custom data attributes. protected Element doClone​(Node parent) protected void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. int elementSiblingIndex​() Get the list index of this element in its element sibling list. Element empty​() Remove all of the element's child nodes. protected List<Node> ensureChildNodes​() Element firstElementSibling​() Gets the first element sibling of this element. Elements getAllElements​() Find all elements under this element (including self, and children of children). Element getElementById​(String id) Find an element by ID, including or under this element. Elements getElementsByAttribute​(String key) Find elements that have a named attribute set. Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix. Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value. Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string. Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix. Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression. Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression. Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value. Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix. Elements getElementsByClass​(String className) Find elements that have this class, including or under this element. Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index. Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index. Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index. Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name. Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string. Elements getElementsContainingText​(String searchText) Find elements that contain the specified string. Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression. Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression. Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression. Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression. protected boolean hasAttributes​() Check if this Node has an actual Attributes object. boolean hasClass​(String className) Tests if this element has a class. boolean hasText​() Test if this element has any text content (that is not just whitespace). String html​() Retrieves the element's inner HTML. Element html​(String html) Set this element's inner HTML. <T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable. String id​() Get the id attribute of this element. Element insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index. Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index. boolean is​(String cssQuery) Check if this element matches the given Selector CSS query. boolean is​(Evaluator evaluator) Check if this element matches the given evaluator. boolean isBlock​() Test if this element is a block-level element. Element lastElementSibling​() Gets the last element sibling of this element Element nextElementSibling​() Gets the next sibling element of this element. String nodeName​() Get the node name of this node. String ownText​() Gets the text owned by this element only; does not get the combined text of all children. Element parent​() Gets this node's parent node. Elements parents​() Get this element's parent and ancestors, up to the document root. Element prepend​(String html) Add inner HTML into this element. Element prependChild​(Node child) Add a node to the start of this element's children. Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child. Element prependText​(String text) Create and prepend a new TextNode to this element. Element previousElementSibling​() Gets the previous element sibling of this element. Element removeClass​(String className) Remove a class name from this element's class attribute. Elements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context. Element selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context. Element shallowClone​() Create a stand-alone, shallow copy of this node. Elements siblingElements​() Get sibling elements. Tag tag​() Get the Tag for this element. String tagName​() Get the name of the tag for this element. Element tagName​(String tagName) Change the tag of this element. String text​() Gets the combined text of this element and all its children. Element text​(String text) Set the text of this element. List<TextNode> textNodes​() Get this element's child text nodes. Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it. String toString​() String val​() Get the value of a form element (input, textarea, etc). Element val​(String value) Set the value of a form element (input, textarea, etc). String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original. Element wrap​(String html) Wrap the supplied HTML around this element. Methods inherited from class org.jsoup.nodes.Node absUrl, addChildren, addChildren, attr, childNode, childNodes, childNodesAsArray, childNodesCopy, clearAttributes, equals, filter, hasAttr, hasParent, hasSameValue, indent, nextSibling, outerHtml, outerHtml, ownerDocument, parentNode, previousSibling, remove, removeAttr, removeChild, reparentChild, replaceChild, replaceWith, root, setBaseUri, setParentNode, setSiblingIndex, siblingIndex, siblingNodes, traverse, unwrap Methods inherited from class java.lang.Object finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitConstructor Summary Constructors Constructor Description Element​(String tag) Create a new, standalone element. Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI. Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element. Method Summary All Methods Instance Methods Concrete Methods Modifier and Type Method Description Element addClass​(String className) Add a class name to this element's class attribute. Element after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling). Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling). Element append​(String html) Add inner HTML to this element. Element appendChild​(Node child) Add a node child node to this element. Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child. Element appendText​(String text) Create and append a new TextNode to this element. Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child. Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element. Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element. Attributes attributes​() Get all of the element's attributes. String baseUri​() Get the base URI of this node. Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling). Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling). Element child​(int index) Get a child element of this element, by its 0-based index number. int childNodeSize​() Get the number of child nodes that this node holds. Elements children​() Get this element's child elements. String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated. Set<String> classNames​() Get all of the element's class names. Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names. Element clone​() Create a stand-alone, deep copy of this node, and all of its children. String cssSelector​() Get a CSS selector that will uniquely select this element. String data​() Get the combined data of this element. List<DataNode> dataNodes​() Get this element's child data nodes. Map<String,String> dataset​() Get this element's HTML5 custom data attributes. protected Element doClone​(Node parent) protected void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. int elementSiblingIndex​() Get the list index of this element in its element sibling list. Element empty​() Remove all of the element's child nodes. protected List<Node> ensureChildNodes​() Element firstElementSibling​() Gets the first element sibling of this element. Elements getAllElements​() Find all elements under this element (including self, and children of children). Element getElementById​(String id) Find an element by ID, including or under this element. Elements getElementsByAttribute​(String key) Find elements that have a named attribute set. Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix. Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value. Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string. Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix. Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression. Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression. Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value. Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix. Elements getElementsByClass​(String className) Find elements that have this class, including or under this element. Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index. Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index. Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index. Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name. Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string. Elements getElementsContainingText​(String searchText) Find elements that contain the specified string. Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression. Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression. Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression. Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression. protected boolean hasAttributes​() Check if this Node has an actual Attributes object. boolean hasClass​(String className) Tests if this element has a class. boolean hasText​() Test if this element has any text content (that is not just whitespace). String html​() Retrieves the element's inner HTML. Element html​(String html) Set this element's inner HTML. <T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable. String id​() Get the id attribute of this element. Element insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index. Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index. boolean is​(String cssQuery) Check if this element matches the given Selector CSS query. boolean is​(Evaluator evaluator) Check if this element matches the given evaluator. boolean isBlock​() Test if this element is a block-level element. Element lastElementSibling​() Gets the last element sibling of this element Element nextElementSibling​() Gets the next sibling element of this element. String nodeName​() Get the node name of this node. String ownText​() Gets the text owned by this element only; does not get the combined text of all children. Element parent​() Gets this node's parent node. Elements parents​() Get this element's parent and ancestors, up to the document root. Element prepend​(String html) Add inner HTML into this element. Element prependChild​(Node child) Add a node to the start of this element's children. Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child. Element prependText​(String text) Create and prepend a new TextNode to this element. Element previousElementSibling​() Gets the previous element sibling of this element. Element removeClass​(String className) Remove a class name from this element's class attribute. Elements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context. Element selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context. Element shallowClone​() Create a stand-alone, shallow copy of this node. Elements siblingElements​() Get sibling elements. Tag tag​() Get the Tag for this element. String tagName​() Get the name of the tag for this element. Element tagName​(String tagName) Change the tag of this element. String text​() Gets the combined text of this element and all its children. Element text​(String text) Set the text of this element. List<TextNode> textNodes​() Get this element's child text nodes. Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it. String toString​() String val​() Get the value of a form element (input, textarea, etc). Element val​(String value) Set the value of a form element (input, textarea, etc). String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original. Element wrap​(String html) Wrap the supplied HTML around this element. Methods inherited from class org.jsoup.nodes.Node absUrl, addChildren, addChildren, attr, childNode, childNodes, childNodesAsArray, childNodesCopy, clearAttributes, equals, filter, hasAttr, hasParent, hasSameValue, indent, nextSibling, outerHtml, outerHtml, ownerDocument, parentNode, previousSibling, remove, removeAttr, removeChild, reparentChild, replaceChild, replaceWith, root, setBaseUri, setParentNode, setSiblingIndex, siblingIndex, siblingNodes, traverse, unwrap Methods inherited from class java.lang.Object finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitConstructor Summary Constructors Constructor Description Element​(String tag) Create a new, standalone element. Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI. Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element.Constructor Summary Constructors Constructor Description Element​(String tag) Create a new, standalone element. Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI. Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element.Constructor SummaryConstructors Constructor Description Element​(String tag) Create a new, standalone element. Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI. Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element.ConstructorsConstructorsConstructor Description Element​(String tag) Create a new, standalone element. Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI. Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element.Constructor DescriptionConstructorDescriptionElement​(String tag) Create a new, standalone element.Element​(String tag)Element​(String tag)ElementElementStringCreate a new, standalone element.Create a new, standalone element.Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI.Element​(Tag tag, String baseUri)Element​(Tag tag, String baseUri)ElementElementTagStringCreate a new Element from a tag and a base URI.Create a new Element from a tag and a base URI.Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element.Element​(Tag tag, String baseUri, Attributes attributes)Element​(Tag tag, String baseUri, Attributes attributes)ElementElementTagStringAttributesCreate a new, standalone Element.Create a new, standalone Element.Method Summary All Methods Instance Methods Concrete Methods Modifier and Type Method Description Element addClass​(String className) Add a class name to this element's class attribute. Element after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling). Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling). Element append​(String html) Add inner HTML to this element. Element appendChild​(Node child) Add a node child node to this element. Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child. Element appendText​(String text) Create and append a new TextNode to this element. Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child. Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element. Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element. Attributes attributes​() Get all of the element's attributes. String baseUri​() Get the base URI of this node. Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling). Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling). Element child​(int index) Get a child element of this element, by its 0-based index number. int childNodeSize​() Get the number of child nodes that this node holds. Elements children​() Get this element's child elements. String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated. Set<String> classNames​() Get all of the element's class names. Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names. Element clone​() Create a stand-alone, deep copy of this node, and all of its children. String cssSelector​() Get a CSS selector that will uniquely select this element. String data​() Get the combined data of this element. List<DataNode> dataNodes​() Get this element's child data nodes. Map<String,String> dataset​() Get this element's HTML5 custom data attributes. protected Element doClone​(Node parent) protected void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. int elementSiblingIndex​() Get the list index of this element in its element sibling list. Element empty​() Remove all of the element's child nodes. protected List<Node> ensureChildNodes​() Element firstElementSibling​() Gets the first element sibling of this element. Elements getAllElements​() Find all elements under this element (including self, and children of children). Element getElementById​(String id) Find an element by ID, including or under this element. Elements getElementsByAttribute​(String key) Find elements that have a named attribute set. Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix. Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value. Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string. Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix. Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression. Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression. Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value. Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix. Elements getElementsByClass​(String className) Find elements that have this class, including or under this element. Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index. Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index. Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index. Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name. Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string. Elements getElementsContainingText​(String searchText) Find elements that contain the specified string. Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression. Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression. Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression. Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression. protected boolean hasAttributes​() Check if this Node has an actual Attributes object. boolean hasClass​(String className) Tests if this element has a class. boolean hasText​() Test if this element has any text content (that is not just whitespace). String html​() Retrieves the element's inner HTML. Element html​(String html) Set this element's inner HTML. <T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable. String id​() Get the id attribute of this element. Element insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index. Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index. boolean is​(String cssQuery) Check if this element matches the given Selector CSS query. boolean is​(Evaluator evaluator) Check if this element matches the given evaluator. boolean isBlock​() Test if this element is a block-level element. Element lastElementSibling​() Gets the last element sibling of this element Element nextElementSibling​() Gets the next sibling element of this element. String nodeName​() Get the node name of this node. String ownText​() Gets the text owned by this element only; does not get the combined text of all children. Element parent​() Gets this node's parent node. Elements parents​() Get this element's parent and ancestors, up to the document root. Element prepend​(String html) Add inner HTML into this element. Element prependChild​(Node child) Add a node to the start of this element's children. Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child. Element prependText​(String text) Create and prepend a new TextNode to this element. Element previousElementSibling​() Gets the previous element sibling of this element. Element removeClass​(String className) Remove a class name from this element's class attribute. Elements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context. Element selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context. Element shallowClone​() Create a stand-alone, shallow copy of this node. Elements siblingElements​() Get sibling elements. Tag tag​() Get the Tag for this element. String tagName​() Get the name of the tag for this element. Element tagName​(String tagName) Change the tag of this element. String text​() Gets the combined text of this element and all its children. Element text​(String text) Set the text of this element. List<TextNode> textNodes​() Get this element's child text nodes. Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it. String toString​() String val​() Get the value of a form element (input, textarea, etc). Element val​(String value) Set the value of a form element (input, textarea, etc). String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original. Element wrap​(String html) Wrap the supplied HTML around this element. Methods inherited from class org.jsoup.nodes.Node absUrl, addChildren, addChildren, attr, childNode, childNodes, childNodesAsArray, childNodesCopy, clearAttributes, equals, filter, hasAttr, hasParent, hasSameValue, indent, nextSibling, outerHtml, outerHtml, ownerDocument, parentNode, previousSibling, remove, removeAttr, removeChild, reparentChild, replaceChild, replaceWith, root, setBaseUri, setParentNode, setSiblingIndex, siblingIndex, siblingNodes, traverse, unwrap Methods inherited from class java.lang.Object finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitMethod Summary All Methods Instance Methods Concrete Methods Modifier and Type Method Description Element addClass​(String className) Add a class name to this element's class attribute. Element after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling). Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling). Element append​(String html) Add inner HTML to this element. Element appendChild​(Node child) Add a node child node to this element. Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child. Element appendText​(String text) Create and append a new TextNode to this element. Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child. Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element. Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element. Attributes attributes​() Get all of the element's attributes. String baseUri​() Get the base URI of this node. Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling). Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling). Element child​(int index) Get a child element of this element, by its 0-based index number. int childNodeSize​() Get the number of child nodes that this node holds. Elements children​() Get this element's child elements. String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated. Set<String> classNames​() Get all of the element's class names. Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names. Element clone​() Create a stand-alone, deep copy of this node, and all of its children. String cssSelector​() Get a CSS selector that will uniquely select this element. String data​() Get the combined data of this element. List<DataNode> dataNodes​() Get this element's child data nodes. Map<String,String> dataset​() Get this element's HTML5 custom data attributes. protected Element doClone​(Node parent) protected void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. int elementSiblingIndex​() Get the list index of this element in its element sibling list. Element empty​() Remove all of the element's child nodes. protected List<Node> ensureChildNodes​() Element firstElementSibling​() Gets the first element sibling of this element. Elements getAllElements​() Find all elements under this element (including self, and children of children). Element getElementById​(String id) Find an element by ID, including or under this element. Elements getElementsByAttribute​(String key) Find elements that have a named attribute set. Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix. Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value. Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string. Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix. Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression. Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression. Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value. Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix. Elements getElementsByClass​(String className) Find elements that have this class, including or under this element. Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index. Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index. Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index. Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name. Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string. Elements getElementsContainingText​(String searchText) Find elements that contain the specified string. Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression. Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression. Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression. Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression. protected boolean hasAttributes​() Check if this Node has an actual Attributes object. boolean hasClass​(String className) Tests if this element has a class. boolean hasText​() Test if this element has any text content (that is not just whitespace). String html​() Retrieves the element's inner HTML. Element html​(String html) Set this element's inner HTML. <T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable. String id​() Get the id attribute of this element. Element insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index. Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index. boolean is​(String cssQuery) Check if this element matches the given Selector CSS query. boolean is​(Evaluator evaluator) Check if this element matches the given evaluator. boolean isBlock​() Test if this element is a block-level element. Element lastElementSibling​() Gets the last element sibling of this element Element nextElementSibling​() Gets the next sibling element of this element. String nodeName​() Get the node name of this node. String ownText​() Gets the text owned by this element only; does not get the combined text of all children. Element parent​() Gets this node's parent node. Elements parents​() Get this element's parent and ancestors, up to the document root. Element prepend​(String html) Add inner HTML into this element. Element prependChild​(Node child) Add a node to the start of this element's children. Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child. Element prependText​(String text) Create and prepend a new TextNode to this element. Element previousElementSibling​() Gets the previous element sibling of this element. Element removeClass​(String className) Remove a class name from this element's class attribute. Elements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context. Element selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context. Element shallowClone​() Create a stand-alone, shallow copy of this node. Elements siblingElements​() Get sibling elements. Tag tag​() Get the Tag for this element. String tagName​() Get the name of the tag for this element. Element tagName​(String tagName) Change the tag of this element. String text​() Gets the combined text of this element and all its children. Element text​(String text) Set the text of this element. List<TextNode> textNodes​() Get this element's child text nodes. Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it. String toString​() String val​() Get the value of a form element (input, textarea, etc). Element val​(String value) Set the value of a form element (input, textarea, etc). String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original. Element wrap​(String html) Wrap the supplied HTML around this element. Methods inherited from class org.jsoup.nodes.Node absUrl, addChildren, addChildren, attr, childNode, childNodes, childNodesAsArray, childNodesCopy, clearAttributes, equals, filter, hasAttr, hasParent, hasSameValue, indent, nextSibling, outerHtml, outerHtml, ownerDocument, parentNode, previousSibling, remove, removeAttr, removeChild, reparentChild, replaceChild, replaceWith, root, setBaseUri, setParentNode, setSiblingIndex, siblingIndex, siblingNodes, traverse, unwrap Methods inherited from class java.lang.Object finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitMethod SummaryAll Methods Instance Methods Concrete Methods Modifier and Type Method Description Element addClass​(String className) Add a class name to this element's class attribute. Element after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling). Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling). Element append​(String html) Add inner HTML to this element. Element appendChild​(Node child) Add a node child node to this element. Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child. Element appendText​(String text) Create and append a new TextNode to this element. Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child. Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element. Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element. Attributes attributes​() Get all of the element's attributes. String baseUri​() Get the base URI of this node. Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling). Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling). Element child​(int index) Get a child element of this element, by its 0-based index number. int childNodeSize​() Get the number of child nodes that this node holds. Elements children​() Get this element's child elements. String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated. Set<String> classNames​() Get all of the element's class names. Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names. Element clone​() Create a stand-alone, deep copy of this node, and all of its children. String cssSelector​() Get a CSS selector that will uniquely select this element. String data​() Get the combined data of this element. List<DataNode> dataNodes​() Get this element's child data nodes. Map<String,String> dataset​() Get this element's HTML5 custom data attributes. protected Element doClone​(Node parent) protected void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. int elementSiblingIndex​() Get the list index of this element in its element sibling list. Element empty​() Remove all of the element's child nodes. protected List<Node> ensureChildNodes​() Element firstElementSibling​() Gets the first element sibling of this element. Elements getAllElements​() Find all elements under this element (including self, and children of children). Element getElementById​(String id) Find an element by ID, including or under this element. Elements getElementsByAttribute​(String key) Find elements that have a named attribute set. Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix. Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value. Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string. Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix. Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression. Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression. Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value. Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix. Elements getElementsByClass​(String className) Find elements that have this class, including or under this element. Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index. Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index. Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index. Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name. Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string. Elements getElementsContainingText​(String searchText) Find elements that contain the specified string. Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression. Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression. Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression. Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression. protected boolean hasAttributes​() Check if this Node has an actual Attributes object. boolean hasClass​(String className) Tests if this element has a class. boolean hasText​() Test if this element has any text content (that is not just whitespace). String html​() Retrieves the element's inner HTML. Element html​(String html) Set this element's inner HTML. <T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable. String id​() Get the id attribute of this element. Element insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index. Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index. boolean is​(String cssQuery) Check if this element matches the given Selector CSS query. boolean is​(Evaluator evaluator) Check if this element matches the given evaluator. boolean isBlock​() Test if this element is a block-level element. Element lastElementSibling​() Gets the last element sibling of this element Element nextElementSibling​() Gets the next sibling element of this element. String nodeName​() Get the node name of this node. String ownText​() Gets the text owned by this element only; does not get the combined text of all children. Element parent​() Gets this node's parent node. Elements parents​() Get this element's parent and ancestors, up to the document root. Element prepend​(String html) Add inner HTML into this element. Element prependChild​(Node child) Add a node to the start of this element's children. Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child. Element prependText​(String text) Create and prepend a new TextNode to this element. Element previousElementSibling​() Gets the previous element sibling of this element. Element removeClass​(String className) Remove a class name from this element's class attribute. Elements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context. Element selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context. Element shallowClone​() Create a stand-alone, shallow copy of this node. Elements siblingElements​() Get sibling elements. Tag tag​() Get the Tag for this element. String tagName​() Get the name of the tag for this element. Element tagName​(String tagName) Change the tag of this element. String text​() Gets the combined text of this element and all its children. Element text​(String text) Set the text of this element. List<TextNode> textNodes​() Get this element's child text nodes. Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it. String toString​() String val​() Get the value of a form element (input, textarea, etc). Element val​(String value) Set the value of a form element (input, textarea, etc). String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original. Element wrap​(String html) Wrap the supplied HTML around this element.All Methods Instance Methods Concrete MethodsAll MethodsAll MethodsInstance MethodsInstance MethodsInstance MethodsConcrete MethodsConcrete MethodsConcrete MethodsModifier and Type Method Description Element addClass​(String className) Add a class name to this element's class attribute. Element after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling). Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling). Element append​(String html) Add inner HTML to this element. Element appendChild​(Node child) Add a node child node to this element. Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child. Element appendText​(String text) Create and append a new TextNode to this element. Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child. Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element. Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element. Attributes attributes​() Get all of the element's attributes. String baseUri​() Get the base URI of this node. Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling). Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling). Element child​(int index) Get a child element of this element, by its 0-based index number. int childNodeSize​() Get the number of child nodes that this node holds. Elements children​() Get this element's child elements. String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated. Set<String> classNames​() Get all of the element's class names. Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names. Element clone​() Create a stand-alone, deep copy of this node, and all of its children. String cssSelector​() Get a CSS selector that will uniquely select this element. String data​() Get the combined data of this element. List<DataNode> dataNodes​() Get this element's child data nodes. Map<String,String> dataset​() Get this element's HTML5 custom data attributes. protected Element doClone​(Node parent) protected void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. int elementSiblingIndex​() Get the list index of this element in its element sibling list. Element empty​() Remove all of the element's child nodes. protected List<Node> ensureChildNodes​() Element firstElementSibling​() Gets the first element sibling of this element. Elements getAllElements​() Find all elements under this element (including self, and children of children). Element getElementById​(String id) Find an element by ID, including or under this element. Elements getElementsByAttribute​(String key) Find elements that have a named attribute set. Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix. Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value. Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string. Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix. Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression. Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression. Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value. Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix. Elements getElementsByClass​(String className) Find elements that have this class, including or under this element. Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index. Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index. Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index. Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name. Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string. Elements getElementsContainingText​(String searchText) Find elements that contain the specified string. Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression. Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression. Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression. Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression. protected boolean hasAttributes​() Check if this Node has an actual Attributes object. boolean hasClass​(String className) Tests if this element has a class. boolean hasText​() Test if this element has any text content (that is not just whitespace). String html​() Retrieves the element's inner HTML. Element html​(String html) Set this element's inner HTML. <T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable. String id​() Get the id attribute of this element. Element insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index. Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index. boolean is​(String cssQuery) Check if this element matches the given Selector CSS query. boolean is​(Evaluator evaluator) Check if this element matches the given evaluator. boolean isBlock​() Test if this element is a block-level element. Element lastElementSibling​() Gets the last element sibling of this element Element nextElementSibling​() Gets the next sibling element of this element. String nodeName​() Get the node name of this node. String ownText​() Gets the text owned by this element only; does not get the combined text of all children. Element parent​() Gets this node's parent node. Elements parents​() Get this element's parent and ancestors, up to the document root. Element prepend​(String html) Add inner HTML into this element. Element prependChild​(Node child) Add a node to the start of this element's children. Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child. Element prependText​(String text) Create and prepend a new TextNode to this element. Element previousElementSibling​() Gets the previous element sibling of this element. Element removeClass​(String className) Remove a class name from this element's class attribute. Elements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context. Element selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context. Element shallowClone​() Create a stand-alone, shallow copy of this node. Elements siblingElements​() Get sibling elements. Tag tag​() Get the Tag for this element. String tagName​() Get the name of the tag for this element. Element tagName​(String tagName) Change the tag of this element. String text​() Gets the combined text of this element and all its children. Element text​(String text) Set the text of this element. List<TextNode> textNodes​() Get this element's child text nodes. Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it. String toString​() String val​() Get the value of a form element (input, textarea, etc). Element val​(String value) Set the value of a form element (input, textarea, etc). String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original. Element wrap​(String html) Wrap the supplied HTML around this element.Modifier and Type Method DescriptionModifier and TypeMethodDescriptionElement addClass​(String className) Add a class name to this element's class attribute.ElementElementElementaddClass​(String className)addClass​(String className)addClassaddClassStringAdd a class name to this element's class attribute.Add a class name to this element's class attribute.classElement after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling).ElementElementElementafter​(String html)after​(String html)afterafterStringInsert the specified HTML into the DOM after this element (as a following sibling).Insert the specified HTML into the DOM after this element (as a following sibling).Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling).ElementElementElementafter​(Node node)after​(Node node)afterafterNodeInsert the specified node into the DOM after this node (as a following sibling).Insert the specified node into the DOM after this node (as a following sibling).Element append​(String html) Add inner HTML to this element.ElementElementElementappend​(String html)append​(String html)appendappendStringAdd inner HTML to this element.Add inner HTML to this element.Element appendChild​(Node child) Add a node child node to this element.ElementElementElementappendChild​(Node child)appendChild​(Node child)appendChildappendChildNodeAdd a node child node to this element.Add a node child node to this element.Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child.ElementElementElementappendElement​(String tagName)appendElement​(String tagName)appendElementappendElementStringCreate a new element by tag name, and add it as the last child.Create a new element by tag name, and add it as the last child.Element appendText​(String text) Create and append a new TextNode to this element.ElementElementElementappendText​(String text)appendText​(String text)appendTextappendTextStringCreate and append a new TextNode to this element.Create and append a new TextNode to this element.Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child.ElementElementElementappendTo​(Element parent)appendTo​(Element parent)appendToappendToElementAdd this element to the supplied parent element, as its next child.Add this element to the supplied parent element, as its next child.Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element.ElementElementElementattr​(String attributeKey, boolean attributeValue)attr​(String attributeKey, boolean attributeValue)attrattrStringSet a boolean attribute value on this element.Set a boolean attribute value on this element.Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element.ElementElementElementattr​(String attributeKey, String attributeValue)attr​(String attributeKey, String attributeValue)attrattrStringStringSet an attribute value on this element.Set an attribute value on this element.Attributes attributes​() Get all of the element's attributes.AttributesAttributesAttributesattributes​()attributes​()attributesattributesGet all of the element's attributes.Get all of the element's attributes.String baseUri​() Get the base URI of this node.StringStringStringbaseUri​()baseUri​()baseUribaseUriGet the base URI of this node.Get the base URI of this node.Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling).ElementElementElementbefore​(String html)before​(String html)beforebeforeStringInsert the specified HTML into the DOM before this element (as a preceding sibling).Insert the specified HTML into the DOM before this element (as a preceding sibling).Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling).ElementElementElementbefore​(Node node)before​(Node node)beforebeforeNodeInsert the specified node into the DOM before this node (as a preceding sibling).Insert the specified node into the DOM before this node (as a preceding sibling).Element child​(int index) Get a child element of this element, by its 0-based index number.ElementElementElementchild​(int index)child​(int index)childchildGet a child element of this element, by its 0-based index number.Get a child element of this element, by its 0-based index number.int childNodeSize​() Get the number of child nodes that this node holds.intintchildNodeSize​()childNodeSize​()childNodeSizechildNodeSizeGet the number of child nodes that this node holds.Get the number of child nodes that this node holds.Elements children​() Get this element's child elements.ElementsElementsElementschildren​()children​()childrenchildrenGet this element's child elements.Get this element's child elements.String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated.StringStringStringclassName​()className​()classNameclassNameGets the literal value of this element's "class" attribute, which may include multiple class names, space separated.Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated.Set<String> classNames​() Get all of the element's class names.Set<String>Set<String>SetStringclassNames​()classNames​()classNamesclassNamesGet all of the element's class names.Get all of the element's class names.Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names.ElementElementElementclassNames​(Set<String> classNames)classNames​(Set<String> classNames)classNamesclassNamesSetStringSet the element's class attribute to the supplied class names.Set the element's class attribute to the supplied class names.classElement clone​() Create a stand-alone, deep copy of this node, and all of its children.ElementElementElementclone​()clone​()clonecloneCreate a stand-alone, deep copy of this node, and all of its children.Create a stand-alone, deep copy of this node, and all of its children.String cssSelector​() Get a CSS selector that will uniquely select this element.StringStringStringcssSelector​()cssSelector​()cssSelectorcssSelectorGet a CSS selector that will uniquely select this element.Get a CSS selector that will uniquely select this element.String data​() Get the combined data of this element.StringStringStringdata​()data​()datadataGet the combined data of this element.Get the combined data of this element.List<DataNode> dataNodes​() Get this element's child data nodes.List<DataNode>List<DataNode>ListDataNodedataNodes​()dataNodes​()dataNodesdataNodesGet this element's child data nodes.Get this element's child data nodes.Map<String,String> dataset​() Get this element's HTML5 custom data attributes.Map<String,String>Map<String,String>MapStringStringdataset​()dataset​()datasetdatasetGet this element's HTML5 custom data attributes.Get this element's HTML5 custom data attributes.protected Element doClone​(Node parent)protected Elementprotected ElementElementdoClone​(Node parent)doClone​(Node parent)doClonedoCloneNodeprotected void doSetBaseUri​(String baseUri) Set the baseUri for just this node (not its descendants), if this Node tracks base URIs.protected voidprotected voiddoSetBaseUri​(String baseUri)doSetBaseUri​(String baseUri)doSetBaseUridoSetBaseUriStringSet the baseUri for just this node (not its descendants), if this Node tracks base URIs.Set the baseUri for just this node (not its descendants), if this Node tracks base URIs.int elementSiblingIndex​() Get the list index of this element in its element sibling list.intintelementSiblingIndex​()elementSiblingIndex​()elementSiblingIndexelementSiblingIndexGet the list index of this element in its element sibling list.Get the list index of this element in its element sibling list.Element empty​() Remove all of the element's child nodes.ElementElementElementempty​()empty​()emptyemptyRemove all of the element's child nodes.Remove all of the element's child nodes.protected List<Node> ensureChildNodes​()protected List<Node>protected List<Node>ListNodeensureChildNodes​()ensureChildNodes​()ensureChildNodesensureChildNodesElement firstElementSibling​() Gets the first element sibling of this element.ElementElementElementfirstElementSibling​()firstElementSibling​()firstElementSiblingfirstElementSiblingGets the first element sibling of this element.Gets the first element sibling of this element.Elements getAllElements​() Find all elements under this element (including self, and children of children).ElementsElementsElementsgetAllElements​()getAllElements​()getAllElementsgetAllElementsFind all elements under this element (including self, and children of children).Find all elements under this element (including self, and children of children).Element getElementById​(String id) Find an element by ID, including or under this element.ElementElementElementgetElementById​(String id)getElementById​(String id)getElementByIdgetElementByIdStringFind an element by ID, including or under this element.Find an element by ID, including or under this element.Elements getElementsByAttribute​(String key) Find elements that have a named attribute set.ElementsElementsElementsgetElementsByAttribute​(String key)getElementsByAttribute​(String key)getElementsByAttributegetElementsByAttributeStringFind elements that have a named attribute set.Find elements that have a named attribute set.Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix.ElementsElementsElementsgetElementsByAttributeStarting​(String keyPrefix)getElementsByAttributeStarting​(String keyPrefix)getElementsByAttributeStartinggetElementsByAttributeStartingStringFind elements that have an attribute name starting with the supplied prefix.Find elements that have an attribute name starting with the supplied prefix.Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value.ElementsElementsElementsgetElementsByAttributeValue​(String key, String value)getElementsByAttributeValue​(String key, String value)getElementsByAttributeValuegetElementsByAttributeValueStringStringFind elements that have an attribute with the specific value.Find elements that have an attribute with the specific value.Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string.ElementsElementsElementsgetElementsByAttributeValueContaining​(String key, String match)getElementsByAttributeValueContaining​(String key, String match)getElementsByAttributeValueContaininggetElementsByAttributeValueContainingStringStringFind elements that have attributes whose value contains the match string.Find elements that have attributes whose value contains the match string.Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix.ElementsElementsElementsgetElementsByAttributeValueEnding​(String key, String valueSuffix)getElementsByAttributeValueEnding​(String key, String valueSuffix)getElementsByAttributeValueEndinggetElementsByAttributeValueEndingStringStringFind elements that have attributes that end with the value suffix.Find elements that have attributes that end with the value suffix.Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression.ElementsElementsElementsgetElementsByAttributeValueMatching​(String key, String regex)getElementsByAttributeValueMatching​(String key, String regex)getElementsByAttributeValueMatchinggetElementsByAttributeValueMatchingStringStringFind elements that have attributes whose values match the supplied regular expression.Find elements that have attributes whose values match the supplied regular expression.Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression.ElementsElementsElementsgetElementsByAttributeValueMatching​(String key, Pattern pattern)getElementsByAttributeValueMatching​(String key, Pattern pattern)getElementsByAttributeValueMatchinggetElementsByAttributeValueMatchingStringPatternFind elements that have attributes whose values match the supplied regular expression.Find elements that have attributes whose values match the supplied regular expression.Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value.ElementsElementsElementsgetElementsByAttributeValueNot​(String key, String value)getElementsByAttributeValueNot​(String key, String value)getElementsByAttributeValueNotgetElementsByAttributeValueNotStringStringFind elements that either do not have this attribute, or have it with a different value.Find elements that either do not have this attribute, or have it with a different value.Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix.ElementsElementsElementsgetElementsByAttributeValueStarting​(String key, String valuePrefix)getElementsByAttributeValueStarting​(String key, String valuePrefix)getElementsByAttributeValueStartinggetElementsByAttributeValueStartingStringStringFind elements that have attributes that start with the value prefix.Find elements that have attributes that start with the value prefix.Elements getElementsByClass​(String className) Find elements that have this class, including or under this element.ElementsElementsElementsgetElementsByClass​(String className)getElementsByClass​(String className)getElementsByClassgetElementsByClassStringFind elements that have this class, including or under this element.Find elements that have this class, including or under this element.Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index.ElementsElementsElementsgetElementsByIndexEquals​(int index)getElementsByIndexEquals​(int index)getElementsByIndexEqualsgetElementsByIndexEqualsFind elements whose sibling index is equal to the supplied index.Find elements whose sibling index is equal to the supplied index.Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index.ElementsElementsElementsgetElementsByIndexGreaterThan​(int index)getElementsByIndexGreaterThan​(int index)getElementsByIndexGreaterThangetElementsByIndexGreaterThanFind elements whose sibling index is greater than the supplied index.Find elements whose sibling index is greater than the supplied index.Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index.ElementsElementsElementsgetElementsByIndexLessThan​(int index)getElementsByIndexLessThan​(int index)getElementsByIndexLessThangetElementsByIndexLessThanFind elements whose sibling index is less than the supplied index.Find elements whose sibling index is less than the supplied index.Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name.ElementsElementsElementsgetElementsByTag​(String tagName)getElementsByTag​(String tagName)getElementsByTaggetElementsByTagStringFinds elements, including and recursively under this element, with the specified tag name.Finds elements, including and recursively under this element, with the specified tag name.Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string.ElementsElementsElementsgetElementsContainingOwnText​(String searchText)getElementsContainingOwnText​(String searchText)getElementsContainingOwnTextgetElementsContainingOwnTextStringFind elements that directly contain the specified string.Find elements that directly contain the specified string.Elements getElementsContainingText​(String searchText) Find elements that contain the specified string.ElementsElementsElementsgetElementsContainingText​(String searchText)getElementsContainingText​(String searchText)getElementsContainingTextgetElementsContainingTextStringFind elements that contain the specified string.Find elements that contain the specified string.Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression.ElementsElementsElementsgetElementsMatchingOwnText​(String regex)getElementsMatchingOwnText​(String regex)getElementsMatchingOwnTextgetElementsMatchingOwnTextStringFind elements whose text matches the supplied regular expression.Find elements whose text matches the supplied regular expression.Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression.ElementsElementsElementsgetElementsMatchingOwnText​(Pattern pattern)getElementsMatchingOwnText​(Pattern pattern)getElementsMatchingOwnTextgetElementsMatchingOwnTextPatternFind elements whose own text matches the supplied regular expression.Find elements whose own text matches the supplied regular expression.Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression.ElementsElementsElementsgetElementsMatchingText​(String regex)getElementsMatchingText​(String regex)getElementsMatchingTextgetElementsMatchingTextStringFind elements whose text matches the supplied regular expression.Find elements whose text matches the supplied regular expression.Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression.ElementsElementsElementsgetElementsMatchingText​(Pattern pattern)getElementsMatchingText​(Pattern pattern)getElementsMatchingTextgetElementsMatchingTextPatternFind elements whose text matches the supplied regular expression.Find elements whose text matches the supplied regular expression.protected boolean hasAttributes​() Check if this Node has an actual Attributes object.protected booleanprotected booleanhasAttributes​()hasAttributes​()hasAttributeshasAttributesCheck if this Node has an actual Attributes object.Check if this Node has an actual Attributes object.boolean hasClass​(String className) Tests if this element has a class.booleanbooleanhasClass​(String className)hasClass​(String className)hasClasshasClassStringTests if this element has a class.Tests if this element has a class.boolean hasText​() Test if this element has any text content (that is not just whitespace).booleanbooleanhasText​()hasText​()hasTexthasTextTest if this element has any text content (that is not just whitespace).Test if this element has any text content (that is not just whitespace).String html​() Retrieves the element's inner HTML.StringStringStringhtml​()html​()htmlhtmlRetrieves the element's inner HTML.Retrieves the element's inner HTML.Element html​(String html) Set this element's inner HTML.ElementElementElementhtml​(String html)html​(String html)htmlhtmlStringSet this element's inner HTML.Set this element's inner HTML.<T extends Appendable>T html​(T appendable) Write this node and its children to the given Appendable.<T extends Appendable>T<T extends Appendable>TAppendablehtml​(T appendable)html​(T appendable)htmlhtmlWrite this node and its children to the given Appendable.Write this node and its children to the given Appendable.AppendableAppendableString id​() Get the id attribute of this element.StringStringStringid​()id​()ididGet the id attribute of this element.Get the id attribute of this element.idElement insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index.ElementElementElementinsertChildren​(int index, Collection<? extends Node> children)insertChildren​(int index, Collection<? extends Node> children)insertChildreninsertChildrenCollectionNodeInserts the given child nodes into this element at the specified index.Inserts the given child nodes into this element at the specified index.Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index.ElementElementElementinsertChildren​(int index, Node... children)insertChildren​(int index, Node... children)insertChildreninsertChildrenNodeInserts the given child nodes into this element at the specified index.Inserts the given child nodes into this element at the specified index.boolean is​(String cssQuery) Check if this element matches the given Selector CSS query.booleanbooleanis​(String cssQuery)is​(String cssQuery)isisStringCheck if this element matches the given Selector CSS query.Check if this element matches the given Selector CSS query.SelectorSelectorboolean is​(Evaluator evaluator) Check if this element matches the given evaluator.booleanbooleanis​(Evaluator evaluator)is​(Evaluator evaluator)isisEvaluatorCheck if this element matches the given evaluator.Check if this element matches the given evaluator.boolean isBlock​() Test if this element is a block-level element.booleanbooleanisBlock​()isBlock​()isBlockisBlockTest if this element is a block-level element.Test if this element is a block-level element.Element lastElementSibling​() Gets the last element sibling of this elementElementElementElementlastElementSibling​()lastElementSibling​()lastElementSiblinglastElementSiblingGets the last element sibling of this elementGets the last element sibling of this elementElement nextElementSibling​() Gets the next sibling element of this element.ElementElementElementnextElementSibling​()nextElementSibling​()nextElementSiblingnextElementSiblingGets the next sibling element of this element.Gets the next sibling element of this element.String nodeName​() Get the node name of this node.StringStringStringnodeName​()nodeName​()nodeNamenodeNameGet the node name of this node.Get the node name of this node.String ownText​() Gets the text owned by this element only; does not get the combined text of all children.StringStringStringownText​()ownText​()ownTextownTextGets the text owned by this element only; does not get the combined text of all children.Gets the text owned by this element only; does not get the combined text of all children.Element parent​() Gets this node's parent node.ElementElementElementparent​()parent​()parentparentGets this node's parent node.Gets this node's parent node.Elements parents​() Get this element's parent and ancestors, up to the document root.ElementsElementsElementsparents​()parents​()parentsparentsGet this element's parent and ancestors, up to the document root.Get this element's parent and ancestors, up to the document root.Element prepend​(String html) Add inner HTML into this element.ElementElementElementprepend​(String html)prepend​(String html)prependprependStringAdd inner HTML into this element.Add inner HTML into this element.Element prependChild​(Node child) Add a node to the start of this element's children.ElementElementElementprependChild​(Node child)prependChild​(Node child)prependChildprependChildNodeAdd a node to the start of this element's children.Add a node to the start of this element's children.Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child.ElementElementElementprependElement​(String tagName)prependElement​(String tagName)prependElementprependElementStringCreate a new element by tag name, and add it as the first child.Create a new element by tag name, and add it as the first child.Element prependText​(String text) Create and prepend a new TextNode to this element.ElementElementElementprependText​(String text)prependText​(String text)prependTextprependTextStringCreate and prepend a new TextNode to this element.Create and prepend a new TextNode to this element.Element previousElementSibling​() Gets the previous element sibling of this element.ElementElementElementpreviousElementSibling​()previousElementSibling​()previousElementSiblingpreviousElementSiblingGets the previous element sibling of this element.Gets the previous element sibling of this element.Element removeClass​(String className) Remove a class name from this element's class attribute.ElementElementElementremoveClass​(String className)removeClass​(String className)removeClassremoveClassStringRemove a class name from this element's class attribute.Remove a class name from this element's class attribute.classElements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context.ElementsElementsElementsselect​(String cssQuery)select​(String cssQuery)selectselectStringFind elements that match the Selector CSS query, with this element as the starting context.Find elements that match the Selector CSS query, with this element as the starting context.SelectorSelectorElement selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context.ElementElementElementselectFirst​(String cssQuery)selectFirst​(String cssQuery)selectFirstselectFirstStringFind the first Element that matches the Selector CSS query, with this element as the starting context.Find the first Element that matches the Selector CSS query, with this element as the starting context.SelectorSelectorElement shallowClone​() Create a stand-alone, shallow copy of this node.ElementElementElementshallowClone​()shallowClone​()shallowCloneshallowCloneCreate a stand-alone, shallow copy of this node.Create a stand-alone, shallow copy of this node.Elements siblingElements​() Get sibling elements.ElementsElementsElementssiblingElements​()siblingElements​()siblingElementssiblingElementsGet sibling elements.Get sibling elements.Tag tag​() Get the Tag for this element.TagTagTagtag​()tag​()tagtagGet the Tag for this element.Get the Tag for this element.String tagName​() Get the name of the tag for this element.StringStringStringtagName​()tagName​()tagNametagNameGet the name of the tag for this element.Get the name of the tag for this element.Element tagName​(String tagName) Change the tag of this element.ElementElementElementtagName​(String tagName)tagName​(String tagName)tagNametagNameStringChange the tag of this element.Change the tag of this element.String text​() Gets the combined text of this element and all its children.StringStringStringtext​()text​()texttextGets the combined text of this element and all its children.Gets the combined text of this element and all its children.Element text​(String text) Set the text of this element.ElementElementElementtext​(String text)text​(String text)texttextStringSet the text of this element.Set the text of this element.List<TextNode> textNodes​() Get this element's child text nodes.List<TextNode>List<TextNode>ListTextNodetextNodes​()textNodes​()textNodestextNodesGet this element's child text nodes.Get this element's child text nodes.Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it.ElementElementElementtoggleClass​(String className)toggleClass​(String className)toggleClasstoggleClassStringToggle a class name on this element's class attribute: if present, remove it; otherwise add it.Toggle a class name on this element's class attribute: if present, remove it; otherwise add it.classString toString​()StringStringStringtoString​()toString​()toStringtoStringString val​() Get the value of a form element (input, textarea, etc).StringStringStringval​()val​()valvalGet the value of a form element (input, textarea, etc).Get the value of a form element (input, textarea, etc).Element val​(String value) Set the value of a form element (input, textarea, etc).ElementElementElementval​(String value)val​(String value)valvalStringSet the value of a form element (input, textarea, etc).Set the value of a form element (input, textarea, etc).String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original.StringStringStringwholeText​()wholeText​()wholeTextwholeTextGet the (unencoded) text of all children of this element, including any newlines and spaces present in the original.Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original.Element wrap​(String html) Wrap the supplied HTML around this element.ElementElementElementwrap​(String html)wrap​(String html)wrapwrapStringWrap the supplied HTML around this element.Wrap the supplied HTML around this element.Methods inherited from class org.jsoup.nodes.Node absUrl, addChildren, addChildren, attr, childNode, childNodes, childNodesAsArray, childNodesCopy, clearAttributes, equals, filter, hasAttr, hasParent, hasSameValue, indent, nextSibling, outerHtml, outerHtml, ownerDocument, parentNode, previousSibling, remove, removeAttr, removeChild, reparentChild, replaceChild, replaceWith, root, setBaseUri, setParentNode, setSiblingIndex, siblingIndex, siblingNodes, traverse, unwrapMethods inherited from class org.jsoup.nodes.Node absUrl, addChildren, addChildren, attr, childNode, childNodes, childNodesAsArray, childNodesCopy, clearAttributes, equals, filter, hasAttr, hasParent, hasSameValue, indent, nextSibling, outerHtml, outerHtml, ownerDocument, parentNode, previousSibling, remove, removeAttr, removeChild, reparentChild, replaceChild, replaceWith, root, setBaseUri, setParentNode, setSiblingIndex, siblingIndex, siblingNodes, traverse, unwrapMethods inherited from class org.jsoup.nodes.NodeNodeabsUrl, addChildren, addChildren, attr, childNode, childNodes, childNodesAsArray, childNodesCopy, clearAttributes, equals, filter, hasAttr, hasParent, hasSameValue, indent, nextSibling, outerHtml, outerHtml, ownerDocument, parentNode, previousSibling, remove, removeAttr, removeChild, reparentChild, replaceChild, replaceWith, root, setBaseUri, setParentNode, setSiblingIndex, siblingIndex, siblingNodes, traverse, unwrapabsUrladdChildrenaddChildrenattrchildNodechildNodeschildNodesAsArraychildNodesCopyclearAttributesequalsfilterhasAttrhasParenthasSameValueindentnextSiblingouterHtmlouterHtmlownerDocumentparentNodepreviousSiblingremoveremoveAttrremoveChildreparentChildreplaceChildreplaceWithrootsetBaseUrisetParentNodesetSiblingIndexsiblingIndexsiblingNodestraverseunwrapMethods inherited from class java.lang.Object finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitMethods inherited from class java.lang.Object finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitMethods inherited from class java.lang.ObjectObjectfinalize, getClass, hashCode, notify, notifyAll, wait, wait, waitfinalizegetClasshashCodenotifynotifyAllwaitwaitwaitConstructor Detail Element public Element​(String tag) Create a new, standalone element. Parameters: tag - tag name Element public Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element. (Standalone in that is has no parent.) Parameters: tag - tag of this element baseUri - the base URI attributes - initial attributes See Also: appendChild(Node), appendElement(String) Element public Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI. Parameters: tag - element tag baseUri - the base URI of this element. It is acceptable for the base URI to be an empty string, but not null. See Also: Tag.valueOf(String, ParseSettings) Method Detail ensureChildNodes protected List<Node> ensureChildNodes​() Specified by: ensureChildNodes in class Node hasAttributes protected boolean hasAttributes​() Description copied from class: Node Check if this Node has an actual Attributes object. Specified by: hasAttributes in class Node attributes public Attributes attributes​() Description copied from class: Node Get all of the element's attributes. Specified by: attributes in class Node Returns: attributes (which implements iterable, in same order as presented in original HTML). baseUri public String baseUri​() Description copied from class: Node Get the base URI of this node. Specified by: baseUri in class Node Returns: base URI doSetBaseUri protected void doSetBaseUri​(String baseUri) Description copied from class: Node Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. Specified by: doSetBaseUri in class Node Parameters: baseUri - new URI childNodeSize public int childNodeSize​() Description copied from class: Node Get the number of child nodes that this node holds. Specified by: childNodeSize in class Node Returns: the number of child nodes that this node holds. nodeName public String nodeName​() Description copied from class: Node Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). Specified by: nodeName in class Node Returns: node name tagName public String tagName​() Get the name of the tag for this element. E.g. div Returns: the tag name tagName public Element tagName​(String tagName) Change the tag of this element. For example, convert a <span> to a <div> with el.tagName("div");. Parameters: tagName - new tag name for this element Returns: this element, for chaining tag public Tag tag​() Get the Tag for this element. Returns: the tag object isBlock public boolean isBlock​() Test if this element is a block-level element. (E.g. <div> == true or an inline element <p> == false). Returns: true if block, false if not (and thus inline) id public String id​() Get the id attribute of this element. Returns: The id attribute, if present, or an empty string if not. attr public Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element. If this element already has an attribute with the key, its value is updated; otherwise, a new attribute is added. Overrides: attr in class Node Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this element attr public Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element. Setting to true sets the attribute value to "" and marks the attribute as boolean so no value is written out. Setting to false removes the attribute with the same key if it exists. Parameters: attributeKey - the attribute key attributeValue - the attribute value Returns: this element dataset public Map<String,String> dataset​() Get this element's HTML5 custom data attributes. Each attribute in the element that has a key starting with "data-" is included the dataset. E.g., the element <div data-package="jsoup" data-language="Java" class="group">... has the dataset package=jsoup, language=java. This map is a filtered view of the element's attribute map. Changes to one map (add, remove, update) are reflected in the other map. You can find elements that have data attributes using the [^data-] attribute key prefix selector. Returns: a map of key=value custom data attributes. parent public final Element parent​() Description copied from class: Node Gets this node's parent node. Overrides: parent in class Node Returns: parent node; or null if no parent. parents public Elements parents​() Get this element's parent and ancestors, up to the document root. Returns: this element's stack of parents, closest first. child public Element child​(int index) Get a child element of this element, by its 0-based index number. Note that an element can have both mixed Nodes and Elements as children. This method inspects a filtered list of children that are elements, and the index is based on that filtered list. Parameters: index - the index number of the element to retrieve Returns: the child element, if it exists, otherwise throws an IndexOutOfBoundsException See Also: Node.childNode(int) children public Elements children​() Get this element's child elements. This is effectively a filter on Node.childNodes() to get Element nodes. Returns: child elements. If this element has no children, returns an empty list. See Also: Node.childNodes() textNodes public List<TextNode> textNodes​() Get this element's child text nodes. The list is unmodifiable but the text nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Text nodes. Returns: child text nodes. If this element has no text nodes, returns an empty list. For example, with the input HTML: <p>One <span>Two</span> Three <br> Four</p> with the p element selected: p.text() = "One Two Three Four" p.ownText() = "One Three Four" p.children() = Elements[<span>, <br>] p.childNodes() = List<Node>["One ", <span>, " Three ", <br>, " Four"] p.textNodes() = List<TextNode>["One ", " Three ", " Four"] dataNodes public List<DataNode> dataNodes​() Get this element's child data nodes. The list is unmodifiable but the data nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Data nodes. Returns: child data nodes. If this element has no data nodes, returns an empty list. See Also: data() select public Elements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context. Matched elements may include this element, or any of its children. This method is generally more powerful to use than the DOM-type getElementBy* methods, because multiple filters can be combined, e.g.: el.select("a[href]") - finds links (a tags with href attributes) el.select("a[href*=example.com]") - finds links pointing to example.com (loosely) See the query syntax documentation in Selector. Parameters: cssQuery - a Selector CSS-like query Returns: elements that match the query (empty if none match) Throws: Selector.SelectorParseException - (unchecked) on an invalid CSS query. See Also: Selector selectFirst public Element selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context. This is effectively the same as calling element.select(query).first(), but is more efficient as query execution stops on the first hit. Parameters: cssQuery - cssQuery a Selector CSS-like query Returns: the first matching element, or null if there is no match. is public boolean is​(String cssQuery) Check if this element matches the given Selector CSS query. Parameters: cssQuery - a Selector CSS query Returns: if this element matches the query is public boolean is​(Evaluator evaluator) Check if this element matches the given evaluator. Parameters: evaluator - an element evaluator Returns: if this element matches appendChild public Element appendChild​(Node child) Add a node child node to this element. Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements. appendTo public Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child. Parameters: parent - element to which this element will be appended Returns: this element, so that you can continue modifying the element prependChild public Element prependChild​(Node child) Add a node to the start of this element's children. Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements. insertChildren public Element insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first. Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining. insertChildren public Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first. Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining. appendElement public Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child. Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.appendElement("h1").attr("id", "header").text("Welcome"); prependElement public Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child. Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.prependElement("h1").attr("id", "header").text("Welcome"); appendText public Element appendText​(String text) Create and append a new TextNode to this element. Parameters: text - the unencoded text to add Returns: this element prependText public Element prependText​(String text) Create and prepend a new TextNode to this element. Parameters: text - the unencoded text to add Returns: this element append public Element append​(String html) Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children. Parameters: html - HTML to add inside this element, after the existing HTML Returns: this element See Also: html(String) prepend public Element prepend​(String html) Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element's children. Parameters: html - HTML to add inside this element, before the existing HTML Returns: this element See Also: html(String) before public Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling). Overrides: before in class Node Parameters: html - HTML to add before this element Returns: this element, for chaining See Also: after(String) before public Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling). Overrides: before in class Node Parameters: node - to add before this element Returns: this Element, for chaining See Also: after(Node) after public Element after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling). Overrides: after in class Node Parameters: html - HTML to add after this element Returns: this element, for chaining See Also: before(String) after public Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling). Overrides: after in class Node Parameters: node - to add after this element Returns: this element, for chaining See Also: before(Node) empty public Element empty​() Remove all of the element's child nodes. Any attributes are left as-is. Returns: this element wrap public Element wrap​(String html) Wrap the supplied HTML around this element. Overrides: wrap in class Node Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this element, for chaining. cssSelector public String cssSelector​() Get a CSS selector that will uniquely select this element. If the element has an ID, returns #id; otherwise returns the parent (if any) CSS selector, followed by '>', followed by a unique selector for the element (tag.class.class:nth-child(n)). Returns: the CSS Path that can be used to retrieve the element in a selector. siblingElements public Elements siblingElements​() Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling of itself, so will not be included in the returned list. Returns: sibling elements nextElementSibling public Element nextElementSibling​() Gets the next sibling element of this element. E.g., if a div contains two ps, the nextElementSibling of the first p is the second p. This is similar to Node.nextSibling(), but specifically finds only Elements Returns: the next element, or null if there is no next element See Also: previousElementSibling() previousElementSibling public Element previousElementSibling​() Gets the previous element sibling of this element. Returns: the previous element, or null if there is no previous element See Also: nextElementSibling() firstElementSibling public Element firstElementSibling​() Gets the first element sibling of this element. Returns: the first sibling that is an element (aka the parent's first element child) elementSiblingIndex public int elementSiblingIndex​() Get the list index of this element in its element sibling list. I.e. if this is the first element sibling, returns 0. Returns: position in element sibling list lastElementSibling public Element lastElementSibling​() Gets the last element sibling of this element Returns: the last sibling that is an element (aka the parent's last element child) getElementsByTag public Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name. Parameters: tagName - The tag name to search for (case insensitively). Returns: a matching unmodifiable list of elements. Will be empty if this element and none of its children match. getElementById public Element getElementById​(String id) Find an element by ID, including or under this element. Note that this finds the first matching ID, starting with this element. If you search down from a different starting point, it is possible to find a different element by ID. For unique element by ID within a Document, use getElementById(String) Parameters: id - The ID to search for. Returns: The first matching element by ID, starting with this element, or null if none found. getElementsByClass public Elements getElementsByClass​(String className) Find elements that have this class, including or under this element. Case insensitive. Elements can have multiple classes (e.g. <div class="header round first">. This method checks each class, so you can find the above with el.getElementsByClass("header");. Parameters: className - the name of the class to search for. Returns: elements with the supplied class name, empty if none See Also: hasClass(String), classNames() getElementsByAttribute public Elements getElementsByAttribute​(String key) Find elements that have a named attribute set. Case insensitive. Parameters: key - name of the attribute, e.g. href Returns: elements that have this attribute, empty if none getElementsByAttributeStarting public Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix. Use data- to find elements that have HTML5 datasets. Parameters: keyPrefix - name prefix of the attribute e.g. data- Returns: elements that have attribute names that start with with the prefix, empty if none. getElementsByAttributeValue public Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value. Case insensitive. Parameters: key - name of the attribute value - value of the attribute Returns: elements that have this attribute with this value, empty if none getElementsByAttributeValueNot public Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value. Case insensitive. Parameters: key - name of the attribute value - value of the attribute Returns: elements that do not have a matching attribute getElementsByAttributeValueStarting public Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix. Case insensitive. Parameters: key - name of the attribute valuePrefix - start of attribute value Returns: elements that have attributes that start with the value prefix getElementsByAttributeValueEnding public Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix. Case insensitive. Parameters: key - name of the attribute valueSuffix - end of the attribute value Returns: elements that have attributes that end with the value suffix getElementsByAttributeValueContaining public Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string. Case insensitive. Parameters: key - name of the attribute match - substring of value to search for Returns: elements that have attributes containing this text getElementsByAttributeValueMatching public Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression. Parameters: key - name of the attribute pattern - compiled regular expression to match against attribute values Returns: elements that have attributes matching this regular expression getElementsByAttributeValueMatching public Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression. Parameters: key - name of the attribute regex - regular expression to match against attribute values. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements that have attributes matching this regular expression getElementsByIndexLessThan public Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index. Parameters: index - 0-based index Returns: elements less than index getElementsByIndexGreaterThan public Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index. Parameters: index - 0-based index Returns: elements greater than index getElementsByIndexEquals public Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index. Parameters: index - 0-based index Returns: elements equal to index getElementsContainingText public Elements getElementsContainingText​(String searchText) Find elements that contain the specified string. The search is case insensitive. The text may appear directly in the element, or in any of its descendants. Parameters: searchText - to look for in the element's text Returns: elements that contain the string, case insensitive. See Also: text() getElementsContainingOwnText public Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly in the element, not in any of its descendants. Parameters: searchText - to look for in the element's own text Returns: elements that contain the string, case insensitive. See Also: ownText() getElementsMatchingText public Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression. Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: text() getElementsMatchingText public Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression. Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: text() getElementsMatchingOwnText public Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression. Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: ownText() getElementsMatchingOwnText public Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression. Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: ownText() getAllElements public Elements getAllElements​() Find all elements under this element (including self, and children of children). Returns: all elements text public String text​() Gets the combined text of this element and all its children. Whitespace is normalized and trimmed. For example, given HTML <p>Hello <b>there</b> now! </p>, p.text() returns "Hello there now!" Returns: unencoded, normalized text, or empty string if none. See Also: if you don't want the text to be normalized., ownText(), textNodes() wholeText public String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original. Returns: unencoded, un-normalized text See Also: text() ownText public String ownText​() Gets the text owned by this element only; does not get the combined text of all children. For example, given HTML <p>Hello <b>there</b> now!</p>, p.ownText() returns "Hello now!", whereas p.text() returns "Hello there now!". Note that the text within the b element is not returned, as it is not a direct child of the p element. Returns: unencoded text, or empty string if none. See Also: text(), textNodes() text public Element text​(String text) Set the text of this element. Any existing contents (text or elements) will be cleared Parameters: text - unencoded text Returns: this element hasText public boolean hasText​() Test if this element has any text content (that is not just whitespace). Returns: true if element has non-blank text content. data public String data​() Get the combined data of this element. Data is e.g. the inside of a script tag. Note that data is NOT the text of the element. Use text() to get the text that would be visible to a user, and data() for the contents of scripts, comments, CSS styles, etc. Returns: the data, or empty string if none See Also: dataNodes() className public String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated. (E.g. on <div class="header gray"> returns, " header gray") Returns: The literal class attribute, or empty string if no class attribute set. classNames public Set<String> classNames​() Get all of the element's class names. E.g. on element <div class="header gray">, returns a set of two elements "header", "gray". Note that modifications to this set are not pushed to the backing class attribute; use the classNames(java.util.Set) method to persist them. Returns: set of classnames, empty if no class attribute classNames public Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names. Parameters: classNames - set of classes Returns: this element, for chaining hasClass public boolean hasClass​(String className) Tests if this element has a class. Case insensitive. Parameters: className - name of class to check for Returns: true if it does, false if not addClass public Element addClass​(String className) Add a class name to this element's class attribute. Parameters: className - class name to add Returns: this element removeClass public Element removeClass​(String className) Remove a class name from this element's class attribute. Parameters: className - class name to remove Returns: this element toggleClass public Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it. Parameters: className - class name to toggle Returns: this element val public String val​() Get the value of a form element (input, textarea, etc). Returns: the value of the form element, or empty string if not set. val public Element val​(String value) Set the value of a form element (input, textarea, etc). Parameters: value - value to set Returns: this element (for chaining) html public String html​() Retrieves the element's inner HTML. E.g. on a <div> with one empty <p>, would return <p></p>. (Whereas Node.outerHtml() would return <div><p></p></div>.) Returns: String of HTML. See Also: Node.outerHtml() html public <T extends Appendable> T html​(T appendable) Write this node and its children to the given Appendable. Overrides: html in class Node Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining. html public Element html​(String html) Set this element's inner HTML. Clears the existing HTML first. Parameters: html - HTML to parse and set into this element Returns: this element See Also: append(String) toString public String toString​() Overrides: toString in class Node clone public Element clone​() Description copied from class: Node Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using appendChild(Node). Overrides: clone in class Node Returns: a stand-alone cloned node, including clones of any children See Also: Node.shallowClone() shallowClone public Element shallowClone​() Description copied from class: Node Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes. Overrides: shallowClone in class Node Returns: a single independent copy of this node See Also: Node.clone() doClone protected Element doClone​(Node parent) Overrides: doClone in class NodeConstructor Detail Element public Element​(String tag) Create a new, standalone element. Parameters: tag - tag name Element public Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element. (Standalone in that is has no parent.) Parameters: tag - tag of this element baseUri - the base URI attributes - initial attributes See Also: appendChild(Node), appendElement(String) Element public Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI. Parameters: tag - element tag baseUri - the base URI of this element. It is acceptable for the base URI to be an empty string, but not null. See Also: Tag.valueOf(String, ParseSettings) Method Detail ensureChildNodes protected List<Node> ensureChildNodes​() Specified by: ensureChildNodes in class Node hasAttributes protected boolean hasAttributes​() Description copied from class: Node Check if this Node has an actual Attributes object. Specified by: hasAttributes in class Node attributes public Attributes attributes​() Description copied from class: Node Get all of the element's attributes. Specified by: attributes in class Node Returns: attributes (which implements iterable, in same order as presented in original HTML). baseUri public String baseUri​() Description copied from class: Node Get the base URI of this node. Specified by: baseUri in class Node Returns: base URI doSetBaseUri protected void doSetBaseUri​(String baseUri) Description copied from class: Node Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. Specified by: doSetBaseUri in class Node Parameters: baseUri - new URI childNodeSize public int childNodeSize​() Description copied from class: Node Get the number of child nodes that this node holds. Specified by: childNodeSize in class Node Returns: the number of child nodes that this node holds. nodeName public String nodeName​() Description copied from class: Node Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). Specified by: nodeName in class Node Returns: node name tagName public String tagName​() Get the name of the tag for this element. E.g. div Returns: the tag name tagName public Element tagName​(String tagName) Change the tag of this element. For example, convert a <span> to a <div> with el.tagName("div");. Parameters: tagName - new tag name for this element Returns: this element, for chaining tag public Tag tag​() Get the Tag for this element. Returns: the tag object isBlock public boolean isBlock​() Test if this element is a block-level element. (E.g. <div> == true or an inline element <p> == false). Returns: true if block, false if not (and thus inline) id public String id​() Get the id attribute of this element. Returns: The id attribute, if present, or an empty string if not. attr public Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element. If this element already has an attribute with the key, its value is updated; otherwise, a new attribute is added. Overrides: attr in class Node Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this element attr public Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element. Setting to true sets the attribute value to "" and marks the attribute as boolean so no value is written out. Setting to false removes the attribute with the same key if it exists. Parameters: attributeKey - the attribute key attributeValue - the attribute value Returns: this element dataset public Map<String,String> dataset​() Get this element's HTML5 custom data attributes. Each attribute in the element that has a key starting with "data-" is included the dataset. E.g., the element <div data-package="jsoup" data-language="Java" class="group">... has the dataset package=jsoup, language=java. This map is a filtered view of the element's attribute map. Changes to one map (add, remove, update) are reflected in the other map. You can find elements that have data attributes using the [^data-] attribute key prefix selector. Returns: a map of key=value custom data attributes. parent public final Element parent​() Description copied from class: Node Gets this node's parent node. Overrides: parent in class Node Returns: parent node; or null if no parent. parents public Elements parents​() Get this element's parent and ancestors, up to the document root. Returns: this element's stack of parents, closest first. child public Element child​(int index) Get a child element of this element, by its 0-based index number. Note that an element can have both mixed Nodes and Elements as children. This method inspects a filtered list of children that are elements, and the index is based on that filtered list. Parameters: index - the index number of the element to retrieve Returns: the child element, if it exists, otherwise throws an IndexOutOfBoundsException See Also: Node.childNode(int) children public Elements children​() Get this element's child elements. This is effectively a filter on Node.childNodes() to get Element nodes. Returns: child elements. If this element has no children, returns an empty list. See Also: Node.childNodes() textNodes public List<TextNode> textNodes​() Get this element's child text nodes. The list is unmodifiable but the text nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Text nodes. Returns: child text nodes. If this element has no text nodes, returns an empty list. For example, with the input HTML: <p>One <span>Two</span> Three <br> Four</p> with the p element selected: p.text() = "One Two Three Four" p.ownText() = "One Three Four" p.children() = Elements[<span>, <br>] p.childNodes() = List<Node>["One ", <span>, " Three ", <br>, " Four"] p.textNodes() = List<TextNode>["One ", " Three ", " Four"] dataNodes public List<DataNode> dataNodes​() Get this element's child data nodes. The list is unmodifiable but the data nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Data nodes. Returns: child data nodes. If this element has no data nodes, returns an empty list. See Also: data() select public Elements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context. Matched elements may include this element, or any of its children. This method is generally more powerful to use than the DOM-type getElementBy* methods, because multiple filters can be combined, e.g.: el.select("a[href]") - finds links (a tags with href attributes) el.select("a[href*=example.com]") - finds links pointing to example.com (loosely) See the query syntax documentation in Selector. Parameters: cssQuery - a Selector CSS-like query Returns: elements that match the query (empty if none match) Throws: Selector.SelectorParseException - (unchecked) on an invalid CSS query. See Also: Selector selectFirst public Element selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context. This is effectively the same as calling element.select(query).first(), but is more efficient as query execution stops on the first hit. Parameters: cssQuery - cssQuery a Selector CSS-like query Returns: the first matching element, or null if there is no match. is public boolean is​(String cssQuery) Check if this element matches the given Selector CSS query. Parameters: cssQuery - a Selector CSS query Returns: if this element matches the query is public boolean is​(Evaluator evaluator) Check if this element matches the given evaluator. Parameters: evaluator - an element evaluator Returns: if this element matches appendChild public Element appendChild​(Node child) Add a node child node to this element. Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements. appendTo public Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child. Parameters: parent - element to which this element will be appended Returns: this element, so that you can continue modifying the element prependChild public Element prependChild​(Node child) Add a node to the start of this element's children. Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements. insertChildren public Element insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first. Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining. insertChildren public Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first. Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining. appendElement public Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child. Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.appendElement("h1").attr("id", "header").text("Welcome"); prependElement public Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child. Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.prependElement("h1").attr("id", "header").text("Welcome"); appendText public Element appendText​(String text) Create and append a new TextNode to this element. Parameters: text - the unencoded text to add Returns: this element prependText public Element prependText​(String text) Create and prepend a new TextNode to this element. Parameters: text - the unencoded text to add Returns: this element append public Element append​(String html) Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children. Parameters: html - HTML to add inside this element, after the existing HTML Returns: this element See Also: html(String) prepend public Element prepend​(String html) Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element's children. Parameters: html - HTML to add inside this element, before the existing HTML Returns: this element See Also: html(String) before public Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling). Overrides: before in class Node Parameters: html - HTML to add before this element Returns: this element, for chaining See Also: after(String) before public Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling). Overrides: before in class Node Parameters: node - to add before this element Returns: this Element, for chaining See Also: after(Node) after public Element after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling). Overrides: after in class Node Parameters: html - HTML to add after this element Returns: this element, for chaining See Also: before(String) after public Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling). Overrides: after in class Node Parameters: node - to add after this element Returns: this element, for chaining See Also: before(Node) empty public Element empty​() Remove all of the element's child nodes. Any attributes are left as-is. Returns: this element wrap public Element wrap​(String html) Wrap the supplied HTML around this element. Overrides: wrap in class Node Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this element, for chaining. cssSelector public String cssSelector​() Get a CSS selector that will uniquely select this element. If the element has an ID, returns #id; otherwise returns the parent (if any) CSS selector, followed by '>', followed by a unique selector for the element (tag.class.class:nth-child(n)). Returns: the CSS Path that can be used to retrieve the element in a selector. siblingElements public Elements siblingElements​() Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling of itself, so will not be included in the returned list. Returns: sibling elements nextElementSibling public Element nextElementSibling​() Gets the next sibling element of this element. E.g., if a div contains two ps, the nextElementSibling of the first p is the second p. This is similar to Node.nextSibling(), but specifically finds only Elements Returns: the next element, or null if there is no next element See Also: previousElementSibling() previousElementSibling public Element previousElementSibling​() Gets the previous element sibling of this element. Returns: the previous element, or null if there is no previous element See Also: nextElementSibling() firstElementSibling public Element firstElementSibling​() Gets the first element sibling of this element. Returns: the first sibling that is an element (aka the parent's first element child) elementSiblingIndex public int elementSiblingIndex​() Get the list index of this element in its element sibling list. I.e. if this is the first element sibling, returns 0. Returns: position in element sibling list lastElementSibling public Element lastElementSibling​() Gets the last element sibling of this element Returns: the last sibling that is an element (aka the parent's last element child) getElementsByTag public Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name. Parameters: tagName - The tag name to search for (case insensitively). Returns: a matching unmodifiable list of elements. Will be empty if this element and none of its children match. getElementById public Element getElementById​(String id) Find an element by ID, including or under this element. Note that this finds the first matching ID, starting with this element. If you search down from a different starting point, it is possible to find a different element by ID. For unique element by ID within a Document, use getElementById(String) Parameters: id - The ID to search for. Returns: The first matching element by ID, starting with this element, or null if none found. getElementsByClass public Elements getElementsByClass​(String className) Find elements that have this class, including or under this element. Case insensitive. Elements can have multiple classes (e.g. <div class="header round first">. This method checks each class, so you can find the above with el.getElementsByClass("header");. Parameters: className - the name of the class to search for. Returns: elements with the supplied class name, empty if none See Also: hasClass(String), classNames() getElementsByAttribute public Elements getElementsByAttribute​(String key) Find elements that have a named attribute set. Case insensitive. Parameters: key - name of the attribute, e.g. href Returns: elements that have this attribute, empty if none getElementsByAttributeStarting public Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix. Use data- to find elements that have HTML5 datasets. Parameters: keyPrefix - name prefix of the attribute e.g. data- Returns: elements that have attribute names that start with with the prefix, empty if none. getElementsByAttributeValue public Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value. Case insensitive. Parameters: key - name of the attribute value - value of the attribute Returns: elements that have this attribute with this value, empty if none getElementsByAttributeValueNot public Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value. Case insensitive. Parameters: key - name of the attribute value - value of the attribute Returns: elements that do not have a matching attribute getElementsByAttributeValueStarting public Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix. Case insensitive. Parameters: key - name of the attribute valuePrefix - start of attribute value Returns: elements that have attributes that start with the value prefix getElementsByAttributeValueEnding public Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix. Case insensitive. Parameters: key - name of the attribute valueSuffix - end of the attribute value Returns: elements that have attributes that end with the value suffix getElementsByAttributeValueContaining public Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string. Case insensitive. Parameters: key - name of the attribute match - substring of value to search for Returns: elements that have attributes containing this text getElementsByAttributeValueMatching public Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression. Parameters: key - name of the attribute pattern - compiled regular expression to match against attribute values Returns: elements that have attributes matching this regular expression getElementsByAttributeValueMatching public Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression. Parameters: key - name of the attribute regex - regular expression to match against attribute values. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements that have attributes matching this regular expression getElementsByIndexLessThan public Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index. Parameters: index - 0-based index Returns: elements less than index getElementsByIndexGreaterThan public Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index. Parameters: index - 0-based index Returns: elements greater than index getElementsByIndexEquals public Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index. Parameters: index - 0-based index Returns: elements equal to index getElementsContainingText public Elements getElementsContainingText​(String searchText) Find elements that contain the specified string. The search is case insensitive. The text may appear directly in the element, or in any of its descendants. Parameters: searchText - to look for in the element's text Returns: elements that contain the string, case insensitive. See Also: text() getElementsContainingOwnText public Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly in the element, not in any of its descendants. Parameters: searchText - to look for in the element's own text Returns: elements that contain the string, case insensitive. See Also: ownText() getElementsMatchingText public Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression. Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: text() getElementsMatchingText public Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression. Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: text() getElementsMatchingOwnText public Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression. Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: ownText() getElementsMatchingOwnText public Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression. Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: ownText() getAllElements public Elements getAllElements​() Find all elements under this element (including self, and children of children). Returns: all elements text public String text​() Gets the combined text of this element and all its children. Whitespace is normalized and trimmed. For example, given HTML <p>Hello <b>there</b> now! </p>, p.text() returns "Hello there now!" Returns: unencoded, normalized text, or empty string if none. See Also: if you don't want the text to be normalized., ownText(), textNodes() wholeText public String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original. Returns: unencoded, un-normalized text See Also: text() ownText public String ownText​() Gets the text owned by this element only; does not get the combined text of all children. For example, given HTML <p>Hello <b>there</b> now!</p>, p.ownText() returns "Hello now!", whereas p.text() returns "Hello there now!". Note that the text within the b element is not returned, as it is not a direct child of the p element. Returns: unencoded text, or empty string if none. See Also: text(), textNodes() text public Element text​(String text) Set the text of this element. Any existing contents (text or elements) will be cleared Parameters: text - unencoded text Returns: this element hasText public boolean hasText​() Test if this element has any text content (that is not just whitespace). Returns: true if element has non-blank text content. data public String data​() Get the combined data of this element. Data is e.g. the inside of a script tag. Note that data is NOT the text of the element. Use text() to get the text that would be visible to a user, and data() for the contents of scripts, comments, CSS styles, etc. Returns: the data, or empty string if none See Also: dataNodes() className public String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated. (E.g. on <div class="header gray"> returns, " header gray") Returns: The literal class attribute, or empty string if no class attribute set. classNames public Set<String> classNames​() Get all of the element's class names. E.g. on element <div class="header gray">, returns a set of two elements "header", "gray". Note that modifications to this set are not pushed to the backing class attribute; use the classNames(java.util.Set) method to persist them. Returns: set of classnames, empty if no class attribute classNames public Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names. Parameters: classNames - set of classes Returns: this element, for chaining hasClass public boolean hasClass​(String className) Tests if this element has a class. Case insensitive. Parameters: className - name of class to check for Returns: true if it does, false if not addClass public Element addClass​(String className) Add a class name to this element's class attribute. Parameters: className - class name to add Returns: this element removeClass public Element removeClass​(String className) Remove a class name from this element's class attribute. Parameters: className - class name to remove Returns: this element toggleClass public Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it. Parameters: className - class name to toggle Returns: this element val public String val​() Get the value of a form element (input, textarea, etc). Returns: the value of the form element, or empty string if not set. val public Element val​(String value) Set the value of a form element (input, textarea, etc). Parameters: value - value to set Returns: this element (for chaining) html public String html​() Retrieves the element's inner HTML. E.g. on a <div> with one empty <p>, would return <p></p>. (Whereas Node.outerHtml() would return <div><p></p></div>.) Returns: String of HTML. See Also: Node.outerHtml() html public <T extends Appendable> T html​(T appendable) Write this node and its children to the given Appendable. Overrides: html in class Node Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining. html public Element html​(String html) Set this element's inner HTML. Clears the existing HTML first. Parameters: html - HTML to parse and set into this element Returns: this element See Also: append(String) toString public String toString​() Overrides: toString in class Node clone public Element clone​() Description copied from class: Node Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using appendChild(Node). Overrides: clone in class Node Returns: a stand-alone cloned node, including clones of any children See Also: Node.shallowClone() shallowClone public Element shallowClone​() Description copied from class: Node Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes. Overrides: shallowClone in class Node Returns: a single independent copy of this node See Also: Node.clone() doClone protected Element doClone​(Node parent) Overrides: doClone in class NodeConstructor Detail Element public Element​(String tag) Create a new, standalone element. Parameters: tag - tag name Element public Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element. (Standalone in that is has no parent.) Parameters: tag - tag of this element baseUri - the base URI attributes - initial attributes See Also: appendChild(Node), appendElement(String) Element public Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI. Parameters: tag - element tag baseUri - the base URI of this element. It is acceptable for the base URI to be an empty string, but not null. See Also: Tag.valueOf(String, ParseSettings) Method Detail ensureChildNodes protected List<Node> ensureChildNodes​() Specified by: ensureChildNodes in class Node hasAttributes protected boolean hasAttributes​() Description copied from class: Node Check if this Node has an actual Attributes object. Specified by: hasAttributes in class Node attributes public Attributes attributes​() Description copied from class: Node Get all of the element's attributes. Specified by: attributes in class Node Returns: attributes (which implements iterable, in same order as presented in original HTML). baseUri public String baseUri​() Description copied from class: Node Get the base URI of this node. Specified by: baseUri in class Node Returns: base URI doSetBaseUri protected void doSetBaseUri​(String baseUri) Description copied from class: Node Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. Specified by: doSetBaseUri in class Node Parameters: baseUri - new URI childNodeSize public int childNodeSize​() Description copied from class: Node Get the number of child nodes that this node holds. Specified by: childNodeSize in class Node Returns: the number of child nodes that this node holds. nodeName public String nodeName​() Description copied from class: Node Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). Specified by: nodeName in class Node Returns: node name tagName public String tagName​() Get the name of the tag for this element. E.g. div Returns: the tag name tagName public Element tagName​(String tagName) Change the tag of this element. For example, convert a <span> to a <div> with el.tagName("div");. Parameters: tagName - new tag name for this element Returns: this element, for chaining tag public Tag tag​() Get the Tag for this element. Returns: the tag object isBlock public boolean isBlock​() Test if this element is a block-level element. (E.g. <div> == true or an inline element <p> == false). Returns: true if block, false if not (and thus inline) id public String id​() Get the id attribute of this element. Returns: The id attribute, if present, or an empty string if not. attr public Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element. If this element already has an attribute with the key, its value is updated; otherwise, a new attribute is added. Overrides: attr in class Node Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this element attr public Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element. Setting to true sets the attribute value to "" and marks the attribute as boolean so no value is written out. Setting to false removes the attribute with the same key if it exists. Parameters: attributeKey - the attribute key attributeValue - the attribute value Returns: this element dataset public Map<String,String> dataset​() Get this element's HTML5 custom data attributes. Each attribute in the element that has a key starting with "data-" is included the dataset. E.g., the element <div data-package="jsoup" data-language="Java" class="group">... has the dataset package=jsoup, language=java. This map is a filtered view of the element's attribute map. Changes to one map (add, remove, update) are reflected in the other map. You can find elements that have data attributes using the [^data-] attribute key prefix selector. Returns: a map of key=value custom data attributes. parent public final Element parent​() Description copied from class: Node Gets this node's parent node. Overrides: parent in class Node Returns: parent node; or null if no parent. parents public Elements parents​() Get this element's parent and ancestors, up to the document root. Returns: this element's stack of parents, closest first. child public Element child​(int index) Get a child element of this element, by its 0-based index number. Note that an element can have both mixed Nodes and Elements as children. This method inspects a filtered list of children that are elements, and the index is based on that filtered list. Parameters: index - the index number of the element to retrieve Returns: the child element, if it exists, otherwise throws an IndexOutOfBoundsException See Also: Node.childNode(int) children public Elements children​() Get this element's child elements. This is effectively a filter on Node.childNodes() to get Element nodes. Returns: child elements. If this element has no children, returns an empty list. See Also: Node.childNodes() textNodes public List<TextNode> textNodes​() Get this element's child text nodes. The list is unmodifiable but the text nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Text nodes. Returns: child text nodes. If this element has no text nodes, returns an empty list. For example, with the input HTML: <p>One <span>Two</span> Three <br> Four</p> with the p element selected: p.text() = "One Two Three Four" p.ownText() = "One Three Four" p.children() = Elements[<span>, <br>] p.childNodes() = List<Node>["One ", <span>, " Three ", <br>, " Four"] p.textNodes() = List<TextNode>["One ", " Three ", " Four"] dataNodes public List<DataNode> dataNodes​() Get this element's child data nodes. The list is unmodifiable but the data nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Data nodes. Returns: child data nodes. If this element has no data nodes, returns an empty list. See Also: data() select public Elements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context. Matched elements may include this element, or any of its children. This method is generally more powerful to use than the DOM-type getElementBy* methods, because multiple filters can be combined, e.g.: el.select("a[href]") - finds links (a tags with href attributes) el.select("a[href*=example.com]") - finds links pointing to example.com (loosely) See the query syntax documentation in Selector. Parameters: cssQuery - a Selector CSS-like query Returns: elements that match the query (empty if none match) Throws: Selector.SelectorParseException - (unchecked) on an invalid CSS query. See Also: Selector selectFirst public Element selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context. This is effectively the same as calling element.select(query).first(), but is more efficient as query execution stops on the first hit. Parameters: cssQuery - cssQuery a Selector CSS-like query Returns: the first matching element, or null if there is no match. is public boolean is​(String cssQuery) Check if this element matches the given Selector CSS query. Parameters: cssQuery - a Selector CSS query Returns: if this element matches the query is public boolean is​(Evaluator evaluator) Check if this element matches the given evaluator. Parameters: evaluator - an element evaluator Returns: if this element matches appendChild public Element appendChild​(Node child) Add a node child node to this element. Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements. appendTo public Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child. Parameters: parent - element to which this element will be appended Returns: this element, so that you can continue modifying the element prependChild public Element prependChild​(Node child) Add a node to the start of this element's children. Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements. insertChildren public Element insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first. Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining. insertChildren public Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first. Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining. appendElement public Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child. Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.appendElement("h1").attr("id", "header").text("Welcome"); prependElement public Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child. Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.prependElement("h1").attr("id", "header").text("Welcome"); appendText public Element appendText​(String text) Create and append a new TextNode to this element. Parameters: text - the unencoded text to add Returns: this element prependText public Element prependText​(String text) Create and prepend a new TextNode to this element. Parameters: text - the unencoded text to add Returns: this element append public Element append​(String html) Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children. Parameters: html - HTML to add inside this element, after the existing HTML Returns: this element See Also: html(String) prepend public Element prepend​(String html) Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element's children. Parameters: html - HTML to add inside this element, before the existing HTML Returns: this element See Also: html(String) before public Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling). Overrides: before in class Node Parameters: html - HTML to add before this element Returns: this element, for chaining See Also: after(String) before public Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling). Overrides: before in class Node Parameters: node - to add before this element Returns: this Element, for chaining See Also: after(Node) after public Element after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling). Overrides: after in class Node Parameters: html - HTML to add after this element Returns: this element, for chaining See Also: before(String) after public Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling). Overrides: after in class Node Parameters: node - to add after this element Returns: this element, for chaining See Also: before(Node) empty public Element empty​() Remove all of the element's child nodes. Any attributes are left as-is. Returns: this element wrap public Element wrap​(String html) Wrap the supplied HTML around this element. Overrides: wrap in class Node Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this element, for chaining. cssSelector public String cssSelector​() Get a CSS selector that will uniquely select this element. If the element has an ID, returns #id; otherwise returns the parent (if any) CSS selector, followed by '>', followed by a unique selector for the element (tag.class.class:nth-child(n)). Returns: the CSS Path that can be used to retrieve the element in a selector. siblingElements public Elements siblingElements​() Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling of itself, so will not be included in the returned list. Returns: sibling elements nextElementSibling public Element nextElementSibling​() Gets the next sibling element of this element. E.g., if a div contains two ps, the nextElementSibling of the first p is the second p. This is similar to Node.nextSibling(), but specifically finds only Elements Returns: the next element, or null if there is no next element See Also: previousElementSibling() previousElementSibling public Element previousElementSibling​() Gets the previous element sibling of this element. Returns: the previous element, or null if there is no previous element See Also: nextElementSibling() firstElementSibling public Element firstElementSibling​() Gets the first element sibling of this element. Returns: the first sibling that is an element (aka the parent's first element child) elementSiblingIndex public int elementSiblingIndex​() Get the list index of this element in its element sibling list. I.e. if this is the first element sibling, returns 0. Returns: position in element sibling list lastElementSibling public Element lastElementSibling​() Gets the last element sibling of this element Returns: the last sibling that is an element (aka the parent's last element child) getElementsByTag public Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name. Parameters: tagName - The tag name to search for (case insensitively). Returns: a matching unmodifiable list of elements. Will be empty if this element and none of its children match. getElementById public Element getElementById​(String id) Find an element by ID, including or under this element. Note that this finds the first matching ID, starting with this element. If you search down from a different starting point, it is possible to find a different element by ID. For unique element by ID within a Document, use getElementById(String) Parameters: id - The ID to search for. Returns: The first matching element by ID, starting with this element, or null if none found. getElementsByClass public Elements getElementsByClass​(String className) Find elements that have this class, including or under this element. Case insensitive. Elements can have multiple classes (e.g. <div class="header round first">. This method checks each class, so you can find the above with el.getElementsByClass("header");. Parameters: className - the name of the class to search for. Returns: elements with the supplied class name, empty if none See Also: hasClass(String), classNames() getElementsByAttribute public Elements getElementsByAttribute​(String key) Find elements that have a named attribute set. Case insensitive. Parameters: key - name of the attribute, e.g. href Returns: elements that have this attribute, empty if none getElementsByAttributeStarting public Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix. Use data- to find elements that have HTML5 datasets. Parameters: keyPrefix - name prefix of the attribute e.g. data- Returns: elements that have attribute names that start with with the prefix, empty if none. getElementsByAttributeValue public Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value. Case insensitive. Parameters: key - name of the attribute value - value of the attribute Returns: elements that have this attribute with this value, empty if none getElementsByAttributeValueNot public Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value. Case insensitive. Parameters: key - name of the attribute value - value of the attribute Returns: elements that do not have a matching attribute getElementsByAttributeValueStarting public Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix. Case insensitive. Parameters: key - name of the attribute valuePrefix - start of attribute value Returns: elements that have attributes that start with the value prefix getElementsByAttributeValueEnding public Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix. Case insensitive. Parameters: key - name of the attribute valueSuffix - end of the attribute value Returns: elements that have attributes that end with the value suffix getElementsByAttributeValueContaining public Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string. Case insensitive. Parameters: key - name of the attribute match - substring of value to search for Returns: elements that have attributes containing this text getElementsByAttributeValueMatching public Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression. Parameters: key - name of the attribute pattern - compiled regular expression to match against attribute values Returns: elements that have attributes matching this regular expression getElementsByAttributeValueMatching public Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression. Parameters: key - name of the attribute regex - regular expression to match against attribute values. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements that have attributes matching this regular expression getElementsByIndexLessThan public Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index. Parameters: index - 0-based index Returns: elements less than index getElementsByIndexGreaterThan public Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index. Parameters: index - 0-based index Returns: elements greater than index getElementsByIndexEquals public Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index. Parameters: index - 0-based index Returns: elements equal to index getElementsContainingText public Elements getElementsContainingText​(String searchText) Find elements that contain the specified string. The search is case insensitive. The text may appear directly in the element, or in any of its descendants. Parameters: searchText - to look for in the element's text Returns: elements that contain the string, case insensitive. See Also: text() getElementsContainingOwnText public Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly in the element, not in any of its descendants. Parameters: searchText - to look for in the element's own text Returns: elements that contain the string, case insensitive. See Also: ownText() getElementsMatchingText public Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression. Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: text() getElementsMatchingText public Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression. Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: text() getElementsMatchingOwnText public Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression. Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: ownText() getElementsMatchingOwnText public Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression. Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: ownText() getAllElements public Elements getAllElements​() Find all elements under this element (including self, and children of children). Returns: all elements text public String text​() Gets the combined text of this element and all its children. Whitespace is normalized and trimmed. For example, given HTML <p>Hello <b>there</b> now! </p>, p.text() returns "Hello there now!" Returns: unencoded, normalized text, or empty string if none. See Also: if you don't want the text to be normalized., ownText(), textNodes() wholeText public String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original. Returns: unencoded, un-normalized text See Also: text() ownText public String ownText​() Gets the text owned by this element only; does not get the combined text of all children. For example, given HTML <p>Hello <b>there</b> now!</p>, p.ownText() returns "Hello now!", whereas p.text() returns "Hello there now!". Note that the text within the b element is not returned, as it is not a direct child of the p element. Returns: unencoded text, or empty string if none. See Also: text(), textNodes() text public Element text​(String text) Set the text of this element. Any existing contents (text or elements) will be cleared Parameters: text - unencoded text Returns: this element hasText public boolean hasText​() Test if this element has any text content (that is not just whitespace). Returns: true if element has non-blank text content. data public String data​() Get the combined data of this element. Data is e.g. the inside of a script tag. Note that data is NOT the text of the element. Use text() to get the text that would be visible to a user, and data() for the contents of scripts, comments, CSS styles, etc. Returns: the data, or empty string if none See Also: dataNodes() className public String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated. (E.g. on <div class="header gray"> returns, " header gray") Returns: The literal class attribute, or empty string if no class attribute set. classNames public Set<String> classNames​() Get all of the element's class names. E.g. on element <div class="header gray">, returns a set of two elements "header", "gray". Note that modifications to this set are not pushed to the backing class attribute; use the classNames(java.util.Set) method to persist them. Returns: set of classnames, empty if no class attribute classNames public Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names. Parameters: classNames - set of classes Returns: this element, for chaining hasClass public boolean hasClass​(String className) Tests if this element has a class. Case insensitive. Parameters: className - name of class to check for Returns: true if it does, false if not addClass public Element addClass​(String className) Add a class name to this element's class attribute. Parameters: className - class name to add Returns: this element removeClass public Element removeClass​(String className) Remove a class name from this element's class attribute. Parameters: className - class name to remove Returns: this element toggleClass public Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it. Parameters: className - class name to toggle Returns: this element val public String val​() Get the value of a form element (input, textarea, etc). Returns: the value of the form element, or empty string if not set. val public Element val​(String value) Set the value of a form element (input, textarea, etc). Parameters: value - value to set Returns: this element (for chaining) html public String html​() Retrieves the element's inner HTML. E.g. on a <div> with one empty <p>, would return <p></p>. (Whereas Node.outerHtml() would return <div><p></p></div>.) Returns: String of HTML. See Also: Node.outerHtml() html public <T extends Appendable> T html​(T appendable) Write this node and its children to the given Appendable. Overrides: html in class Node Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining. html public Element html​(String html) Set this element's inner HTML. Clears the existing HTML first. Parameters: html - HTML to parse and set into this element Returns: this element See Also: append(String) toString public String toString​() Overrides: toString in class Node clone public Element clone​() Description copied from class: Node Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using appendChild(Node). Overrides: clone in class Node Returns: a stand-alone cloned node, including clones of any children See Also: Node.shallowClone() shallowClone public Element shallowClone​() Description copied from class: Node Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes. Overrides: shallowClone in class Node Returns: a single independent copy of this node See Also: Node.clone() doClone protected Element doClone​(Node parent) Overrides: doClone in class NodeConstructor Detail Element public Element​(String tag) Create a new, standalone element. Parameters: tag - tag name Element public Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element. (Standalone in that is has no parent.) Parameters: tag - tag of this element baseUri - the base URI attributes - initial attributes See Also: appendChild(Node), appendElement(String) Element public Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI. Parameters: tag - element tag baseUri - the base URI of this element. It is acceptable for the base URI to be an empty string, but not null. See Also: Tag.valueOf(String, ParseSettings)Constructor Detail Element public Element​(String tag) Create a new, standalone element. Parameters: tag - tag name Element public Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element. (Standalone in that is has no parent.) Parameters: tag - tag of this element baseUri - the base URI attributes - initial attributes See Also: appendChild(Node), appendElement(String) Element public Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI. Parameters: tag - element tag baseUri - the base URI of this element. It is acceptable for the base URI to be an empty string, but not null. See Also: Tag.valueOf(String, ParseSettings)Constructor DetailElement public Element​(String tag) Create a new, standalone element. Parameters: tag - tag nameElement public Element​(String tag) Create a new, standalone element. Parameters: tag - tag nameElementpublic Element​(String tag)StringCreate a new, standalone element.Parameters: tag - tag nameParameters:Parameters:tag - tag nametagElement public Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element. (Standalone in that is has no parent.) Parameters: tag - tag of this element baseUri - the base URI attributes - initial attributes See Also: appendChild(Node), appendElement(String)Element public Element​(Tag tag, String baseUri, Attributes attributes) Create a new, standalone Element. (Standalone in that is has no parent.) Parameters: tag - tag of this element baseUri - the base URI attributes - initial attributes See Also: appendChild(Node), appendElement(String)Elementpublic Element​(Tag tag, String baseUri, Attributes attributes)TagStringAttributesCreate a new, standalone Element. (Standalone in that is has no parent.)Parameters: tag - tag of this element baseUri - the base URI attributes - initial attributes See Also: appendChild(Node), appendElement(String)Parameters:Parameters:tag - tag of this elementtagbaseUri - the base URIbaseUriattributes - initial attributesattributesSee Also:See Also:appendChild(Node), appendElement(String)appendChild(Node)appendChild(Node)appendElement(String)appendElement(String)Element public Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI. Parameters: tag - element tag baseUri - the base URI of this element. It is acceptable for the base URI to be an empty string, but not null. See Also: Tag.valueOf(String, ParseSettings)Element public Element​(Tag tag, String baseUri) Create a new Element from a tag and a base URI. Parameters: tag - element tag baseUri - the base URI of this element. It is acceptable for the base URI to be an empty string, but not null. See Also: Tag.valueOf(String, ParseSettings)Elementpublic Element​(Tag tag, String baseUri)TagStringCreate a new Element from a tag and a base URI.Parameters: tag - element tag baseUri - the base URI of this element. It is acceptable for the base URI to be an empty string, but not null. See Also: Tag.valueOf(String, ParseSettings)Parameters:Parameters:tag - element tagtagbaseUri - the base URI of this element. It is acceptable for the base URI to be an empty string, but not null.baseUriSee Also:See Also:Tag.valueOf(String, ParseSettings)Tag.valueOf(String, ParseSettings)Tag.valueOf(String, ParseSettings)Method Detail ensureChildNodes protected List<Node> ensureChildNodes​() Specified by: ensureChildNodes in class Node hasAttributes protected boolean hasAttributes​() Description copied from class: Node Check if this Node has an actual Attributes object. Specified by: hasAttributes in class Node attributes public Attributes attributes​() Description copied from class: Node Get all of the element's attributes. Specified by: attributes in class Node Returns: attributes (which implements iterable, in same order as presented in original HTML). baseUri public String baseUri​() Description copied from class: Node Get the base URI of this node. Specified by: baseUri in class Node Returns: base URI doSetBaseUri protected void doSetBaseUri​(String baseUri) Description copied from class: Node Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. Specified by: doSetBaseUri in class Node Parameters: baseUri - new URI childNodeSize public int childNodeSize​() Description copied from class: Node Get the number of child nodes that this node holds. Specified by: childNodeSize in class Node Returns: the number of child nodes that this node holds. nodeName public String nodeName​() Description copied from class: Node Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). Specified by: nodeName in class Node Returns: node name tagName public String tagName​() Get the name of the tag for this element. E.g. div Returns: the tag name tagName public Element tagName​(String tagName) Change the tag of this element. For example, convert a <span> to a <div> with el.tagName("div");. Parameters: tagName - new tag name for this element Returns: this element, for chaining tag public Tag tag​() Get the Tag for this element. Returns: the tag object isBlock public boolean isBlock​() Test if this element is a block-level element. (E.g. <div> == true or an inline element <p> == false). Returns: true if block, false if not (and thus inline) id public String id​() Get the id attribute of this element. Returns: The id attribute, if present, or an empty string if not. attr public Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element. If this element already has an attribute with the key, its value is updated; otherwise, a new attribute is added. Overrides: attr in class Node Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this element attr public Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element. Setting to true sets the attribute value to "" and marks the attribute as boolean so no value is written out. Setting to false removes the attribute with the same key if it exists. Parameters: attributeKey - the attribute key attributeValue - the attribute value Returns: this element dataset public Map<String,String> dataset​() Get this element's HTML5 custom data attributes. Each attribute in the element that has a key starting with "data-" is included the dataset. E.g., the element <div data-package="jsoup" data-language="Java" class="group">... has the dataset package=jsoup, language=java. This map is a filtered view of the element's attribute map. Changes to one map (add, remove, update) are reflected in the other map. You can find elements that have data attributes using the [^data-] attribute key prefix selector. Returns: a map of key=value custom data attributes. parent public final Element parent​() Description copied from class: Node Gets this node's parent node. Overrides: parent in class Node Returns: parent node; or null if no parent. parents public Elements parents​() Get this element's parent and ancestors, up to the document root. Returns: this element's stack of parents, closest first. child public Element child​(int index) Get a child element of this element, by its 0-based index number. Note that an element can have both mixed Nodes and Elements as children. This method inspects a filtered list of children that are elements, and the index is based on that filtered list. Parameters: index - the index number of the element to retrieve Returns: the child element, if it exists, otherwise throws an IndexOutOfBoundsException See Also: Node.childNode(int) children public Elements children​() Get this element's child elements. This is effectively a filter on Node.childNodes() to get Element nodes. Returns: child elements. If this element has no children, returns an empty list. See Also: Node.childNodes() textNodes public List<TextNode> textNodes​() Get this element's child text nodes. The list is unmodifiable but the text nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Text nodes. Returns: child text nodes. If this element has no text nodes, returns an empty list. For example, with the input HTML: <p>One <span>Two</span> Three <br> Four</p> with the p element selected: p.text() = "One Two Three Four" p.ownText() = "One Three Four" p.children() = Elements[<span>, <br>] p.childNodes() = List<Node>["One ", <span>, " Three ", <br>, " Four"] p.textNodes() = List<TextNode>["One ", " Three ", " Four"] dataNodes public List<DataNode> dataNodes​() Get this element's child data nodes. The list is unmodifiable but the data nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Data nodes. Returns: child data nodes. If this element has no data nodes, returns an empty list. See Also: data() select public Elements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context. Matched elements may include this element, or any of its children. This method is generally more powerful to use than the DOM-type getElementBy* methods, because multiple filters can be combined, e.g.: el.select("a[href]") - finds links (a tags with href attributes) el.select("a[href*=example.com]") - finds links pointing to example.com (loosely) See the query syntax documentation in Selector. Parameters: cssQuery - a Selector CSS-like query Returns: elements that match the query (empty if none match) Throws: Selector.SelectorParseException - (unchecked) on an invalid CSS query. See Also: Selector selectFirst public Element selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context. This is effectively the same as calling element.select(query).first(), but is more efficient as query execution stops on the first hit. Parameters: cssQuery - cssQuery a Selector CSS-like query Returns: the first matching element, or null if there is no match. is public boolean is​(String cssQuery) Check if this element matches the given Selector CSS query. Parameters: cssQuery - a Selector CSS query Returns: if this element matches the query is public boolean is​(Evaluator evaluator) Check if this element matches the given evaluator. Parameters: evaluator - an element evaluator Returns: if this element matches appendChild public Element appendChild​(Node child) Add a node child node to this element. Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements. appendTo public Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child. Parameters: parent - element to which this element will be appended Returns: this element, so that you can continue modifying the element prependChild public Element prependChild​(Node child) Add a node to the start of this element's children. Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements. insertChildren public Element insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first. Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining. insertChildren public Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first. Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining. appendElement public Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child. Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.appendElement("h1").attr("id", "header").text("Welcome"); prependElement public Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child. Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.prependElement("h1").attr("id", "header").text("Welcome"); appendText public Element appendText​(String text) Create and append a new TextNode to this element. Parameters: text - the unencoded text to add Returns: this element prependText public Element prependText​(String text) Create and prepend a new TextNode to this element. Parameters: text - the unencoded text to add Returns: this element append public Element append​(String html) Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children. Parameters: html - HTML to add inside this element, after the existing HTML Returns: this element See Also: html(String) prepend public Element prepend​(String html) Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element's children. Parameters: html - HTML to add inside this element, before the existing HTML Returns: this element See Also: html(String) before public Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling). Overrides: before in class Node Parameters: html - HTML to add before this element Returns: this element, for chaining See Also: after(String) before public Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling). Overrides: before in class Node Parameters: node - to add before this element Returns: this Element, for chaining See Also: after(Node) after public Element after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling). Overrides: after in class Node Parameters: html - HTML to add after this element Returns: this element, for chaining See Also: before(String) after public Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling). Overrides: after in class Node Parameters: node - to add after this element Returns: this element, for chaining See Also: before(Node) empty public Element empty​() Remove all of the element's child nodes. Any attributes are left as-is. Returns: this element wrap public Element wrap​(String html) Wrap the supplied HTML around this element. Overrides: wrap in class Node Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this element, for chaining. cssSelector public String cssSelector​() Get a CSS selector that will uniquely select this element. If the element has an ID, returns #id; otherwise returns the parent (if any) CSS selector, followed by '>', followed by a unique selector for the element (tag.class.class:nth-child(n)). Returns: the CSS Path that can be used to retrieve the element in a selector. siblingElements public Elements siblingElements​() Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling of itself, so will not be included in the returned list. Returns: sibling elements nextElementSibling public Element nextElementSibling​() Gets the next sibling element of this element. E.g., if a div contains two ps, the nextElementSibling of the first p is the second p. This is similar to Node.nextSibling(), but specifically finds only Elements Returns: the next element, or null if there is no next element See Also: previousElementSibling() previousElementSibling public Element previousElementSibling​() Gets the previous element sibling of this element. Returns: the previous element, or null if there is no previous element See Also: nextElementSibling() firstElementSibling public Element firstElementSibling​() Gets the first element sibling of this element. Returns: the first sibling that is an element (aka the parent's first element child) elementSiblingIndex public int elementSiblingIndex​() Get the list index of this element in its element sibling list. I.e. if this is the first element sibling, returns 0. Returns: position in element sibling list lastElementSibling public Element lastElementSibling​() Gets the last element sibling of this element Returns: the last sibling that is an element (aka the parent's last element child) getElementsByTag public Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name. Parameters: tagName - The tag name to search for (case insensitively). Returns: a matching unmodifiable list of elements. Will be empty if this element and none of its children match. getElementById public Element getElementById​(String id) Find an element by ID, including or under this element. Note that this finds the first matching ID, starting with this element. If you search down from a different starting point, it is possible to find a different element by ID. For unique element by ID within a Document, use getElementById(String) Parameters: id - The ID to search for. Returns: The first matching element by ID, starting with this element, or null if none found. getElementsByClass public Elements getElementsByClass​(String className) Find elements that have this class, including or under this element. Case insensitive. Elements can have multiple classes (e.g. <div class="header round first">. This method checks each class, so you can find the above with el.getElementsByClass("header");. Parameters: className - the name of the class to search for. Returns: elements with the supplied class name, empty if none See Also: hasClass(String), classNames() getElementsByAttribute public Elements getElementsByAttribute​(String key) Find elements that have a named attribute set. Case insensitive. Parameters: key - name of the attribute, e.g. href Returns: elements that have this attribute, empty if none getElementsByAttributeStarting public Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix. Use data- to find elements that have HTML5 datasets. Parameters: keyPrefix - name prefix of the attribute e.g. data- Returns: elements that have attribute names that start with with the prefix, empty if none. getElementsByAttributeValue public Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value. Case insensitive. Parameters: key - name of the attribute value - value of the attribute Returns: elements that have this attribute with this value, empty if none getElementsByAttributeValueNot public Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value. Case insensitive. Parameters: key - name of the attribute value - value of the attribute Returns: elements that do not have a matching attribute getElementsByAttributeValueStarting public Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix. Case insensitive. Parameters: key - name of the attribute valuePrefix - start of attribute value Returns: elements that have attributes that start with the value prefix getElementsByAttributeValueEnding public Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix. Case insensitive. Parameters: key - name of the attribute valueSuffix - end of the attribute value Returns: elements that have attributes that end with the value suffix getElementsByAttributeValueContaining public Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string. Case insensitive. Parameters: key - name of the attribute match - substring of value to search for Returns: elements that have attributes containing this text getElementsByAttributeValueMatching public Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression. Parameters: key - name of the attribute pattern - compiled regular expression to match against attribute values Returns: elements that have attributes matching this regular expression getElementsByAttributeValueMatching public Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression. Parameters: key - name of the attribute regex - regular expression to match against attribute values. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements that have attributes matching this regular expression getElementsByIndexLessThan public Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index. Parameters: index - 0-based index Returns: elements less than index getElementsByIndexGreaterThan public Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index. Parameters: index - 0-based index Returns: elements greater than index getElementsByIndexEquals public Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index. Parameters: index - 0-based index Returns: elements equal to index getElementsContainingText public Elements getElementsContainingText​(String searchText) Find elements that contain the specified string. The search is case insensitive. The text may appear directly in the element, or in any of its descendants. Parameters: searchText - to look for in the element's text Returns: elements that contain the string, case insensitive. See Also: text() getElementsContainingOwnText public Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly in the element, not in any of its descendants. Parameters: searchText - to look for in the element's own text Returns: elements that contain the string, case insensitive. See Also: ownText() getElementsMatchingText public Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression. Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: text() getElementsMatchingText public Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression. Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: text() getElementsMatchingOwnText public Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression. Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: ownText() getElementsMatchingOwnText public Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression. Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: ownText() getAllElements public Elements getAllElements​() Find all elements under this element (including self, and children of children). Returns: all elements text public String text​() Gets the combined text of this element and all its children. Whitespace is normalized and trimmed. For example, given HTML <p>Hello <b>there</b> now! </p>, p.text() returns "Hello there now!" Returns: unencoded, normalized text, or empty string if none. See Also: if you don't want the text to be normalized., ownText(), textNodes() wholeText public String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original. Returns: unencoded, un-normalized text See Also: text() ownText public String ownText​() Gets the text owned by this element only; does not get the combined text of all children. For example, given HTML <p>Hello <b>there</b> now!</p>, p.ownText() returns "Hello now!", whereas p.text() returns "Hello there now!". Note that the text within the b element is not returned, as it is not a direct child of the p element. Returns: unencoded text, or empty string if none. See Also: text(), textNodes() text public Element text​(String text) Set the text of this element. Any existing contents (text or elements) will be cleared Parameters: text - unencoded text Returns: this element hasText public boolean hasText​() Test if this element has any text content (that is not just whitespace). Returns: true if element has non-blank text content. data public String data​() Get the combined data of this element. Data is e.g. the inside of a script tag. Note that data is NOT the text of the element. Use text() to get the text that would be visible to a user, and data() for the contents of scripts, comments, CSS styles, etc. Returns: the data, or empty string if none See Also: dataNodes() className public String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated. (E.g. on <div class="header gray"> returns, " header gray") Returns: The literal class attribute, or empty string if no class attribute set. classNames public Set<String> classNames​() Get all of the element's class names. E.g. on element <div class="header gray">, returns a set of two elements "header", "gray". Note that modifications to this set are not pushed to the backing class attribute; use the classNames(java.util.Set) method to persist them. Returns: set of classnames, empty if no class attribute classNames public Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names. Parameters: classNames - set of classes Returns: this element, for chaining hasClass public boolean hasClass​(String className) Tests if this element has a class. Case insensitive. Parameters: className - name of class to check for Returns: true if it does, false if not addClass public Element addClass​(String className) Add a class name to this element's class attribute. Parameters: className - class name to add Returns: this element removeClass public Element removeClass​(String className) Remove a class name from this element's class attribute. Parameters: className - class name to remove Returns: this element toggleClass public Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it. Parameters: className - class name to toggle Returns: this element val public String val​() Get the value of a form element (input, textarea, etc). Returns: the value of the form element, or empty string if not set. val public Element val​(String value) Set the value of a form element (input, textarea, etc). Parameters: value - value to set Returns: this element (for chaining) html public String html​() Retrieves the element's inner HTML. E.g. on a <div> with one empty <p>, would return <p></p>. (Whereas Node.outerHtml() would return <div><p></p></div>.) Returns: String of HTML. See Also: Node.outerHtml() html public <T extends Appendable> T html​(T appendable) Write this node and its children to the given Appendable. Overrides: html in class Node Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining. html public Element html​(String html) Set this element's inner HTML. Clears the existing HTML first. Parameters: html - HTML to parse and set into this element Returns: this element See Also: append(String) toString public String toString​() Overrides: toString in class Node clone public Element clone​() Description copied from class: Node Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using appendChild(Node). Overrides: clone in class Node Returns: a stand-alone cloned node, including clones of any children See Also: Node.shallowClone() shallowClone public Element shallowClone​() Description copied from class: Node Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes. Overrides: shallowClone in class Node Returns: a single independent copy of this node See Also: Node.clone() doClone protected Element doClone​(Node parent) Overrides: doClone in class NodeMethod Detail ensureChildNodes protected List<Node> ensureChildNodes​() Specified by: ensureChildNodes in class Node hasAttributes protected boolean hasAttributes​() Description copied from class: Node Check if this Node has an actual Attributes object. Specified by: hasAttributes in class Node attributes public Attributes attributes​() Description copied from class: Node Get all of the element's attributes. Specified by: attributes in class Node Returns: attributes (which implements iterable, in same order as presented in original HTML). baseUri public String baseUri​() Description copied from class: Node Get the base URI of this node. Specified by: baseUri in class Node Returns: base URI doSetBaseUri protected void doSetBaseUri​(String baseUri) Description copied from class: Node Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. Specified by: doSetBaseUri in class Node Parameters: baseUri - new URI childNodeSize public int childNodeSize​() Description copied from class: Node Get the number of child nodes that this node holds. Specified by: childNodeSize in class Node Returns: the number of child nodes that this node holds. nodeName public String nodeName​() Description copied from class: Node Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). Specified by: nodeName in class Node Returns: node name tagName public String tagName​() Get the name of the tag for this element. E.g. div Returns: the tag name tagName public Element tagName​(String tagName) Change the tag of this element. For example, convert a <span> to a <div> with el.tagName("div");. Parameters: tagName - new tag name for this element Returns: this element, for chaining tag public Tag tag​() Get the Tag for this element. Returns: the tag object isBlock public boolean isBlock​() Test if this element is a block-level element. (E.g. <div> == true or an inline element <p> == false). Returns: true if block, false if not (and thus inline) id public String id​() Get the id attribute of this element. Returns: The id attribute, if present, or an empty string if not. attr public Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element. If this element already has an attribute with the key, its value is updated; otherwise, a new attribute is added. Overrides: attr in class Node Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this element attr public Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element. Setting to true sets the attribute value to "" and marks the attribute as boolean so no value is written out. Setting to false removes the attribute with the same key if it exists. Parameters: attributeKey - the attribute key attributeValue - the attribute value Returns: this element dataset public Map<String,String> dataset​() Get this element's HTML5 custom data attributes. Each attribute in the element that has a key starting with "data-" is included the dataset. E.g., the element <div data-package="jsoup" data-language="Java" class="group">... has the dataset package=jsoup, language=java. This map is a filtered view of the element's attribute map. Changes to one map (add, remove, update) are reflected in the other map. You can find elements that have data attributes using the [^data-] attribute key prefix selector. Returns: a map of key=value custom data attributes. parent public final Element parent​() Description copied from class: Node Gets this node's parent node. Overrides: parent in class Node Returns: parent node; or null if no parent. parents public Elements parents​() Get this element's parent and ancestors, up to the document root. Returns: this element's stack of parents, closest first. child public Element child​(int index) Get a child element of this element, by its 0-based index number. Note that an element can have both mixed Nodes and Elements as children. This method inspects a filtered list of children that are elements, and the index is based on that filtered list. Parameters: index - the index number of the element to retrieve Returns: the child element, if it exists, otherwise throws an IndexOutOfBoundsException See Also: Node.childNode(int) children public Elements children​() Get this element's child elements. This is effectively a filter on Node.childNodes() to get Element nodes. Returns: child elements. If this element has no children, returns an empty list. See Also: Node.childNodes() textNodes public List<TextNode> textNodes​() Get this element's child text nodes. The list is unmodifiable but the text nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Text nodes. Returns: child text nodes. If this element has no text nodes, returns an empty list. For example, with the input HTML: <p>One <span>Two</span> Three <br> Four</p> with the p element selected: p.text() = "One Two Three Four" p.ownText() = "One Three Four" p.children() = Elements[<span>, <br>] p.childNodes() = List<Node>["One ", <span>, " Three ", <br>, " Four"] p.textNodes() = List<TextNode>["One ", " Three ", " Four"] dataNodes public List<DataNode> dataNodes​() Get this element's child data nodes. The list is unmodifiable but the data nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Data nodes. Returns: child data nodes. If this element has no data nodes, returns an empty list. See Also: data() select public Elements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context. Matched elements may include this element, or any of its children. This method is generally more powerful to use than the DOM-type getElementBy* methods, because multiple filters can be combined, e.g.: el.select("a[href]") - finds links (a tags with href attributes) el.select("a[href*=example.com]") - finds links pointing to example.com (loosely) See the query syntax documentation in Selector. Parameters: cssQuery - a Selector CSS-like query Returns: elements that match the query (empty if none match) Throws: Selector.SelectorParseException - (unchecked) on an invalid CSS query. See Also: Selector selectFirst public Element selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context. This is effectively the same as calling element.select(query).first(), but is more efficient as query execution stops on the first hit. Parameters: cssQuery - cssQuery a Selector CSS-like query Returns: the first matching element, or null if there is no match. is public boolean is​(String cssQuery) Check if this element matches the given Selector CSS query. Parameters: cssQuery - a Selector CSS query Returns: if this element matches the query is public boolean is​(Evaluator evaluator) Check if this element matches the given evaluator. Parameters: evaluator - an element evaluator Returns: if this element matches appendChild public Element appendChild​(Node child) Add a node child node to this element. Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements. appendTo public Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child. Parameters: parent - element to which this element will be appended Returns: this element, so that you can continue modifying the element prependChild public Element prependChild​(Node child) Add a node to the start of this element's children. Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements. insertChildren public Element insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first. Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining. insertChildren public Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first. Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining. appendElement public Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child. Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.appendElement("h1").attr("id", "header").text("Welcome"); prependElement public Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child. Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.prependElement("h1").attr("id", "header").text("Welcome"); appendText public Element appendText​(String text) Create and append a new TextNode to this element. Parameters: text - the unencoded text to add Returns: this element prependText public Element prependText​(String text) Create and prepend a new TextNode to this element. Parameters: text - the unencoded text to add Returns: this element append public Element append​(String html) Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children. Parameters: html - HTML to add inside this element, after the existing HTML Returns: this element See Also: html(String) prepend public Element prepend​(String html) Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element's children. Parameters: html - HTML to add inside this element, before the existing HTML Returns: this element See Also: html(String) before public Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling). Overrides: before in class Node Parameters: html - HTML to add before this element Returns: this element, for chaining See Also: after(String) before public Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling). Overrides: before in class Node Parameters: node - to add before this element Returns: this Element, for chaining See Also: after(Node) after public Element after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling). Overrides: after in class Node Parameters: html - HTML to add after this element Returns: this element, for chaining See Also: before(String) after public Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling). Overrides: after in class Node Parameters: node - to add after this element Returns: this element, for chaining See Also: before(Node) empty public Element empty​() Remove all of the element's child nodes. Any attributes are left as-is. Returns: this element wrap public Element wrap​(String html) Wrap the supplied HTML around this element. Overrides: wrap in class Node Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this element, for chaining. cssSelector public String cssSelector​() Get a CSS selector that will uniquely select this element. If the element has an ID, returns #id; otherwise returns the parent (if any) CSS selector, followed by '>', followed by a unique selector for the element (tag.class.class:nth-child(n)). Returns: the CSS Path that can be used to retrieve the element in a selector. siblingElements public Elements siblingElements​() Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling of itself, so will not be included in the returned list. Returns: sibling elements nextElementSibling public Element nextElementSibling​() Gets the next sibling element of this element. E.g., if a div contains two ps, the nextElementSibling of the first p is the second p. This is similar to Node.nextSibling(), but specifically finds only Elements Returns: the next element, or null if there is no next element See Also: previousElementSibling() previousElementSibling public Element previousElementSibling​() Gets the previous element sibling of this element. Returns: the previous element, or null if there is no previous element See Also: nextElementSibling() firstElementSibling public Element firstElementSibling​() Gets the first element sibling of this element. Returns: the first sibling that is an element (aka the parent's first element child) elementSiblingIndex public int elementSiblingIndex​() Get the list index of this element in its element sibling list. I.e. if this is the first element sibling, returns 0. Returns: position in element sibling list lastElementSibling public Element lastElementSibling​() Gets the last element sibling of this element Returns: the last sibling that is an element (aka the parent's last element child) getElementsByTag public Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name. Parameters: tagName - The tag name to search for (case insensitively). Returns: a matching unmodifiable list of elements. Will be empty if this element and none of its children match. getElementById public Element getElementById​(String id) Find an element by ID, including or under this element. Note that this finds the first matching ID, starting with this element. If you search down from a different starting point, it is possible to find a different element by ID. For unique element by ID within a Document, use getElementById(String) Parameters: id - The ID to search for. Returns: The first matching element by ID, starting with this element, or null if none found. getElementsByClass public Elements getElementsByClass​(String className) Find elements that have this class, including or under this element. Case insensitive. Elements can have multiple classes (e.g. <div class="header round first">. This method checks each class, so you can find the above with el.getElementsByClass("header");. Parameters: className - the name of the class to search for. Returns: elements with the supplied class name, empty if none See Also: hasClass(String), classNames() getElementsByAttribute public Elements getElementsByAttribute​(String key) Find elements that have a named attribute set. Case insensitive. Parameters: key - name of the attribute, e.g. href Returns: elements that have this attribute, empty if none getElementsByAttributeStarting public Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix. Use data- to find elements that have HTML5 datasets. Parameters: keyPrefix - name prefix of the attribute e.g. data- Returns: elements that have attribute names that start with with the prefix, empty if none. getElementsByAttributeValue public Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value. Case insensitive. Parameters: key - name of the attribute value - value of the attribute Returns: elements that have this attribute with this value, empty if none getElementsByAttributeValueNot public Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value. Case insensitive. Parameters: key - name of the attribute value - value of the attribute Returns: elements that do not have a matching attribute getElementsByAttributeValueStarting public Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix. Case insensitive. Parameters: key - name of the attribute valuePrefix - start of attribute value Returns: elements that have attributes that start with the value prefix getElementsByAttributeValueEnding public Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix. Case insensitive. Parameters: key - name of the attribute valueSuffix - end of the attribute value Returns: elements that have attributes that end with the value suffix getElementsByAttributeValueContaining public Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string. Case insensitive. Parameters: key - name of the attribute match - substring of value to search for Returns: elements that have attributes containing this text getElementsByAttributeValueMatching public Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression. Parameters: key - name of the attribute pattern - compiled regular expression to match against attribute values Returns: elements that have attributes matching this regular expression getElementsByAttributeValueMatching public Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression. Parameters: key - name of the attribute regex - regular expression to match against attribute values. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements that have attributes matching this regular expression getElementsByIndexLessThan public Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index. Parameters: index - 0-based index Returns: elements less than index getElementsByIndexGreaterThan public Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index. Parameters: index - 0-based index Returns: elements greater than index getElementsByIndexEquals public Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index. Parameters: index - 0-based index Returns: elements equal to index getElementsContainingText public Elements getElementsContainingText​(String searchText) Find elements that contain the specified string. The search is case insensitive. The text may appear directly in the element, or in any of its descendants. Parameters: searchText - to look for in the element's text Returns: elements that contain the string, case insensitive. See Also: text() getElementsContainingOwnText public Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly in the element, not in any of its descendants. Parameters: searchText - to look for in the element's own text Returns: elements that contain the string, case insensitive. See Also: ownText() getElementsMatchingText public Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression. Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: text() getElementsMatchingText public Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression. Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: text() getElementsMatchingOwnText public Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression. Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: ownText() getElementsMatchingOwnText public Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression. Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: ownText() getAllElements public Elements getAllElements​() Find all elements under this element (including self, and children of children). Returns: all elements text public String text​() Gets the combined text of this element and all its children. Whitespace is normalized and trimmed. For example, given HTML <p>Hello <b>there</b> now! </p>, p.text() returns "Hello there now!" Returns: unencoded, normalized text, or empty string if none. See Also: if you don't want the text to be normalized., ownText(), textNodes() wholeText public String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original. Returns: unencoded, un-normalized text See Also: text() ownText public String ownText​() Gets the text owned by this element only; does not get the combined text of all children. For example, given HTML <p>Hello <b>there</b> now!</p>, p.ownText() returns "Hello now!", whereas p.text() returns "Hello there now!". Note that the text within the b element is not returned, as it is not a direct child of the p element. Returns: unencoded text, or empty string if none. See Also: text(), textNodes() text public Element text​(String text) Set the text of this element. Any existing contents (text or elements) will be cleared Parameters: text - unencoded text Returns: this element hasText public boolean hasText​() Test if this element has any text content (that is not just whitespace). Returns: true if element has non-blank text content. data public String data​() Get the combined data of this element. Data is e.g. the inside of a script tag. Note that data is NOT the text of the element. Use text() to get the text that would be visible to a user, and data() for the contents of scripts, comments, CSS styles, etc. Returns: the data, or empty string if none See Also: dataNodes() className public String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated. (E.g. on <div class="header gray"> returns, " header gray") Returns: The literal class attribute, or empty string if no class attribute set. classNames public Set<String> classNames​() Get all of the element's class names. E.g. on element <div class="header gray">, returns a set of two elements "header", "gray". Note that modifications to this set are not pushed to the backing class attribute; use the classNames(java.util.Set) method to persist them. Returns: set of classnames, empty if no class attribute classNames public Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names. Parameters: classNames - set of classes Returns: this element, for chaining hasClass public boolean hasClass​(String className) Tests if this element has a class. Case insensitive. Parameters: className - name of class to check for Returns: true if it does, false if not addClass public Element addClass​(String className) Add a class name to this element's class attribute. Parameters: className - class name to add Returns: this element removeClass public Element removeClass​(String className) Remove a class name from this element's class attribute. Parameters: className - class name to remove Returns: this element toggleClass public Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it. Parameters: className - class name to toggle Returns: this element val public String val​() Get the value of a form element (input, textarea, etc). Returns: the value of the form element, or empty string if not set. val public Element val​(String value) Set the value of a form element (input, textarea, etc). Parameters: value - value to set Returns: this element (for chaining) html public String html​() Retrieves the element's inner HTML. E.g. on a <div> with one empty <p>, would return <p></p>. (Whereas Node.outerHtml() would return <div><p></p></div>.) Returns: String of HTML. See Also: Node.outerHtml() html public <T extends Appendable> T html​(T appendable) Write this node and its children to the given Appendable. Overrides: html in class Node Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining. html public Element html​(String html) Set this element's inner HTML. Clears the existing HTML first. Parameters: html - HTML to parse and set into this element Returns: this element See Also: append(String) toString public String toString​() Overrides: toString in class Node clone public Element clone​() Description copied from class: Node Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using appendChild(Node). Overrides: clone in class Node Returns: a stand-alone cloned node, including clones of any children See Also: Node.shallowClone() shallowClone public Element shallowClone​() Description copied from class: Node Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes. Overrides: shallowClone in class Node Returns: a single independent copy of this node See Also: Node.clone() doClone protected Element doClone​(Node parent) Overrides: doClone in class NodeMethod DetailensureChildNodes protected List<Node> ensureChildNodes​() Specified by: ensureChildNodes in class NodeensureChildNodes protected List<Node> ensureChildNodes​() Specified by: ensureChildNodes in class NodeensureChildNodesprotected List<Node> ensureChildNodes​()ListNodeSpecified by: ensureChildNodes in class NodeSpecified by:Specified by:ensureChildNodes in class NodeensureChildNodesensureChildNodesNodeNodehasAttributes protected boolean hasAttributes​() Description copied from class: Node Check if this Node has an actual Attributes object. Specified by: hasAttributes in class NodehasAttributes protected boolean hasAttributes​() Description copied from class: Node Check if this Node has an actual Attributes object. Specified by: hasAttributes in class NodehasAttributesprotected boolean hasAttributes​()Description copied from class: NodeDescription copied from class: NodeNodeNodeCheck if this Node has an actual Attributes object.Specified by: hasAttributes in class NodeSpecified by:Specified by:hasAttributes in class NodehasAttributeshasAttributesNodeNodeattributes public Attributes attributes​() Description copied from class: Node Get all of the element's attributes. Specified by: attributes in class Node Returns: attributes (which implements iterable, in same order as presented in original HTML).attributes public Attributes attributes​() Description copied from class: Node Get all of the element's attributes. Specified by: attributes in class Node Returns: attributes (which implements iterable, in same order as presented in original HTML).attributespublic Attributes attributes​()AttributesDescription copied from class: NodeDescription copied from class: NodeNodeNodeGet all of the element's attributes.Specified by: attributes in class Node Returns: attributes (which implements iterable, in same order as presented in original HTML).Specified by:Specified by:attributes in class NodeattributesattributesNodeNodeReturns:Returns:attributes (which implements iterable, in same order as presented in original HTML).baseUri public String baseUri​() Description copied from class: Node Get the base URI of this node. Specified by: baseUri in class Node Returns: base URIbaseUri public String baseUri​() Description copied from class: Node Get the base URI of this node. Specified by: baseUri in class Node Returns: base URIbaseUripublic String baseUri​()StringDescription copied from class: NodeDescription copied from class: NodeNodeNodeGet the base URI of this node.Specified by: baseUri in class Node Returns: base URISpecified by:Specified by:baseUri in class NodebaseUribaseUriNodeNodeReturns:Returns:base URIdoSetBaseUri protected void doSetBaseUri​(String baseUri) Description copied from class: Node Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. Specified by: doSetBaseUri in class Node Parameters: baseUri - new URIdoSetBaseUri protected void doSetBaseUri​(String baseUri) Description copied from class: Node Set the baseUri for just this node (not its descendants), if this Node tracks base URIs. Specified by: doSetBaseUri in class Node Parameters: baseUri - new URIdoSetBaseUriprotected void doSetBaseUri​(String baseUri)StringDescription copied from class: NodeDescription copied from class: NodeNodeNodeSet the baseUri for just this node (not its descendants), if this Node tracks base URIs.Specified by: doSetBaseUri in class Node Parameters: baseUri - new URISpecified by:Specified by:doSetBaseUri in class NodedoSetBaseUridoSetBaseUriNodeNodeParameters:Parameters:baseUri - new URIbaseUrichildNodeSize public int childNodeSize​() Description copied from class: Node Get the number of child nodes that this node holds. Specified by: childNodeSize in class Node Returns: the number of child nodes that this node holds.childNodeSize public int childNodeSize​() Description copied from class: Node Get the number of child nodes that this node holds. Specified by: childNodeSize in class Node Returns: the number of child nodes that this node holds.childNodeSizepublic int childNodeSize​()Description copied from class: NodeDescription copied from class: NodeNodeNodeGet the number of child nodes that this node holds.Specified by: childNodeSize in class Node Returns: the number of child nodes that this node holds.Specified by:Specified by:childNodeSize in class NodechildNodeSizechildNodeSizeNodeNodeReturns:Returns:the number of child nodes that this node holds.nodeName public String nodeName​() Description copied from class: Node Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). Specified by: nodeName in class Node Returns: node namenodeName public String nodeName​() Description copied from class: Node Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). Specified by: nodeName in class Node Returns: node namenodeNamepublic String nodeName​()StringDescription copied from class: NodeDescription copied from class: NodeNodeNodeGet the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof).Specified by: nodeName in class Node Returns: node nameSpecified by:Specified by:nodeName in class NodenodeNamenodeNameNodeNodeReturns:Returns:node nametagName public String tagName​() Get the name of the tag for this element. E.g. div Returns: the tag nametagName public String tagName​() Get the name of the tag for this element. E.g. div Returns: the tag nametagNamepublic String tagName​()StringGet the name of the tag for this element. E.g. divdivReturns: the tag nameReturns:Returns:the tag nametagName public Element tagName​(String tagName) Change the tag of this element. For example, convert a <span> to a <div> with el.tagName("div");. Parameters: tagName - new tag name for this element Returns: this element, for chainingtagName public Element tagName​(String tagName) Change the tag of this element. For example, convert a <span> to a <div> with el.tagName("div");. Parameters: tagName - new tag name for this element Returns: this element, for chainingtagNamepublic Element tagName​(String tagName)ElementStringChange the tag of this element. For example, convert a <span> to a <div> with el.tagName("div");.<span><div>el.tagName("div");Parameters: tagName - new tag name for this element Returns: this element, for chainingParameters:Parameters:tagName - new tag name for this elementtagNameReturns:Returns:this element, for chainingtag public Tag tag​() Get the Tag for this element. Returns: the tag objecttag public Tag tag​() Get the Tag for this element. Returns: the tag objecttagpublic Tag tag​()TagGet the Tag for this element.Returns: the tag objectReturns:Returns:the tag objectisBlock public boolean isBlock​() Test if this element is a block-level element. (E.g. <div> == true or an inline element <p> == false). Returns: true if block, false if not (and thus inline)isBlock public boolean isBlock​() Test if this element is a block-level element. (E.g. <div> == true or an inline element <p> == false). Returns: true if block, false if not (and thus inline)isBlockpublic boolean isBlock​()Test if this element is a block-level element. (E.g. <div> == true or an inline element <p> == false).<div> == true<p> == falseReturns: true if block, false if not (and thus inline)Returns:Returns:true if block, false if not (and thus inline)id public String id​() Get the id attribute of this element. Returns: The id attribute, if present, or an empty string if not.id public String id​() Get the id attribute of this element. Returns: The id attribute, if present, or an empty string if not.idpublic String id​()StringGet the id attribute of this element.idReturns: The id attribute, if present, or an empty string if not.Returns:Returns:The id attribute, if present, or an empty string if not.attr public Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element. If this element already has an attribute with the key, its value is updated; otherwise, a new attribute is added. Overrides: attr in class Node Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this elementattr public Element attr​(String attributeKey, String attributeValue) Set an attribute value on this element. If this element already has an attribute with the key, its value is updated; otherwise, a new attribute is added. Overrides: attr in class Node Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this elementattrpublic Element attr​(String attributeKey, String attributeValue)ElementStringStringSet an attribute value on this element. If this element already has an attribute with the key, its value is updated; otherwise, a new attribute is added.Overrides: attr in class Node Parameters: attributeKey - The attribute key. attributeValue - The attribute value. Returns: this elementOverrides:Overrides:attr in class NodeattrattrNodeNodeParameters:Parameters:attributeKey - The attribute key.attributeKeyattributeValue - The attribute value.attributeValueReturns:Returns:this elementattr public Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element. Setting to true sets the attribute value to "" and marks the attribute as boolean so no value is written out. Setting to false removes the attribute with the same key if it exists. Parameters: attributeKey - the attribute key attributeValue - the attribute value Returns: this elementattr public Element attr​(String attributeKey, boolean attributeValue) Set a boolean attribute value on this element. Setting to true sets the attribute value to "" and marks the attribute as boolean so no value is written out. Setting to false removes the attribute with the same key if it exists. Parameters: attributeKey - the attribute key attributeValue - the attribute value Returns: this elementattrpublic Element attr​(String attributeKey, boolean attributeValue)ElementStringSet a boolean attribute value on this element. Setting to true sets the attribute value to "" and marks the attribute as boolean so no value is written out. Setting to false removes the attribute with the same key if it exists.truefalseParameters: attributeKey - the attribute key attributeValue - the attribute value Returns: this elementParameters:Parameters:attributeKey - the attribute keyattributeKeyattributeValue - the attribute valueattributeValueReturns:Returns:this elementdataset public Map<String,String> dataset​() Get this element's HTML5 custom data attributes. Each attribute in the element that has a key starting with "data-" is included the dataset. E.g., the element <div data-package="jsoup" data-language="Java" class="group">... has the dataset package=jsoup, language=java. This map is a filtered view of the element's attribute map. Changes to one map (add, remove, update) are reflected in the other map. You can find elements that have data attributes using the [^data-] attribute key prefix selector. Returns: a map of key=value custom data attributes.dataset public Map<String,String> dataset​() Get this element's HTML5 custom data attributes. Each attribute in the element that has a key starting with "data-" is included the dataset. E.g., the element <div data-package="jsoup" data-language="Java" class="group">... has the dataset package=jsoup, language=java. This map is a filtered view of the element's attribute map. Changes to one map (add, remove, update) are reflected in the other map. You can find elements that have data attributes using the [^data-] attribute key prefix selector. Returns: a map of key=value custom data attributes.datasetpublic Map<String,String> dataset​()MapStringStringGet this element's HTML5 custom data attributes. Each attribute in the element that has a key starting with "data-" is included the dataset. E.g., the element <div data-package="jsoup" data-language="Java" class="group">... has the dataset package=jsoup, language=java. This map is a filtered view of the element's attribute map. Changes to one map (add, remove, update) are reflected in the other map. You can find elements that have data attributes using the [^data-] attribute key prefix selector.E.g., the element <div data-package="jsoup" data-language="Java" class="group">... has the dataset package=jsoup, language=java.<div data-package="jsoup" data-language="Java" class="group">...package=jsoup, language=javaThis map is a filtered view of the element's attribute map. Changes to one map (add, remove, update) are reflected in the other map.You can find elements that have data attributes using the [^data-] attribute key prefix selector.[^data-]Returns: a map of key=value custom data attributes.Returns:Returns:a map of key=value custom data attributes.key=valueparent public final Element parent​() Description copied from class: Node Gets this node's parent node. Overrides: parent in class Node Returns: parent node; or null if no parent.parent public final Element parent​() Description copied from class: Node Gets this node's parent node. Overrides: parent in class Node Returns: parent node; or null if no parent.parentpublic final Element parent​()ElementDescription copied from class: NodeDescription copied from class: NodeNodeNodeGets this node's parent node.Overrides: parent in class Node Returns: parent node; or null if no parent.Overrides:Overrides:parent in class NodeparentparentNodeNodeReturns:Returns:parent node; or null if no parent.parents public Elements parents​() Get this element's parent and ancestors, up to the document root. Returns: this element's stack of parents, closest first.parents public Elements parents​() Get this element's parent and ancestors, up to the document root. Returns: this element's stack of parents, closest first.parentspublic Elements parents​()ElementsGet this element's parent and ancestors, up to the document root.Returns: this element's stack of parents, closest first.Returns:Returns:this element's stack of parents, closest first.child public Element child​(int index) Get a child element of this element, by its 0-based index number. Note that an element can have both mixed Nodes and Elements as children. This method inspects a filtered list of children that are elements, and the index is based on that filtered list. Parameters: index - the index number of the element to retrieve Returns: the child element, if it exists, otherwise throws an IndexOutOfBoundsException See Also: Node.childNode(int)child public Element child​(int index) Get a child element of this element, by its 0-based index number. Note that an element can have both mixed Nodes and Elements as children. This method inspects a filtered list of children that are elements, and the index is based on that filtered list. Parameters: index - the index number of the element to retrieve Returns: the child element, if it exists, otherwise throws an IndexOutOfBoundsException See Also: Node.childNode(int)childpublic Element child​(int index)ElementGet a child element of this element, by its 0-based index number. Note that an element can have both mixed Nodes and Elements as children. This method inspects a filtered list of children that are elements, and the index is based on that filtered list.Note that an element can have both mixed Nodes and Elements as children. This method inspects a filtered list of children that are elements, and the index is based on that filtered list.Parameters: index - the index number of the element to retrieve Returns: the child element, if it exists, otherwise throws an IndexOutOfBoundsException See Also: Node.childNode(int)Parameters:Parameters:index - the index number of the element to retrieveindexReturns:Returns:the child element, if it exists, otherwise throws an IndexOutOfBoundsExceptionIndexOutOfBoundsExceptionSee Also:See Also:Node.childNode(int)Node.childNode(int)Node.childNode(int)children public Elements children​() Get this element's child elements. This is effectively a filter on Node.childNodes() to get Element nodes. Returns: child elements. If this element has no children, returns an empty list. See Also: Node.childNodes()children public Elements children​() Get this element's child elements. This is effectively a filter on Node.childNodes() to get Element nodes. Returns: child elements. If this element has no children, returns an empty list. See Also: Node.childNodes()childrenpublic Elements children​()ElementsGet this element's child elements. This is effectively a filter on Node.childNodes() to get Element nodes.This is effectively a filter on Node.childNodes() to get Element nodes.Node.childNodes()Node.childNodes()Returns: child elements. If this element has no children, returns an empty list. See Also: Node.childNodes()Returns:Returns:child elements. If this element has no children, returns an empty list.See Also:See Also:Node.childNodes()Node.childNodes()Node.childNodes()textNodes public List<TextNode> textNodes​() Get this element's child text nodes. The list is unmodifiable but the text nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Text nodes. Returns: child text nodes. If this element has no text nodes, returns an empty list. For example, with the input HTML: <p>One <span>Two</span> Three <br> Four</p> with the p element selected: p.text() = "One Two Three Four" p.ownText() = "One Three Four" p.children() = Elements[<span>, <br>] p.childNodes() = List<Node>["One ", <span>, " Three ", <br>, " Four"] p.textNodes() = List<TextNode>["One ", " Three ", " Four"]textNodes public List<TextNode> textNodes​() Get this element's child text nodes. The list is unmodifiable but the text nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Text nodes. Returns: child text nodes. If this element has no text nodes, returns an empty list. For example, with the input HTML: <p>One <span>Two</span> Three <br> Four</p> with the p element selected: p.text() = "One Two Three Four" p.ownText() = "One Three Four" p.children() = Elements[<span>, <br>] p.childNodes() = List<Node>["One ", <span>, " Three ", <br>, " Four"] p.textNodes() = List<TextNode>["One ", " Three ", " Four"]textNodespublic List<TextNode> textNodes​()ListTextNodeGet this element's child text nodes. The list is unmodifiable but the text nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Text nodes.This is effectively a filter on Node.childNodes() to get Text nodes.Node.childNodes()Node.childNodes()Returns: child text nodes. If this element has no text nodes, returns an empty list. For example, with the input HTML: <p>One <span>Two</span> Three <br> Four</p> with the p element selected: p.text() = "One Two Three Four" p.ownText() = "One Three Four" p.children() = Elements[<span>, <br>] p.childNodes() = List<Node>["One ", <span>, " Three ", <br>, " Four"] p.textNodes() = List<TextNode>["One ", " Three ", " Four"]Returns:Returns:child text nodes. If this element has no text nodes, returns an empty list. For example, with the input HTML: <p>One <span>Two</span> Three <br> Four</p> with the p element selected: p.text() = "One Two Three Four" p.ownText() = "One Three Four" p.children() = Elements[<span>, <br>] p.childNodes() = List<Node>["One ", <span>, " Three ", <br>, " Four"] p.textNodes() = List<TextNode>["One ", " Three ", " Four"]<p>One <span>Two</span> Three <br> Four</p>pp.text() = "One Two Three Four" p.ownText() = "One Three Four" p.children() = Elements[<span>, <br>] p.childNodes() = List<Node>["One ", <span>, " Three ", <br>, " Four"] p.textNodes() = List<TextNode>["One ", " Three ", " Four"]p.text() = "One Two Three Four"p.text()"One Two Three Four"p.ownText() = "One Three Four"p.ownText()"One Three Four"p.children() = Elements[<span>, <br>]p.children()Elements[<span>, <br>]p.childNodes() = List<Node>["One ", <span>, " Three ", <br>, " Four"]p.childNodes()List<Node>["One ", <span>, " Three ", <br>, " Four"]p.textNodes() = List<TextNode>["One ", " Three ", " Four"]p.textNodes()List<TextNode>["One ", " Three ", " Four"]dataNodes public List<DataNode> dataNodes​() Get this element's child data nodes. The list is unmodifiable but the data nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Data nodes. Returns: child data nodes. If this element has no data nodes, returns an empty list. See Also: data()dataNodes public List<DataNode> dataNodes​() Get this element's child data nodes. The list is unmodifiable but the data nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Data nodes. Returns: child data nodes. If this element has no data nodes, returns an empty list. See Also: data()dataNodespublic List<DataNode> dataNodes​()ListDataNodeGet this element's child data nodes. The list is unmodifiable but the data nodes may be manipulated. This is effectively a filter on Node.childNodes() to get Data nodes.This is effectively a filter on Node.childNodes() to get Data nodes.Node.childNodes()Node.childNodes()Returns: child data nodes. If this element has no data nodes, returns an empty list. See Also: data()Returns:Returns:child data nodes. If this element has no data nodes, returns an empty list.See Also:See Also:data()data()data()select public Elements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context. Matched elements may include this element, or any of its children. This method is generally more powerful to use than the DOM-type getElementBy* methods, because multiple filters can be combined, e.g.: el.select("a[href]") - finds links (a tags with href attributes) el.select("a[href*=example.com]") - finds links pointing to example.com (loosely) See the query syntax documentation in Selector. Parameters: cssQuery - a Selector CSS-like query Returns: elements that match the query (empty if none match) Throws: Selector.SelectorParseException - (unchecked) on an invalid CSS query. See Also: Selectorselect public Elements select​(String cssQuery) Find elements that match the Selector CSS query, with this element as the starting context. Matched elements may include this element, or any of its children. This method is generally more powerful to use than the DOM-type getElementBy* methods, because multiple filters can be combined, e.g.: el.select("a[href]") - finds links (a tags with href attributes) el.select("a[href*=example.com]") - finds links pointing to example.com (loosely) See the query syntax documentation in Selector. Parameters: cssQuery - a Selector CSS-like query Returns: elements that match the query (empty if none match) Throws: Selector.SelectorParseException - (unchecked) on an invalid CSS query. See Also: Selectorselectpublic Elements select​(String cssQuery)ElementsStringFind elements that match the Selector CSS query, with this element as the starting context. Matched elements may include this element, or any of its children. This method is generally more powerful to use than the DOM-type getElementBy* methods, because multiple filters can be combined, e.g.: el.select("a[href]") - finds links (a tags with href attributes) el.select("a[href*=example.com]") - finds links pointing to example.com (loosely) See the query syntax documentation in Selector.SelectorSelectorThis method is generally more powerful to use than the DOM-type getElementBy* methods, because multiple filters can be combined, e.g.:getElementBy*el.select("a[href]") - finds links (a tags with href attributes) el.select("a[href*=example.com]") - finds links pointing to example.com (loosely)el.select("a[href]") - finds links (a tags with href attributes)el.select("a[href]")ahrefel.select("a[href*=example.com]") - finds links pointing to example.com (loosely)el.select("a[href*=example.com]")See the query syntax documentation in Selector.SelectorSelectorParameters: cssQuery - a Selector CSS-like query Returns: elements that match the query (empty if none match) Throws: Selector.SelectorParseException - (unchecked) on an invalid CSS query. See Also: SelectorParameters:Parameters:cssQuery - a Selector CSS-like querycssQuerySelectorSelectorReturns:Returns:elements that match the query (empty if none match)Throws:Throws:Selector.SelectorParseException - (unchecked) on an invalid CSS query.Selector.SelectorParseExceptionSelector.SelectorParseExceptionSee Also:See Also:SelectorSelectorSelectorselectFirst public Element selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context. This is effectively the same as calling element.select(query).first(), but is more efficient as query execution stops on the first hit. Parameters: cssQuery - cssQuery a Selector CSS-like query Returns: the first matching element, or null if there is no match.selectFirst public Element selectFirst​(String cssQuery) Find the first Element that matches the Selector CSS query, with this element as the starting context. This is effectively the same as calling element.select(query).first(), but is more efficient as query execution stops on the first hit. Parameters: cssQuery - cssQuery a Selector CSS-like query Returns: the first matching element, or null if there is no match.selectFirstpublic Element selectFirst​(String cssQuery)ElementStringFind the first Element that matches the Selector CSS query, with this element as the starting context. This is effectively the same as calling element.select(query).first(), but is more efficient as query execution stops on the first hit.SelectorSelectorThis is effectively the same as calling element.select(query).first(), but is more efficient as query execution stops on the first hit.element.select(query).first()Parameters: cssQuery - cssQuery a Selector CSS-like query Returns: the first matching element, or null if there is no match.Parameters:Parameters:cssQuery - cssQuery a Selector CSS-like querycssQuerySelectorSelectorReturns:Returns:the first matching element, or null if there is no match.nullnullis public boolean is​(String cssQuery) Check if this element matches the given Selector CSS query. Parameters: cssQuery - a Selector CSS query Returns: if this element matches the queryis public boolean is​(String cssQuery) Check if this element matches the given Selector CSS query. Parameters: cssQuery - a Selector CSS query Returns: if this element matches the queryispublic boolean is​(String cssQuery)StringCheck if this element matches the given Selector CSS query.SelectorSelectorParameters: cssQuery - a Selector CSS query Returns: if this element matches the queryParameters:Parameters:cssQuery - a Selector CSS querycssQuerySelectorSelectorReturns:Returns:if this element matches the queryis public boolean is​(Evaluator evaluator) Check if this element matches the given evaluator. Parameters: evaluator - an element evaluator Returns: if this element matchesis public boolean is​(Evaluator evaluator) Check if this element matches the given evaluator. Parameters: evaluator - an element evaluator Returns: if this element matchesispublic boolean is​(Evaluator evaluator)EvaluatorCheck if this element matches the given evaluator.Parameters: evaluator - an element evaluator Returns: if this element matchesParameters:Parameters:evaluator - an element evaluatorevaluatorReturns:Returns:if this element matchesappendChild public Element appendChild​(Node child) Add a node child node to this element. Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements.appendChild public Element appendChild​(Node child) Add a node child node to this element. Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements.appendChildpublic Element appendChild​(Node child)ElementNodeAdd a node child node to this element.Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements.Parameters:Parameters:child - node to add.childReturns:Returns:this element, so that you can add more child nodes or elements.appendTo public Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child. Parameters: parent - element to which this element will be appended Returns: this element, so that you can continue modifying the elementappendTo public Element appendTo​(Element parent) Add this element to the supplied parent element, as its next child. Parameters: parent - element to which this element will be appended Returns: this element, so that you can continue modifying the elementappendTopublic Element appendTo​(Element parent)ElementElementAdd this element to the supplied parent element, as its next child.Parameters: parent - element to which this element will be appended Returns: this element, so that you can continue modifying the elementParameters:Parameters:parent - element to which this element will be appendedparentReturns:Returns:this element, so that you can continue modifying the elementprependChild public Element prependChild​(Node child) Add a node to the start of this element's children. Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements.prependChild public Element prependChild​(Node child) Add a node to the start of this element's children. Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements.prependChildpublic Element prependChild​(Node child)ElementNodeAdd a node to the start of this element's children.Parameters: child - node to add. Returns: this element, so that you can add more child nodes or elements.Parameters:Parameters:child - node to add.childReturns:Returns:this element, so that you can add more child nodes or elements.insertChildren public Element insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first. Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining.insertChildren public Element insertChildren​(int index, Collection<? extends Node> children) Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first. Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining.insertChildrenpublic Element insertChildren​(int index, Collection<? extends Node> children)ElementCollectionNodeInserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first.Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining.Parameters:Parameters:index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the endindex0-1children - child nodes to insertchildrenReturns:Returns:this element, for chaining.insertChildren public Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first. Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining.insertChildren public Element insertChildren​(int index, Node... children) Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first. Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining.insertChildrenpublic Element insertChildren​(int index, Node... children)ElementNodeInserts the given child nodes into this element at the specified index. Current nodes will be shifted to the right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first.Parameters: index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the end children - child nodes to insert Returns: this element, for chaining.Parameters:Parameters:index - 0-based index to insert children at. Specify 0 to insert at the start, -1 at the endindex0-1children - child nodes to insertchildrenReturns:Returns:this element, for chaining.appendElement public Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child. Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.appendElement("h1").attr("id", "header").text("Welcome");appendElement public Element appendElement​(String tagName) Create a new element by tag name, and add it as the last child. Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.appendElement("h1").attr("id", "header").text("Welcome");appendElementpublic Element appendElement​(String tagName)ElementStringCreate a new element by tag name, and add it as the last child.Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.appendElement("h1").attr("id", "header").text("Welcome");Parameters:Parameters:tagName - the name of the tag (e.g. div).tagNamedivReturns:Returns:the new element, to allow you to add content to it, e.g.: parent.appendElement("h1").attr("id", "header").text("Welcome");parent.appendElement("h1").attr("id", "header").text("Welcome");prependElement public Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child. Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.prependElement("h1").attr("id", "header").text("Welcome");prependElement public Element prependElement​(String tagName) Create a new element by tag name, and add it as the first child. Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.prependElement("h1").attr("id", "header").text("Welcome");prependElementpublic Element prependElement​(String tagName)ElementStringCreate a new element by tag name, and add it as the first child.Parameters: tagName - the name of the tag (e.g. div). Returns: the new element, to allow you to add content to it, e.g.: parent.prependElement("h1").attr("id", "header").text("Welcome");Parameters:Parameters:tagName - the name of the tag (e.g. div).tagNamedivReturns:Returns:the new element, to allow you to add content to it, e.g.: parent.prependElement("h1").attr("id", "header").text("Welcome");parent.prependElement("h1").attr("id", "header").text("Welcome");appendText public Element appendText​(String text) Create and append a new TextNode to this element. Parameters: text - the unencoded text to add Returns: this elementappendText public Element appendText​(String text) Create and append a new TextNode to this element. Parameters: text - the unencoded text to add Returns: this elementappendTextpublic Element appendText​(String text)ElementStringCreate and append a new TextNode to this element.Parameters: text - the unencoded text to add Returns: this elementParameters:Parameters:text - the unencoded text to addtextReturns:Returns:this elementprependText public Element prependText​(String text) Create and prepend a new TextNode to this element. Parameters: text - the unencoded text to add Returns: this elementprependText public Element prependText​(String text) Create and prepend a new TextNode to this element. Parameters: text - the unencoded text to add Returns: this elementprependTextpublic Element prependText​(String text)ElementStringCreate and prepend a new TextNode to this element.Parameters: text - the unencoded text to add Returns: this elementParameters:Parameters:text - the unencoded text to addtextReturns:Returns:this elementappend public Element append​(String html) Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children. Parameters: html - HTML to add inside this element, after the existing HTML Returns: this element See Also: html(String)append public Element append​(String html) Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children. Parameters: html - HTML to add inside this element, after the existing HTML Returns: this element See Also: html(String)appendpublic Element append​(String html)ElementStringAdd inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.Parameters: html - HTML to add inside this element, after the existing HTML Returns: this element See Also: html(String)Parameters:Parameters:html - HTML to add inside this element, after the existing HTMLhtmlReturns:Returns:this elementSee Also:See Also:html(String)html(String)html(String)prepend public Element prepend​(String html) Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element's children. Parameters: html - HTML to add inside this element, before the existing HTML Returns: this element See Also: html(String)prepend public Element prepend​(String html) Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element's children. Parameters: html - HTML to add inside this element, before the existing HTML Returns: this element See Also: html(String)prependpublic Element prepend​(String html)ElementStringAdd inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element's children.Parameters: html - HTML to add inside this element, before the existing HTML Returns: this element See Also: html(String)Parameters:Parameters:html - HTML to add inside this element, before the existing HTMLhtmlReturns:Returns:this elementSee Also:See Also:html(String)html(String)html(String)before public Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling). Overrides: before in class Node Parameters: html - HTML to add before this element Returns: this element, for chaining See Also: after(String)before public Element before​(String html) Insert the specified HTML into the DOM before this element (as a preceding sibling). Overrides: before in class Node Parameters: html - HTML to add before this element Returns: this element, for chaining See Also: after(String)beforepublic Element before​(String html)ElementStringInsert the specified HTML into the DOM before this element (as a preceding sibling).Overrides: before in class Node Parameters: html - HTML to add before this element Returns: this element, for chaining See Also: after(String)Overrides:Overrides:before in class NodebeforebeforeNodeNodeParameters:Parameters:html - HTML to add before this elementhtmlReturns:Returns:this element, for chainingSee Also:See Also:after(String)after(String)after(String)before public Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling). Overrides: before in class Node Parameters: node - to add before this element Returns: this Element, for chaining See Also: after(Node)before public Element before​(Node node) Insert the specified node into the DOM before this node (as a preceding sibling). Overrides: before in class Node Parameters: node - to add before this element Returns: this Element, for chaining See Also: after(Node)beforepublic Element before​(Node node)ElementNodeInsert the specified node into the DOM before this node (as a preceding sibling).Overrides: before in class Node Parameters: node - to add before this element Returns: this Element, for chaining See Also: after(Node)Overrides:Overrides:before in class NodebeforebeforeNodeNodeParameters:Parameters:node - to add before this elementnodeReturns:Returns:this Element, for chainingSee Also:See Also:after(Node)after(Node)after(Node)after public Element after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling). Overrides: after in class Node Parameters: html - HTML to add after this element Returns: this element, for chaining See Also: before(String)after public Element after​(String html) Insert the specified HTML into the DOM after this element (as a following sibling). Overrides: after in class Node Parameters: html - HTML to add after this element Returns: this element, for chaining See Also: before(String)afterpublic Element after​(String html)ElementStringInsert the specified HTML into the DOM after this element (as a following sibling).Overrides: after in class Node Parameters: html - HTML to add after this element Returns: this element, for chaining See Also: before(String)Overrides:Overrides:after in class NodeafterafterNodeNodeParameters:Parameters:html - HTML to add after this elementhtmlReturns:Returns:this element, for chainingSee Also:See Also:before(String)before(String)before(String)after public Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling). Overrides: after in class Node Parameters: node - to add after this element Returns: this element, for chaining See Also: before(Node)after public Element after​(Node node) Insert the specified node into the DOM after this node (as a following sibling). Overrides: after in class Node Parameters: node - to add after this element Returns: this element, for chaining See Also: before(Node)afterpublic Element after​(Node node)ElementNodeInsert the specified node into the DOM after this node (as a following sibling).Overrides: after in class Node Parameters: node - to add after this element Returns: this element, for chaining See Also: before(Node)Overrides:Overrides:after in class NodeafterafterNodeNodeParameters:Parameters:node - to add after this elementnodeReturns:Returns:this element, for chainingSee Also:See Also:before(Node)before(Node)before(Node)empty public Element empty​() Remove all of the element's child nodes. Any attributes are left as-is. Returns: this elementempty public Element empty​() Remove all of the element's child nodes. Any attributes are left as-is. Returns: this elementemptypublic Element empty​()ElementRemove all of the element's child nodes. Any attributes are left as-is.Returns: this elementReturns:Returns:this elementwrap public Element wrap​(String html) Wrap the supplied HTML around this element. Overrides: wrap in class Node Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this element, for chaining.wrap public Element wrap​(String html) Wrap the supplied HTML around this element. Overrides: wrap in class Node Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this element, for chaining.wrappublic Element wrap​(String html)ElementStringWrap the supplied HTML around this element.Overrides: wrap in class Node Parameters: html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this element, for chaining.Overrides:Overrides:wrap in class NodewrapwrapNodeNodeParameters:Parameters:html - HTML to wrap around this element, e.g. <div class="head"></div>. Can be arbitrarily deep.html<div class="head"></div>Returns:Returns:this element, for chaining.cssSelector public String cssSelector​() Get a CSS selector that will uniquely select this element. If the element has an ID, returns #id; otherwise returns the parent (if any) CSS selector, followed by '>', followed by a unique selector for the element (tag.class.class:nth-child(n)). Returns: the CSS Path that can be used to retrieve the element in a selector.cssSelector public String cssSelector​() Get a CSS selector that will uniquely select this element. If the element has an ID, returns #id; otherwise returns the parent (if any) CSS selector, followed by '>', followed by a unique selector for the element (tag.class.class:nth-child(n)). Returns: the CSS Path that can be used to retrieve the element in a selector.cssSelectorpublic String cssSelector​()StringGet a CSS selector that will uniquely select this element. If the element has an ID, returns #id; otherwise returns the parent (if any) CSS selector, followed by '>', followed by a unique selector for the element (tag.class.class:nth-child(n)).If the element has an ID, returns #id; otherwise returns the parent (if any) CSS selector, followed by '>', followed by a unique selector for the element (tag.class.class:nth-child(n)).Returns: the CSS Path that can be used to retrieve the element in a selector.Returns:Returns:the CSS Path that can be used to retrieve the element in a selector.siblingElements public Elements siblingElements​() Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling of itself, so will not be included in the returned list. Returns: sibling elementssiblingElements public Elements siblingElements​() Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling of itself, so will not be included in the returned list. Returns: sibling elementssiblingElementspublic Elements siblingElements​()ElementsGet sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling of itself, so will not be included in the returned list.Returns: sibling elementsReturns:Returns:sibling elementsnextElementSibling public Element nextElementSibling​() Gets the next sibling element of this element. E.g., if a div contains two ps, the nextElementSibling of the first p is the second p. This is similar to Node.nextSibling(), but specifically finds only Elements Returns: the next element, or null if there is no next element See Also: previousElementSibling()nextElementSibling public Element nextElementSibling​() Gets the next sibling element of this element. E.g., if a div contains two ps, the nextElementSibling of the first p is the second p. This is similar to Node.nextSibling(), but specifically finds only Elements Returns: the next element, or null if there is no next element See Also: previousElementSibling()nextElementSiblingpublic Element nextElementSibling​()ElementGets the next sibling element of this element. E.g., if a div contains two ps, the nextElementSibling of the first p is the second p. This is similar to Node.nextSibling(), but specifically finds only ElementsdivpnextElementSiblingppThis is similar to Node.nextSibling(), but specifically finds only ElementsNode.nextSibling()Node.nextSibling()Returns: the next element, or null if there is no next element See Also: previousElementSibling()Returns:Returns:the next element, or null if there is no next elementSee Also:See Also:previousElementSibling()previousElementSibling()previousElementSibling()previousElementSibling public Element previousElementSibling​() Gets the previous element sibling of this element. Returns: the previous element, or null if there is no previous element See Also: nextElementSibling()previousElementSibling public Element previousElementSibling​() Gets the previous element sibling of this element. Returns: the previous element, or null if there is no previous element See Also: nextElementSibling()previousElementSiblingpublic Element previousElementSibling​()ElementGets the previous element sibling of this element.Returns: the previous element, or null if there is no previous element See Also: nextElementSibling()Returns:Returns:the previous element, or null if there is no previous elementSee Also:See Also:nextElementSibling()nextElementSibling()nextElementSibling()firstElementSibling public Element firstElementSibling​() Gets the first element sibling of this element. Returns: the first sibling that is an element (aka the parent's first element child)firstElementSibling public Element firstElementSibling​() Gets the first element sibling of this element. Returns: the first sibling that is an element (aka the parent's first element child)firstElementSiblingpublic Element firstElementSibling​()ElementGets the first element sibling of this element.Returns: the first sibling that is an element (aka the parent's first element child)Returns:Returns:the first sibling that is an element (aka the parent's first element child)elementSiblingIndex public int elementSiblingIndex​() Get the list index of this element in its element sibling list. I.e. if this is the first element sibling, returns 0. Returns: position in element sibling listelementSiblingIndex public int elementSiblingIndex​() Get the list index of this element in its element sibling list. I.e. if this is the first element sibling, returns 0. Returns: position in element sibling listelementSiblingIndexpublic int elementSiblingIndex​()Get the list index of this element in its element sibling list. I.e. if this is the first element sibling, returns 0.Returns: position in element sibling listReturns:Returns:position in element sibling listlastElementSibling public Element lastElementSibling​() Gets the last element sibling of this element Returns: the last sibling that is an element (aka the parent's last element child)lastElementSibling public Element lastElementSibling​() Gets the last element sibling of this element Returns: the last sibling that is an element (aka the parent's last element child)lastElementSiblingpublic Element lastElementSibling​()ElementGets the last element sibling of this elementReturns: the last sibling that is an element (aka the parent's last element child)Returns:Returns:the last sibling that is an element (aka the parent's last element child)getElementsByTag public Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name. Parameters: tagName - The tag name to search for (case insensitively). Returns: a matching unmodifiable list of elements. Will be empty if this element and none of its children match.getElementsByTag public Elements getElementsByTag​(String tagName) Finds elements, including and recursively under this element, with the specified tag name. Parameters: tagName - The tag name to search for (case insensitively). Returns: a matching unmodifiable list of elements. Will be empty if this element and none of its children match.getElementsByTagpublic Elements getElementsByTag​(String tagName)ElementsStringFinds elements, including and recursively under this element, with the specified tag name.Parameters: tagName - The tag name to search for (case insensitively). Returns: a matching unmodifiable list of elements. Will be empty if this element and none of its children match.Parameters:Parameters:tagName - The tag name to search for (case insensitively).tagNameReturns:Returns:a matching unmodifiable list of elements. Will be empty if this element and none of its children match.getElementById public Element getElementById​(String id) Find an element by ID, including or under this element. Note that this finds the first matching ID, starting with this element. If you search down from a different starting point, it is possible to find a different element by ID. For unique element by ID within a Document, use getElementById(String) Parameters: id - The ID to search for. Returns: The first matching element by ID, starting with this element, or null if none found.getElementById public Element getElementById​(String id) Find an element by ID, including or under this element. Note that this finds the first matching ID, starting with this element. If you search down from a different starting point, it is possible to find a different element by ID. For unique element by ID within a Document, use getElementById(String) Parameters: id - The ID to search for. Returns: The first matching element by ID, starting with this element, or null if none found.getElementByIdpublic Element getElementById​(String id)ElementStringFind an element by ID, including or under this element. Note that this finds the first matching ID, starting with this element. If you search down from a different starting point, it is possible to find a different element by ID. For unique element by ID within a Document, use getElementById(String)Note that this finds the first matching ID, starting with this element. If you search down from a different starting point, it is possible to find a different element by ID. For unique element by ID within a Document, use getElementById(String)getElementById(String)getElementById(String)Parameters: id - The ID to search for. Returns: The first matching element by ID, starting with this element, or null if none found.Parameters:Parameters:id - The ID to search for.idReturns:Returns:The first matching element by ID, starting with this element, or null if none found.getElementsByClass public Elements getElementsByClass​(String className) Find elements that have this class, including or under this element. Case insensitive. Elements can have multiple classes (e.g. <div class="header round first">. This method checks each class, so you can find the above with el.getElementsByClass("header");. Parameters: className - the name of the class to search for. Returns: elements with the supplied class name, empty if none See Also: hasClass(String), classNames()getElementsByClass public Elements getElementsByClass​(String className) Find elements that have this class, including or under this element. Case insensitive. Elements can have multiple classes (e.g. <div class="header round first">. This method checks each class, so you can find the above with el.getElementsByClass("header");. Parameters: className - the name of the class to search for. Returns: elements with the supplied class name, empty if none See Also: hasClass(String), classNames()getElementsByClasspublic Elements getElementsByClass​(String className)ElementsStringFind elements that have this class, including or under this element. Case insensitive. Elements can have multiple classes (e.g. <div class="header round first">. This method checks each class, so you can find the above with el.getElementsByClass("header");.Elements can have multiple classes (e.g. <div class="header round first">. This method checks each class, so you can find the above with el.getElementsByClass("header");.<div class="header round first">el.getElementsByClass("header");Parameters: className - the name of the class to search for. Returns: elements with the supplied class name, empty if none See Also: hasClass(String), classNames()Parameters:Parameters:className - the name of the class to search for.classNameReturns:Returns:elements with the supplied class name, empty if noneSee Also:See Also:hasClass(String), classNames()hasClass(String)hasClass(String)classNames()classNames()getElementsByAttribute public Elements getElementsByAttribute​(String key) Find elements that have a named attribute set. Case insensitive. Parameters: key - name of the attribute, e.g. href Returns: elements that have this attribute, empty if nonegetElementsByAttribute public Elements getElementsByAttribute​(String key) Find elements that have a named attribute set. Case insensitive. Parameters: key - name of the attribute, e.g. href Returns: elements that have this attribute, empty if nonegetElementsByAttributepublic Elements getElementsByAttribute​(String key)ElementsStringFind elements that have a named attribute set. Case insensitive.Parameters: key - name of the attribute, e.g. href Returns: elements that have this attribute, empty if noneParameters:Parameters:key - name of the attribute, e.g. hrefkeyhrefReturns:Returns:elements that have this attribute, empty if nonegetElementsByAttributeStarting public Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix. Use data- to find elements that have HTML5 datasets. Parameters: keyPrefix - name prefix of the attribute e.g. data- Returns: elements that have attribute names that start with with the prefix, empty if none.getElementsByAttributeStarting public Elements getElementsByAttributeStarting​(String keyPrefix) Find elements that have an attribute name starting with the supplied prefix. Use data- to find elements that have HTML5 datasets. Parameters: keyPrefix - name prefix of the attribute e.g. data- Returns: elements that have attribute names that start with with the prefix, empty if none.getElementsByAttributeStartingpublic Elements getElementsByAttributeStarting​(String keyPrefix)ElementsStringFind elements that have an attribute name starting with the supplied prefix. Use data- to find elements that have HTML5 datasets.data-Parameters: keyPrefix - name prefix of the attribute e.g. data- Returns: elements that have attribute names that start with with the prefix, empty if none.Parameters:Parameters:keyPrefix - name prefix of the attribute e.g. data-keyPrefixdata-Returns:Returns:elements that have attribute names that start with with the prefix, empty if none.getElementsByAttributeValue public Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value. Case insensitive. Parameters: key - name of the attribute value - value of the attribute Returns: elements that have this attribute with this value, empty if nonegetElementsByAttributeValue public Elements getElementsByAttributeValue​(String key, String value) Find elements that have an attribute with the specific value. Case insensitive. Parameters: key - name of the attribute value - value of the attribute Returns: elements that have this attribute with this value, empty if nonegetElementsByAttributeValuepublic Elements getElementsByAttributeValue​(String key, String value)ElementsStringStringFind elements that have an attribute with the specific value. Case insensitive.Parameters: key - name of the attribute value - value of the attribute Returns: elements that have this attribute with this value, empty if noneParameters:Parameters:key - name of the attributekeyvalue - value of the attributevalueReturns:Returns:elements that have this attribute with this value, empty if nonegetElementsByAttributeValueNot public Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value. Case insensitive. Parameters: key - name of the attribute value - value of the attribute Returns: elements that do not have a matching attributegetElementsByAttributeValueNot public Elements getElementsByAttributeValueNot​(String key, String value) Find elements that either do not have this attribute, or have it with a different value. Case insensitive. Parameters: key - name of the attribute value - value of the attribute Returns: elements that do not have a matching attributegetElementsByAttributeValueNotpublic Elements getElementsByAttributeValueNot​(String key, String value)ElementsStringStringFind elements that either do not have this attribute, or have it with a different value. Case insensitive.Parameters: key - name of the attribute value - value of the attribute Returns: elements that do not have a matching attributeParameters:Parameters:key - name of the attributekeyvalue - value of the attributevalueReturns:Returns:elements that do not have a matching attributegetElementsByAttributeValueStarting public Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix. Case insensitive. Parameters: key - name of the attribute valuePrefix - start of attribute value Returns: elements that have attributes that start with the value prefixgetElementsByAttributeValueStarting public Elements getElementsByAttributeValueStarting​(String key, String valuePrefix) Find elements that have attributes that start with the value prefix. Case insensitive. Parameters: key - name of the attribute valuePrefix - start of attribute value Returns: elements that have attributes that start with the value prefixgetElementsByAttributeValueStartingpublic Elements getElementsByAttributeValueStarting​(String key, String valuePrefix)ElementsStringStringFind elements that have attributes that start with the value prefix. Case insensitive.Parameters: key - name of the attribute valuePrefix - start of attribute value Returns: elements that have attributes that start with the value prefixParameters:Parameters:key - name of the attributekeyvaluePrefix - start of attribute valuevaluePrefixReturns:Returns:elements that have attributes that start with the value prefixgetElementsByAttributeValueEnding public Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix. Case insensitive. Parameters: key - name of the attribute valueSuffix - end of the attribute value Returns: elements that have attributes that end with the value suffixgetElementsByAttributeValueEnding public Elements getElementsByAttributeValueEnding​(String key, String valueSuffix) Find elements that have attributes that end with the value suffix. Case insensitive. Parameters: key - name of the attribute valueSuffix - end of the attribute value Returns: elements that have attributes that end with the value suffixgetElementsByAttributeValueEndingpublic Elements getElementsByAttributeValueEnding​(String key, String valueSuffix)ElementsStringStringFind elements that have attributes that end with the value suffix. Case insensitive.Parameters: key - name of the attribute valueSuffix - end of the attribute value Returns: elements that have attributes that end with the value suffixParameters:Parameters:key - name of the attributekeyvalueSuffix - end of the attribute valuevalueSuffixReturns:Returns:elements that have attributes that end with the value suffixgetElementsByAttributeValueContaining public Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string. Case insensitive. Parameters: key - name of the attribute match - substring of value to search for Returns: elements that have attributes containing this textgetElementsByAttributeValueContaining public Elements getElementsByAttributeValueContaining​(String key, String match) Find elements that have attributes whose value contains the match string. Case insensitive. Parameters: key - name of the attribute match - substring of value to search for Returns: elements that have attributes containing this textgetElementsByAttributeValueContainingpublic Elements getElementsByAttributeValueContaining​(String key, String match)ElementsStringStringFind elements that have attributes whose value contains the match string. Case insensitive.Parameters: key - name of the attribute match - substring of value to search for Returns: elements that have attributes containing this textParameters:Parameters:key - name of the attributekeymatch - substring of value to search formatchReturns:Returns:elements that have attributes containing this textgetElementsByAttributeValueMatching public Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression. Parameters: key - name of the attribute pattern - compiled regular expression to match against attribute values Returns: elements that have attributes matching this regular expressiongetElementsByAttributeValueMatching public Elements getElementsByAttributeValueMatching​(String key, Pattern pattern) Find elements that have attributes whose values match the supplied regular expression. Parameters: key - name of the attribute pattern - compiled regular expression to match against attribute values Returns: elements that have attributes matching this regular expressiongetElementsByAttributeValueMatchingpublic Elements getElementsByAttributeValueMatching​(String key, Pattern pattern)ElementsStringPatternFind elements that have attributes whose values match the supplied regular expression.Parameters: key - name of the attribute pattern - compiled regular expression to match against attribute values Returns: elements that have attributes matching this regular expressionParameters:Parameters:key - name of the attributekeypattern - compiled regular expression to match against attribute valuespatternReturns:Returns:elements that have attributes matching this regular expressiongetElementsByAttributeValueMatching public Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression. Parameters: key - name of the attribute regex - regular expression to match against attribute values. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements that have attributes matching this regular expressiongetElementsByAttributeValueMatching public Elements getElementsByAttributeValueMatching​(String key, String regex) Find elements that have attributes whose values match the supplied regular expression. Parameters: key - name of the attribute regex - regular expression to match against attribute values. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements that have attributes matching this regular expressiongetElementsByAttributeValueMatchingpublic Elements getElementsByAttributeValueMatching​(String key, String regex)ElementsStringStringFind elements that have attributes whose values match the supplied regular expression.Parameters: key - name of the attribute regex - regular expression to match against attribute values. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements that have attributes matching this regular expressionParameters:Parameters:key - name of the attributekeyregex - regular expression to match against attribute values. You can use embedded flags (such as (?i) and (?m) to control regex options.regexembedded flagsReturns:Returns:elements that have attributes matching this regular expressiongetElementsByIndexLessThan public Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index. Parameters: index - 0-based index Returns: elements less than indexgetElementsByIndexLessThan public Elements getElementsByIndexLessThan​(int index) Find elements whose sibling index is less than the supplied index. Parameters: index - 0-based index Returns: elements less than indexgetElementsByIndexLessThanpublic Elements getElementsByIndexLessThan​(int index)ElementsFind elements whose sibling index is less than the supplied index.Parameters: index - 0-based index Returns: elements less than indexParameters:Parameters:index - 0-based indexindexReturns:Returns:elements less than indexgetElementsByIndexGreaterThan public Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index. Parameters: index - 0-based index Returns: elements greater than indexgetElementsByIndexGreaterThan public Elements getElementsByIndexGreaterThan​(int index) Find elements whose sibling index is greater than the supplied index. Parameters: index - 0-based index Returns: elements greater than indexgetElementsByIndexGreaterThanpublic Elements getElementsByIndexGreaterThan​(int index)ElementsFind elements whose sibling index is greater than the supplied index.Parameters: index - 0-based index Returns: elements greater than indexParameters:Parameters:index - 0-based indexindexReturns:Returns:elements greater than indexgetElementsByIndexEquals public Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index. Parameters: index - 0-based index Returns: elements equal to indexgetElementsByIndexEquals public Elements getElementsByIndexEquals​(int index) Find elements whose sibling index is equal to the supplied index. Parameters: index - 0-based index Returns: elements equal to indexgetElementsByIndexEqualspublic Elements getElementsByIndexEquals​(int index)ElementsFind elements whose sibling index is equal to the supplied index.Parameters: index - 0-based index Returns: elements equal to indexParameters:Parameters:index - 0-based indexindexReturns:Returns:elements equal to indexgetElementsContainingText public Elements getElementsContainingText​(String searchText) Find elements that contain the specified string. The search is case insensitive. The text may appear directly in the element, or in any of its descendants. Parameters: searchText - to look for in the element's text Returns: elements that contain the string, case insensitive. See Also: text()getElementsContainingText public Elements getElementsContainingText​(String searchText) Find elements that contain the specified string. The search is case insensitive. The text may appear directly in the element, or in any of its descendants. Parameters: searchText - to look for in the element's text Returns: elements that contain the string, case insensitive. See Also: text()getElementsContainingTextpublic Elements getElementsContainingText​(String searchText)ElementsStringFind elements that contain the specified string. The search is case insensitive. The text may appear directly in the element, or in any of its descendants.Parameters: searchText - to look for in the element's text Returns: elements that contain the string, case insensitive. See Also: text()Parameters:Parameters:searchText - to look for in the element's textsearchTextReturns:Returns:elements that contain the string, case insensitive.See Also:See Also:text()text()text()getElementsContainingOwnText public Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly in the element, not in any of its descendants. Parameters: searchText - to look for in the element's own text Returns: elements that contain the string, case insensitive. See Also: ownText()getElementsContainingOwnText public Elements getElementsContainingOwnText​(String searchText) Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly in the element, not in any of its descendants. Parameters: searchText - to look for in the element's own text Returns: elements that contain the string, case insensitive. See Also: ownText()getElementsContainingOwnTextpublic Elements getElementsContainingOwnText​(String searchText)ElementsStringFind elements that directly contain the specified string. The search is case insensitive. The text must appear directly in the element, not in any of its descendants.Parameters: searchText - to look for in the element's own text Returns: elements that contain the string, case insensitive. See Also: ownText()Parameters:Parameters:searchText - to look for in the element's own textsearchTextReturns:Returns:elements that contain the string, case insensitive.See Also:See Also:ownText()ownText()ownText()getElementsMatchingText public Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression. Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: text()getElementsMatchingText public Elements getElementsMatchingText​(Pattern pattern) Find elements whose text matches the supplied regular expression. Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: text()getElementsMatchingTextpublic Elements getElementsMatchingText​(Pattern pattern)ElementsPatternFind elements whose text matches the supplied regular expression.Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: text()Parameters:Parameters:pattern - regular expression to match text againstpatternReturns:Returns:elements matching the supplied regular expression.See Also:See Also:text()text()text()getElementsMatchingText public Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression. Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: text()getElementsMatchingText public Elements getElementsMatchingText​(String regex) Find elements whose text matches the supplied regular expression. Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: text()getElementsMatchingTextpublic Elements getElementsMatchingText​(String regex)ElementsStringFind elements whose text matches the supplied regular expression.Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: text()Parameters:Parameters:regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options.regexembedded flagsReturns:Returns:elements matching the supplied regular expression.See Also:See Also:text()text()text()getElementsMatchingOwnText public Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression. Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: ownText()getElementsMatchingOwnText public Elements getElementsMatchingOwnText​(Pattern pattern) Find elements whose own text matches the supplied regular expression. Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: ownText()getElementsMatchingOwnTextpublic Elements getElementsMatchingOwnText​(Pattern pattern)ElementsPatternFind elements whose own text matches the supplied regular expression.Parameters: pattern - regular expression to match text against Returns: elements matching the supplied regular expression. See Also: ownText()Parameters:Parameters:pattern - regular expression to match text againstpatternReturns:Returns:elements matching the supplied regular expression.See Also:See Also:ownText()ownText()ownText()getElementsMatchingOwnText public Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression. Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: ownText()getElementsMatchingOwnText public Elements getElementsMatchingOwnText​(String regex) Find elements whose text matches the supplied regular expression. Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: ownText()getElementsMatchingOwnTextpublic Elements getElementsMatchingOwnText​(String regex)ElementsStringFind elements whose text matches the supplied regular expression.Parameters: regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options. Returns: elements matching the supplied regular expression. See Also: ownText()Parameters:Parameters:regex - regular expression to match text against. You can use embedded flags (such as (?i) and (?m) to control regex options.regexembedded flagsReturns:Returns:elements matching the supplied regular expression.See Also:See Also:ownText()ownText()ownText()getAllElements public Elements getAllElements​() Find all elements under this element (including self, and children of children). Returns: all elementsgetAllElements public Elements getAllElements​() Find all elements under this element (including self, and children of children). Returns: all elementsgetAllElementspublic Elements getAllElements​()ElementsFind all elements under this element (including self, and children of children).Returns: all elementsReturns:Returns:all elementstext public String text​() Gets the combined text of this element and all its children. Whitespace is normalized and trimmed. For example, given HTML <p>Hello <b>there</b> now! </p>, p.text() returns "Hello there now!" Returns: unencoded, normalized text, or empty string if none. See Also: if you don't want the text to be normalized., ownText(), textNodes()text public String text​() Gets the combined text of this element and all its children. Whitespace is normalized and trimmed. For example, given HTML <p>Hello <b>there</b> now! </p>, p.text() returns "Hello there now!" Returns: unencoded, normalized text, or empty string if none. See Also: if you don't want the text to be normalized., ownText(), textNodes()textpublic String text​()StringGets the combined text of this element and all its children. Whitespace is normalized and trimmed. For example, given HTML <p>Hello <b>there</b> now! </p>, p.text() returns "Hello there now!"For example, given HTML <p>Hello <b>there</b> now! </p>, p.text() returns "Hello there now!"<p>Hello <b>there</b> now! </p>p.text()"Hello there now!"Returns: unencoded, normalized text, or empty string if none. See Also: if you don't want the text to be normalized., ownText(), textNodes()Returns:Returns:unencoded, normalized text, or empty string if none.See Also:See Also:if you don't want the text to be normalized., ownText(), textNodes()if you don't want the text to be normalized.if you don't want the text to be normalized.ownText()ownText()textNodes()textNodes()wholeText public String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original. Returns: unencoded, un-normalized text See Also: text()wholeText public String wholeText​() Get the (unencoded) text of all children of this element, including any newlines and spaces present in the original. Returns: unencoded, un-normalized text See Also: text()wholeTextpublic String wholeText​()StringGet the (unencoded) text of all children of this element, including any newlines and spaces present in the original.Returns: unencoded, un-normalized text See Also: text()Returns:Returns:unencoded, un-normalized textSee Also:See Also:text()text()text()ownText public String ownText​() Gets the text owned by this element only; does not get the combined text of all children. For example, given HTML <p>Hello <b>there</b> now!</p>, p.ownText() returns "Hello now!", whereas p.text() returns "Hello there now!". Note that the text within the b element is not returned, as it is not a direct child of the p element. Returns: unencoded text, or empty string if none. See Also: text(), textNodes()ownText public String ownText​() Gets the text owned by this element only; does not get the combined text of all children. For example, given HTML <p>Hello <b>there</b> now!</p>, p.ownText() returns "Hello now!", whereas p.text() returns "Hello there now!". Note that the text within the b element is not returned, as it is not a direct child of the p element. Returns: unencoded text, or empty string if none. See Also: text(), textNodes()ownTextpublic String ownText​()StringGets the text owned by this element only; does not get the combined text of all children. For example, given HTML <p>Hello <b>there</b> now!</p>, p.ownText() returns "Hello now!", whereas p.text() returns "Hello there now!". Note that the text within the b element is not returned, as it is not a direct child of the p element.For example, given HTML <p>Hello <b>there</b> now!</p>, p.ownText() returns "Hello now!", whereas p.text() returns "Hello there now!". Note that the text within the b element is not returned, as it is not a direct child of the p element.<p>Hello <b>there</b> now!</p>p.ownText()"Hello now!"p.text()"Hello there now!"bpReturns: unencoded text, or empty string if none. See Also: text(), textNodes()Returns:Returns:unencoded text, or empty string if none.See Also:See Also:text(), textNodes()text()text()textNodes()textNodes()text public Element text​(String text) Set the text of this element. Any existing contents (text or elements) will be cleared Parameters: text - unencoded text Returns: this elementtext public Element text​(String text) Set the text of this element. Any existing contents (text or elements) will be cleared Parameters: text - unencoded text Returns: this elementtextpublic Element text​(String text)ElementStringSet the text of this element. Any existing contents (text or elements) will be clearedParameters: text - unencoded text Returns: this elementParameters:Parameters:text - unencoded texttextReturns:Returns:this elementhasText public boolean hasText​() Test if this element has any text content (that is not just whitespace). Returns: true if element has non-blank text content.hasText public boolean hasText​() Test if this element has any text content (that is not just whitespace). Returns: true if element has non-blank text content.hasTextpublic boolean hasText​()Test if this element has any text content (that is not just whitespace).Returns: true if element has non-blank text content.Returns:Returns:true if element has non-blank text content.data public String data​() Get the combined data of this element. Data is e.g. the inside of a script tag. Note that data is NOT the text of the element. Use text() to get the text that would be visible to a user, and data() for the contents of scripts, comments, CSS styles, etc. Returns: the data, or empty string if none See Also: dataNodes()data public String data​() Get the combined data of this element. Data is e.g. the inside of a script tag. Note that data is NOT the text of the element. Use text() to get the text that would be visible to a user, and data() for the contents of scripts, comments, CSS styles, etc. Returns: the data, or empty string if none See Also: dataNodes()datapublic String data​()StringGet the combined data of this element. Data is e.g. the inside of a script tag. Note that data is NOT the text of the element. Use text() to get the text that would be visible to a user, and data() for the contents of scripts, comments, CSS styles, etc.scripttext()text()data()data()Returns: the data, or empty string if none See Also: dataNodes()Returns:Returns:the data, or empty string if noneSee Also:See Also:dataNodes()dataNodes()dataNodes()className public String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated. (E.g. on <div class="header gray"> returns, " header gray") Returns: The literal class attribute, or empty string if no class attribute set.className public String className​() Gets the literal value of this element's "class" attribute, which may include multiple class names, space separated. (E.g. on <div class="header gray"> returns, " header gray") Returns: The literal class attribute, or empty string if no class attribute set.classNamepublic String className​()StringGets the literal value of this element's "class" attribute, which may include multiple class names, space separated. (E.g. on <div class="header gray"> returns, " header gray")<div class="header gray">header grayReturns: The literal class attribute, or empty string if no class attribute set.Returns:Returns:The literal class attribute, or empty string if no class attribute set.empty stringclassNames public Set<String> classNames​() Get all of the element's class names. E.g. on element <div class="header gray">, returns a set of two elements "header", "gray". Note that modifications to this set are not pushed to the backing class attribute; use the classNames(java.util.Set) method to persist them. Returns: set of classnames, empty if no class attributeclassNames public Set<String> classNames​() Get all of the element's class names. E.g. on element <div class="header gray">, returns a set of two elements "header", "gray". Note that modifications to this set are not pushed to the backing class attribute; use the classNames(java.util.Set) method to persist them. Returns: set of classnames, empty if no class attributeclassNamespublic Set<String> classNames​()SetStringGet all of the element's class names. E.g. on element <div class="header gray">, returns a set of two elements "header", "gray". Note that modifications to this set are not pushed to the backing class attribute; use the classNames(java.util.Set) method to persist them.<div class="header gray">"header", "gray"classclassNames(java.util.Set)classNames(java.util.Set)Returns: set of classnames, empty if no class attributeReturns:Returns:set of classnames, empty if no class attributeclassNames public Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names. Parameters: classNames - set of classes Returns: this element, for chainingclassNames public Element classNames​(Set<String> classNames) Set the element's class attribute to the supplied class names. Parameters: classNames - set of classes Returns: this element, for chainingclassNamespublic Element classNames​(Set<String> classNames)ElementSetStringSet the element's class attribute to the supplied class names.classParameters: classNames - set of classes Returns: this element, for chainingParameters:Parameters:classNames - set of classesclassNamesReturns:Returns:this element, for chaininghasClass public boolean hasClass​(String className) Tests if this element has a class. Case insensitive. Parameters: className - name of class to check for Returns: true if it does, false if nothasClass public boolean hasClass​(String className) Tests if this element has a class. Case insensitive. Parameters: className - name of class to check for Returns: true if it does, false if nothasClasspublic boolean hasClass​(String className)StringTests if this element has a class. Case insensitive.Parameters: className - name of class to check for Returns: true if it does, false if notParameters:Parameters:className - name of class to check forclassNameReturns:Returns:true if it does, false if notaddClass public Element addClass​(String className) Add a class name to this element's class attribute. Parameters: className - class name to add Returns: this elementaddClass public Element addClass​(String className) Add a class name to this element's class attribute. Parameters: className - class name to add Returns: this elementaddClasspublic Element addClass​(String className)ElementStringAdd a class name to this element's class attribute.classParameters: className - class name to add Returns: this elementParameters:Parameters:className - class name to addclassNameReturns:Returns:this elementremoveClass public Element removeClass​(String className) Remove a class name from this element's class attribute. Parameters: className - class name to remove Returns: this elementremoveClass public Element removeClass​(String className) Remove a class name from this element's class attribute. Parameters: className - class name to remove Returns: this elementremoveClasspublic Element removeClass​(String className)ElementStringRemove a class name from this element's class attribute.classParameters: className - class name to remove Returns: this elementParameters:Parameters:className - class name to removeclassNameReturns:Returns:this elementtoggleClass public Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it. Parameters: className - class name to toggle Returns: this elementtoggleClass public Element toggleClass​(String className) Toggle a class name on this element's class attribute: if present, remove it; otherwise add it. Parameters: className - class name to toggle Returns: this elementtoggleClasspublic Element toggleClass​(String className)ElementStringToggle a class name on this element's class attribute: if present, remove it; otherwise add it.classParameters: className - class name to toggle Returns: this elementParameters:Parameters:className - class name to toggleclassNameReturns:Returns:this elementval public String val​() Get the value of a form element (input, textarea, etc). Returns: the value of the form element, or empty string if not set.val public String val​() Get the value of a form element (input, textarea, etc). Returns: the value of the form element, or empty string if not set.valpublic String val​()StringGet the value of a form element (input, textarea, etc).Returns: the value of the form element, or empty string if not set.Returns:Returns:the value of the form element, or empty string if not set.val public Element val​(String value) Set the value of a form element (input, textarea, etc). Parameters: value - value to set Returns: this element (for chaining)val public Element val​(String value) Set the value of a form element (input, textarea, etc). Parameters: value - value to set Returns: this element (for chaining)valpublic Element val​(String value)ElementStringSet the value of a form element (input, textarea, etc).Parameters: value - value to set Returns: this element (for chaining)Parameters:Parameters:value - value to setvalueReturns:Returns:this element (for chaining)html public String html​() Retrieves the element's inner HTML. E.g. on a <div> with one empty <p>, would return <p></p>. (Whereas Node.outerHtml() would return <div><p></p></div>.) Returns: String of HTML. See Also: Node.outerHtml()html public String html​() Retrieves the element's inner HTML. E.g. on a <div> with one empty <p>, would return <p></p>. (Whereas Node.outerHtml() would return <div><p></p></div>.) Returns: String of HTML. See Also: Node.outerHtml()htmlpublic String html​()StringRetrieves the element's inner HTML. E.g. on a <div> with one empty <p>, would return <p></p>. (Whereas Node.outerHtml() would return <div><p></p></div>.)<div><p><p></p>Node.outerHtml()Node.outerHtml()<div><p></p></div>Returns: String of HTML. See Also: Node.outerHtml()Returns:Returns:String of HTML.See Also:See Also:Node.outerHtml()Node.outerHtml()Node.outerHtml()html public <T extends Appendable> T html​(T appendable) Write this node and its children to the given Appendable. Overrides: html in class Node Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining.html public <T extends Appendable> T html​(T appendable) Write this node and its children to the given Appendable. Overrides: html in class Node Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining.htmlpublic <T extends Appendable> T html​(T appendable)AppendableWrite this node and its children to the given Appendable.AppendableAppendableOverrides: html in class Node Parameters: appendable - the Appendable to write to. Returns: the supplied Appendable, for chaining.Overrides:Overrides:html in class NodehtmlhtmlNodeNodeParameters:Parameters:appendable - the Appendable to write to.appendableAppendableAppendableReturns:Returns:the supplied Appendable, for chaining.AppendableAppendablehtml public Element html​(String html) Set this element's inner HTML. Clears the existing HTML first. Parameters: html - HTML to parse and set into this element Returns: this element See Also: append(String)html public Element html​(String html) Set this element's inner HTML. Clears the existing HTML first. Parameters: html - HTML to parse and set into this element Returns: this element See Also: append(String)htmlpublic Element html​(String html)ElementStringSet this element's inner HTML. Clears the existing HTML first.Parameters: html - HTML to parse and set into this element Returns: this element See Also: append(String)Parameters:Parameters:html - HTML to parse and set into this elementhtmlReturns:Returns:this elementSee Also:See Also:append(String)append(String)append(String)toString public String toString​() Overrides: toString in class NodetoString public String toString​() Overrides: toString in class NodetoStringpublic String toString​()StringOverrides: toString in class NodeOverrides:Overrides:toString in class NodetoStringtoStringNodeNodeclone public Element clone​() Description copied from class: Node Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using appendChild(Node). Overrides: clone in class Node Returns: a stand-alone cloned node, including clones of any children See Also: Node.shallowClone()clone public Element clone​() Description copied from class: Node Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using appendChild(Node). Overrides: clone in class Node Returns: a stand-alone cloned node, including clones of any children See Also: Node.shallowClone()clonepublic Element clone​()ElementDescription copied from class: NodeDescription copied from class: NodeNodeNodeCreate a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the original node. The cloned node may be adopted into another Document or node structure using appendChild(Node).The cloned node may be adopted into another Document or node structure using appendChild(Node).appendChild(Node)appendChild(Node)Overrides: clone in class Node Returns: a stand-alone cloned node, including clones of any children See Also: Node.shallowClone()Overrides:Overrides:clone in class NodeclonecloneNodeNodeReturns:Returns:a stand-alone cloned node, including clones of any childrenSee Also:See Also:Node.shallowClone()Node.shallowClone()Node.shallowClone()shallowClone public Element shallowClone​() Description copied from class: Node Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes. Overrides: shallowClone in class Node Returns: a single independent copy of this node See Also: Node.clone()shallowClone public Element shallowClone​() Description copied from class: Node Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes. Overrides: shallowClone in class Node Returns: a single independent copy of this node See Also: Node.clone()shallowClonepublic Element shallowClone​()ElementDescription copied from class: NodeDescription copied from class: NodeNodeNodeCreate a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have no parent or sibling nodes.Overrides: shallowClone in class Node Returns: a single independent copy of this node See Also: Node.clone()Overrides:Overrides:shallowClone in class NodeshallowCloneshallowCloneNodeNodeReturns:Returns:a single independent copy of this nodeSee Also:See Also:Node.clone()Node.clone()Node.clone()doClone protected Element doClone​(Node parent) Overrides: doClone in class NodedoClone protected Element doClone​(Node parent) Overrides: doClone in class NodedoCloneprotected Element doClone​(Node parent)ElementNodeOverrides: doClone in class NodeOverrides:Overrides:doClone in class NodedoClonedoCloneNodeNodeSkip navigation links Overview Package Class Use Tree Deprecated Index HelpSkip navigation linksSkip navigation linksOverview Package Class Use Tree Deprecated Index HelpOverviewOverviewPackagePackageClassUseUseTreeTreeDeprecatedDeprecatedIndexIndexHelpHelpPrev Class Next Class Frames No Frames All Classes <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodPrev Class Next ClassPrev ClassPrev ClassPrev ClassNext ClassNext ClassNext ClassFrames No FramesFramesFramesNo FramesNo FramesAll ClassesAll ClassesAll Classes<div> JavaScript is disabled on your browser. </div><div> JavaScript is disabled on your browser. </div>Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSummary: Nested | Field | Constr | MethodSummary:Nested |Field |Constr |ConstrMethodMethodDetail: Field | Constr | MethodDetail:Field |Constr |ConstrMethodMethodCopyright © 2009–2017 Jonathan Hedley. All rights reserved.Copyright © 2009–2017 Jonathan Hedley. All rights reserved.Jonathan Hedley