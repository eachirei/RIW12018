<div> JavaScript is disabled on your browser. </div> Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | Method Package org.jsoup.safety Class Whitelist java.lang.Object org.jsoup.safety.Whitelist public class Whitelist extends Object Whitelists define what HTML (elements and attributes) to allow through the cleaner. Everything else is removed. Start with one of the defaults: none() simpleText() basic() basicWithImages() relaxed() If you need to allow more through (please be careful!), tweak a base whitelist with: addTags(java.lang.String...) addAttributes(java.lang.String, java.lang.String...) addEnforcedAttribute(java.lang.String, java.lang.String, java.lang.String) addProtocols(java.lang.String, java.lang.String, java.lang.String...) You can remove any setting from an existing whitelist with: removeTags(java.lang.String...) removeAttributes(java.lang.String, java.lang.String...) removeEnforcedAttribute(java.lang.String, java.lang.String) removeProtocols(java.lang.String, java.lang.String, java.lang.String...) The cleaner and these whitelists assume that you want to clean a body fragment of HTML (to add user supplied HTML into a templated page), and not to clean a full HTML document. If the latter is the case, either wrap the document HTML around the cleaned body HTML, or create a whitelist that allows html and head elements as appropriate. If you are going to extend a whitelist, please be very careful. Make sure you understand what attributes may lead to XSS attack vectors. URL attributes are particularly vulnerable and require careful validation. See http://ha.ckers.org/xss.html for some XSS attack examples. Author: Jonathan Hedley Constructor Summary Constructors Constructor Description Whitelist​() Create a new, empty whitelist. Method Summary All Methods Static Methods Instance Methods Concrete Methods Modifier and Type Method Description Whitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag. Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag. Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute. Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist. static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. static Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https. protected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tag protected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelist static Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped. Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Whitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag. Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag. Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute. Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist. static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Constructor Detail Whitelist public Whitelist​() Create a new, empty whitelist. Generally it will be better to start with a default prepared whitelist instead. See Also: basic(), basicWithImages(), simpleText(), relaxed() Method Detail none public static Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped. Returns: whitelist simpleText public static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u. All other HTML (tags and attributes) will be removed. Returns: whitelist basic public static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. Links (a elements) can point to http, https, ftp, mailto, and have an enforced rel=nofollow attribute. Does not allow images. Returns: whitelist basicWithImages public static Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https. Returns: whitelist relaxed public static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Links do not have an enforced rel=nofollow attribute, but you can add that if desired. Returns: whitelist addTags public Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist. (If a tag is not allowed, it will be removed from the HTML.) Parameters: tags - tag names to allow Returns: this (for chaining) removeTags public Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist. (If a tag is not allowed, it will be removed from the HTML.) Parameters: tags - tag names to disallow Returns: this (for chaining) addAttributes public Whitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: addAttributes("a", "href", "class") allows href and class attributes on a tags. To make an attribute valid for all tags, use the pseudo tag :all, e.g. addAttributes(":all", "class"). Parameters: tag - The tag the attributes are for. The tag will be added to the allowed tag list if necessary. attributes - List of valid attributes for the tag Returns: this (for chaining) removeAttributes public Whitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: removeAttributes("a", "href", "class") disallows href and class attributes on a tags. To make an attribute invalid for all tags, use the pseudo tag :all, e.g. removeAttributes(":all", "class"). Parameters: tag - The tag the attributes are for. attributes - List of invalid attributes for the tag Returns: this (for chaining) addEnforcedAttribute public Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element already has the attribute set, it will be overridden with this value. E.g.: addEnforcedAttribute("a", "rel", "nofollow") will make all a tags output as <a href="..." rel="nofollow"> Parameters: tag - The tag the enforced attribute is for. The tag will be added to the allowed tag list if necessary. attribute - The attribute name value - The enforced attribute value Returns: this (for chaining) removeEnforcedAttribute public Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag. Parameters: tag - The tag the enforced attribute is for. attribute - The attribute name Returns: this (for chaining) preserveRelativeLinks public Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. By default, this is false: URLs will be made absolute (e.g. start with an allowed protocol, like e.g. http://. Note that when handling relative links, the input document must have an appropriate base URI set when parsing, so that the link's protocol can be confirmed. Regardless of the setting of the preserve relative links option, the link must be resolvable against the base URI to an allowed protocol; otherwise the attribute will be removed. Parameters: preserve - true to allow relative links, false (default) to deny Returns: this Whitelist, for chaining. See Also: addProtocols(java.lang.String, java.lang.String, java.lang.String...) addProtocols public Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to URLs with the defined protocol. E.g.: addProtocols("a", "href", "ftp", "http", "https") To allow a link to an in-page URL anchor (i.e. <a href="#anchor">, add a #: E.g.: addProtocols("a", "href", "#") Parameters: tag - Tag the URL protocol is for attribute - Attribute name protocols - List of valid protocols Returns: this, for chaining removeProtocols public Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute. If you remove all protocols for an attribute, that attribute will allow any protocol. E.g.: removeProtocols("a", "href", "ftp") Parameters: tag - Tag the URL protocol is for attribute - Attribute name removeProtocols - List of invalid protocols Returns: this, for chaining isSafeTag protected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelist Parameters: tag - test tag Returns: true if allowed isSafeAttribute protected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tag Parameters: tagName - tag to consider allowing the attribute in el - element under test, to confirm protocol attr - attribute under test Returns: true if allowed Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | Method Copyright © 2009–2017 Jonathan Hedley. All rights reserved.<div> JavaScript is disabled on your browser. </div>Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSkip navigation links Overview Package Class Use Tree Deprecated Index HelpSkip navigation linksSkip navigation linksOverview Package Class Use Tree Deprecated Index HelpOverviewOverviewPackagePackageClassUseUseTreeTreeDeprecatedDeprecatedIndexIndexHelpHelpPrev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodPrev Class Next ClassPrev ClassPrev ClassPrev ClassNext ClassFrames No FramesFramesFramesNo FramesNo FramesAll ClassesAll ClassesAll ClassesSEARCH:SEARCH:SEARCH:<div> JavaScript is disabled on your browser. </div><div> JavaScript is disabled on your browser. </div>Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSummary: Nested | Field | Constr | MethodSummary:Nested |Field |Constr |ConstrMethodMethodDetail: Field | Constr | MethodDetail:Field |Constr |ConstrMethodMethodPackage org.jsoup.safety Class WhitelistPackage org.jsoup.safetyPackageorg.jsoup.safetyClass Whitelistjava.lang.Object org.jsoup.safety.Whitelist public class Whitelist extends Object Whitelists define what HTML (elements and attributes) to allow through the cleaner. Everything else is removed. Start with one of the defaults: none() simpleText() basic() basicWithImages() relaxed() If you need to allow more through (please be careful!), tweak a base whitelist with: addTags(java.lang.String...) addAttributes(java.lang.String, java.lang.String...) addEnforcedAttribute(java.lang.String, java.lang.String, java.lang.String) addProtocols(java.lang.String, java.lang.String, java.lang.String...) You can remove any setting from an existing whitelist with: removeTags(java.lang.String...) removeAttributes(java.lang.String, java.lang.String...) removeEnforcedAttribute(java.lang.String, java.lang.String) removeProtocols(java.lang.String, java.lang.String, java.lang.String...) The cleaner and these whitelists assume that you want to clean a body fragment of HTML (to add user supplied HTML into a templated page), and not to clean a full HTML document. If the latter is the case, either wrap the document HTML around the cleaned body HTML, or create a whitelist that allows html and head elements as appropriate. If you are going to extend a whitelist, please be very careful. Make sure you understand what attributes may lead to XSS attack vectors. URL attributes are particularly vulnerable and require careful validation. See http://ha.ckers.org/xss.html for some XSS attack examples. Author: Jonathan Hedley Constructor Summary Constructors Constructor Description Whitelist​() Create a new, empty whitelist. Method Summary All Methods Static Methods Instance Methods Concrete Methods Modifier and Type Method Description Whitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag. Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag. Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute. Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist. static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. static Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https. protected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tag protected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelist static Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped. Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Whitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag. Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag. Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute. Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist. static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Constructor Detail Whitelist public Whitelist​() Create a new, empty whitelist. Generally it will be better to start with a default prepared whitelist instead. See Also: basic(), basicWithImages(), simpleText(), relaxed() Method Detail none public static Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped. Returns: whitelist simpleText public static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u. All other HTML (tags and attributes) will be removed. Returns: whitelist basic public static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. Links (a elements) can point to http, https, ftp, mailto, and have an enforced rel=nofollow attribute. Does not allow images. Returns: whitelist basicWithImages public static Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https. Returns: whitelist relaxed public static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Links do not have an enforced rel=nofollow attribute, but you can add that if desired. Returns: whitelist addTags public Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist. (If a tag is not allowed, it will be removed from the HTML.) Parameters: tags - tag names to allow Returns: this (for chaining) removeTags public Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist. (If a tag is not allowed, it will be removed from the HTML.) Parameters: tags - tag names to disallow Returns: this (for chaining) addAttributes public Whitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: addAttributes("a", "href", "class") allows href and class attributes on a tags. To make an attribute valid for all tags, use the pseudo tag :all, e.g. addAttributes(":all", "class"). Parameters: tag - The tag the attributes are for. The tag will be added to the allowed tag list if necessary. attributes - List of valid attributes for the tag Returns: this (for chaining) removeAttributes public Whitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: removeAttributes("a", "href", "class") disallows href and class attributes on a tags. To make an attribute invalid for all tags, use the pseudo tag :all, e.g. removeAttributes(":all", "class"). Parameters: tag - The tag the attributes are for. attributes - List of invalid attributes for the tag Returns: this (for chaining) addEnforcedAttribute public Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element already has the attribute set, it will be overridden with this value. E.g.: addEnforcedAttribute("a", "rel", "nofollow") will make all a tags output as <a href="..." rel="nofollow"> Parameters: tag - The tag the enforced attribute is for. The tag will be added to the allowed tag list if necessary. attribute - The attribute name value - The enforced attribute value Returns: this (for chaining) removeEnforcedAttribute public Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag. Parameters: tag - The tag the enforced attribute is for. attribute - The attribute name Returns: this (for chaining) preserveRelativeLinks public Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. By default, this is false: URLs will be made absolute (e.g. start with an allowed protocol, like e.g. http://. Note that when handling relative links, the input document must have an appropriate base URI set when parsing, so that the link's protocol can be confirmed. Regardless of the setting of the preserve relative links option, the link must be resolvable against the base URI to an allowed protocol; otherwise the attribute will be removed. Parameters: preserve - true to allow relative links, false (default) to deny Returns: this Whitelist, for chaining. See Also: addProtocols(java.lang.String, java.lang.String, java.lang.String...) addProtocols public Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to URLs with the defined protocol. E.g.: addProtocols("a", "href", "ftp", "http", "https") To allow a link to an in-page URL anchor (i.e. <a href="#anchor">, add a #: E.g.: addProtocols("a", "href", "#") Parameters: tag - Tag the URL protocol is for attribute - Attribute name protocols - List of valid protocols Returns: this, for chaining removeProtocols public Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute. If you remove all protocols for an attribute, that attribute will allow any protocol. E.g.: removeProtocols("a", "href", "ftp") Parameters: tag - Tag the URL protocol is for attribute - Attribute name removeProtocols - List of invalid protocols Returns: this, for chaining isSafeTag protected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelist Parameters: tag - test tag Returns: true if allowed isSafeAttribute protected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tag Parameters: tagName - tag to consider allowing the attribute in el - element under test, to confirm protocol attr - attribute under test Returns: true if allowedjava.lang.Object org.jsoup.safety.Whitelistjava.lang.Objectjava.lang.Objectorg.jsoup.safety.Whitelistorg.jsoup.safety.Whitelistorg.jsoup.safety.Whitelistpublic class Whitelist extends Object Whitelists define what HTML (elements and attributes) to allow through the cleaner. Everything else is removed. Start with one of the defaults: none() simpleText() basic() basicWithImages() relaxed() If you need to allow more through (please be careful!), tweak a base whitelist with: addTags(java.lang.String...) addAttributes(java.lang.String, java.lang.String...) addEnforcedAttribute(java.lang.String, java.lang.String, java.lang.String) addProtocols(java.lang.String, java.lang.String, java.lang.String...) You can remove any setting from an existing whitelist with: removeTags(java.lang.String...) removeAttributes(java.lang.String, java.lang.String...) removeEnforcedAttribute(java.lang.String, java.lang.String) removeProtocols(java.lang.String, java.lang.String, java.lang.String...) The cleaner and these whitelists assume that you want to clean a body fragment of HTML (to add user supplied HTML into a templated page), and not to clean a full HTML document. If the latter is the case, either wrap the document HTML around the cleaned body HTML, or create a whitelist that allows html and head elements as appropriate. If you are going to extend a whitelist, please be very careful. Make sure you understand what attributes may lead to XSS attack vectors. URL attributes are particularly vulnerable and require careful validation. See http://ha.ckers.org/xss.html for some XSS attack examples. Author: Jonathan Hedleypublic class Whitelist extends Object Whitelists define what HTML (elements and attributes) to allow through the cleaner. Everything else is removed. Start with one of the defaults: none() simpleText() basic() basicWithImages() relaxed() If you need to allow more through (please be careful!), tweak a base whitelist with: addTags(java.lang.String...) addAttributes(java.lang.String, java.lang.String...) addEnforcedAttribute(java.lang.String, java.lang.String, java.lang.String) addProtocols(java.lang.String, java.lang.String, java.lang.String...) You can remove any setting from an existing whitelist with: removeTags(java.lang.String...) removeAttributes(java.lang.String, java.lang.String...) removeEnforcedAttribute(java.lang.String, java.lang.String) removeProtocols(java.lang.String, java.lang.String, java.lang.String...) The cleaner and these whitelists assume that you want to clean a body fragment of HTML (to add user supplied HTML into a templated page), and not to clean a full HTML document. If the latter is the case, either wrap the document HTML around the cleaned body HTML, or create a whitelist that allows html and head elements as appropriate. If you are going to extend a whitelist, please be very careful. Make sure you understand what attributes may lead to XSS attack vectors. URL attributes are particularly vulnerable and require careful validation. See http://ha.ckers.org/xss.html for some XSS attack examples. Author: Jonathan Hedleypublic class Whitelist extends Object Whitelists define what HTML (elements and attributes) to allow through the cleaner. Everything else is removed. Start with one of the defaults: none() simpleText() basic() basicWithImages() relaxed() If you need to allow more through (please be careful!), tweak a base whitelist with: addTags(java.lang.String...) addAttributes(java.lang.String, java.lang.String...) addEnforcedAttribute(java.lang.String, java.lang.String, java.lang.String) addProtocols(java.lang.String, java.lang.String, java.lang.String...) You can remove any setting from an existing whitelist with: removeTags(java.lang.String...) removeAttributes(java.lang.String, java.lang.String...) removeEnforcedAttribute(java.lang.String, java.lang.String) removeProtocols(java.lang.String, java.lang.String, java.lang.String...) The cleaner and these whitelists assume that you want to clean a body fragment of HTML (to add user supplied HTML into a templated page), and not to clean a full HTML document. If the latter is the case, either wrap the document HTML around the cleaned body HTML, or create a whitelist that allows html and head elements as appropriate. If you are going to extend a whitelist, please be very careful. Make sure you understand what attributes may lead to XSS attack vectors. URL attributes are particularly vulnerable and require careful validation. See http://ha.ckers.org/xss.html for some XSS attack examples. Author: Jonathan Hedleypublic class Whitelist extends ObjectWhitelistObjectWhitelists define what HTML (elements and attributes) to allow through the cleaner. Everything else is removed. Start with one of the defaults: none() simpleText() basic() basicWithImages() relaxed() If you need to allow more through (please be careful!), tweak a base whitelist with: addTags(java.lang.String...) addAttributes(java.lang.String, java.lang.String...) addEnforcedAttribute(java.lang.String, java.lang.String, java.lang.String) addProtocols(java.lang.String, java.lang.String, java.lang.String...) You can remove any setting from an existing whitelist with: removeTags(java.lang.String...) removeAttributes(java.lang.String, java.lang.String...) removeEnforcedAttribute(java.lang.String, java.lang.String) removeProtocols(java.lang.String, java.lang.String, java.lang.String...) The cleaner and these whitelists assume that you want to clean a body fragment of HTML (to add user supplied HTML into a templated page), and not to clean a full HTML document. If the latter is the case, either wrap the document HTML around the cleaned body HTML, or create a whitelist that allows html and head elements as appropriate. If you are going to extend a whitelist, please be very careful. Make sure you understand what attributes may lead to XSS attack vectors. URL attributes are particularly vulnerable and require careful validation. See http://ha.ckers.org/xss.html for some XSS attack examples.Start with one of the defaults:none() simpleText() basic() basicWithImages() relaxed()none()none()none()simpleText()simpleText()simpleText()basic()basic()basic()basicWithImages()basicWithImages()basicWithImages()relaxed()relaxed()relaxed()If you need to allow more through (please be careful!), tweak a base whitelist with:addTags(java.lang.String...) addAttributes(java.lang.String, java.lang.String...) addEnforcedAttribute(java.lang.String, java.lang.String, java.lang.String) addProtocols(java.lang.String, java.lang.String, java.lang.String...)addTags(java.lang.String...)addTags(java.lang.String...)addTags(java.lang.String...)addAttributes(java.lang.String, java.lang.String...)addAttributes(java.lang.String, java.lang.String...)addAttributes(java.lang.String, java.lang.String...)addEnforcedAttribute(java.lang.String, java.lang.String, java.lang.String)addEnforcedAttribute(java.lang.String, java.lang.String, java.lang.String)addEnforcedAttribute(java.lang.String, java.lang.String, java.lang.String)addProtocols(java.lang.String, java.lang.String, java.lang.String...)addProtocols(java.lang.String, java.lang.String, java.lang.String...)addProtocols(java.lang.String, java.lang.String, java.lang.String...)You can remove any setting from an existing whitelist with:removeTags(java.lang.String...) removeAttributes(java.lang.String, java.lang.String...) removeEnforcedAttribute(java.lang.String, java.lang.String) removeProtocols(java.lang.String, java.lang.String, java.lang.String...)removeTags(java.lang.String...)removeTags(java.lang.String...)removeTags(java.lang.String...)removeAttributes(java.lang.String, java.lang.String...)removeAttributes(java.lang.String, java.lang.String...)removeAttributes(java.lang.String, java.lang.String...)removeEnforcedAttribute(java.lang.String, java.lang.String)removeEnforcedAttribute(java.lang.String, java.lang.String)removeEnforcedAttribute(java.lang.String, java.lang.String)removeProtocols(java.lang.String, java.lang.String, java.lang.String...)removeProtocols(java.lang.String, java.lang.String, java.lang.String...)removeProtocols(java.lang.String, java.lang.String, java.lang.String...)The cleaner and these whitelists assume that you want to clean a body fragment of HTML (to add user supplied HTML into a templated page), and not to clean a full HTML document. If the latter is the case, either wrap the document HTML around the cleaned body HTML, or create a whitelist that allows html and head elements as appropriate.bodyhtmlheadIf you are going to extend a whitelist, please be very careful. Make sure you understand what attributes may lead to XSS attack vectors. URL attributes are particularly vulnerable and require careful validation. See http://ha.ckers.org/xss.html for some XSS attack examples.Author: Jonathan HedleyAuthor:Author:Jonathan HedleyConstructor Summary Constructors Constructor Description Whitelist​() Create a new, empty whitelist. Method Summary All Methods Static Methods Instance Methods Concrete Methods Modifier and Type Method Description Whitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag. Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag. Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute. Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist. static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. static Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https. protected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tag protected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelist static Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped. Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Whitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag. Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag. Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute. Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist. static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, waitConstructor Summary Constructors Constructor Description Whitelist​() Create a new, empty whitelist. Method Summary All Methods Static Methods Instance Methods Concrete Methods Modifier and Type Method Description Whitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag. Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag. Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute. Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist. static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. static Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https. protected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tag protected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelist static Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped. Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Whitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag. Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag. Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute. Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist. static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, waitConstructor Summary Constructors Constructor Description Whitelist​() Create a new, empty whitelist. Method Summary All Methods Static Methods Instance Methods Concrete Methods Modifier and Type Method Description Whitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag. Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag. Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute. Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist. static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. static Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https. protected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tag protected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelist static Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped. Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Whitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag. Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag. Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute. Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist. static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, waitConstructor Summary Constructors Constructor Description Whitelist​() Create a new, empty whitelist.Constructor Summary Constructors Constructor Description Whitelist​() Create a new, empty whitelist.Constructor SummaryConstructors Constructor Description Whitelist​() Create a new, empty whitelist.ConstructorsConstructorsConstructor Description Whitelist​() Create a new, empty whitelist.Constructor DescriptionConstructorDescriptionWhitelist​() Create a new, empty whitelist.Whitelist​()Whitelist​()WhitelistWhitelistCreate a new, empty whitelist.Create a new, empty whitelist.Method Summary All Methods Static Methods Instance Methods Concrete Methods Modifier and Type Method Description Whitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag. Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag. Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute. Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist. static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. static Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https. protected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tag protected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelist static Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped. Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Whitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag. Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag. Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute. Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist. static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, waitMethod Summary All Methods Static Methods Instance Methods Concrete Methods Modifier and Type Method Description Whitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag. Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag. Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute. Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist. static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. static Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https. protected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tag protected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelist static Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped. Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Whitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag. Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag. Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute. Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist. static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, waitMethod SummaryAll Methods Static Methods Instance Methods Concrete Methods Modifier and Type Method Description Whitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag. Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag. Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute. Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist. static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. static Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https. protected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tag protected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelist static Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped. Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Whitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag. Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag. Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute. Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist. static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u.All Methods Static Methods Instance Methods Concrete MethodsAll MethodsAll MethodsStatic MethodsStatic MethodsStatic MethodsInstance MethodsInstance MethodsInstance MethodsConcrete MethodsConcrete MethodsConcrete MethodsModifier and Type Method Description Whitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag. Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag. Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute. Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist. static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. static Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https. protected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tag protected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelist static Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped. Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Whitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag. Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag. Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute. Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist. static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u.Modifier and Type Method DescriptionModifier and TypeMethodDescriptionWhitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag.WhitelistWhitelistWhitelistaddAttributes​(String tag, String... attributes)addAttributes​(String tag, String... attributes)addAttributesaddAttributesStringStringAdd a list of allowed attributes to a tag.Add a list of allowed attributes to a tag.Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag.WhitelistWhitelistWhitelistaddEnforcedAttribute​(String tag, String attribute, String value)addEnforcedAttribute​(String tag, String attribute, String value)addEnforcedAttributeaddEnforcedAttributeStringStringStringAdd an enforced attribute to a tag.Add an enforced attribute to a tag.Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute.WhitelistWhitelistWhitelistaddProtocols​(String tag, String attribute, String... protocols)addProtocols​(String tag, String attribute, String... protocols)addProtocolsaddProtocolsStringStringStringAdd allowed URL protocols for an element's URL attribute.Add allowed URL protocols for an element's URL attribute.Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist.WhitelistWhitelistWhitelistaddTags​(String... tags)addTags​(String... tags)addTagsaddTagsStringAdd a list of allowed elements to a whitelist.Add a list of allowed elements to a whitelist.static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes.static Whiteliststatic WhitelistWhitelistbasic​()basic​()basicbasicThis whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes.This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes.a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ulstatic Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https.static Whiteliststatic WhitelistWhitelistbasicWithImages​()basicWithImages​()basicWithImagesbasicWithImagesThis whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https.This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https.basic()basic()imgsrchttphttpsprotected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tagprotected booleanprotected booleanisSafeAttribute​(String tagName, Element el, Attribute attr)isSafeAttribute​(String tagName, Element el, Attribute attr)isSafeAttributeisSafeAttributeStringElementAttributeTest if the supplied attribute is allowed by this whitelist for this tagTest if the supplied attribute is allowed by this whitelist for this tagprotected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelistprotected booleanprotected booleanisSafeTag​(String tag)isSafeTag​(String tag)isSafeTagisSafeTagStringTest if the supplied tag is allowed by this whitelistTest if the supplied tag is allowed by this whiteliststatic Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped.static Whiteliststatic WhitelistWhitelistnone​()none​()nonenoneThis whitelist allows only text nodes: all HTML will be stripped.This whitelist allows only text nodes: all HTML will be stripped.Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links.WhitelistWhitelistWhitelistpreserveRelativeLinks​(boolean preserve)preserveRelativeLinks​(boolean preserve)preserveRelativeLinkspreserveRelativeLinksConfigure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links.Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links.static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ulstatic Whiteliststatic WhitelistWhitelistrelaxed​()relaxed​()relaxedrelaxedThis whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ulThis whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ula, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ulWhitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag.WhitelistWhitelistWhitelistremoveAttributes​(String tag, String... attributes)removeAttributes​(String tag, String... attributes)removeAttributesremoveAttributesStringStringRemove a list of allowed attributes from a tag.Remove a list of allowed attributes from a tag.Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag.WhitelistWhitelistWhitelistremoveEnforcedAttribute​(String tag, String attribute)removeEnforcedAttribute​(String tag, String attribute)removeEnforcedAttributeremoveEnforcedAttributeStringStringRemove a previously configured enforced attribute from a tag.Remove a previously configured enforced attribute from a tag.Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute.WhitelistWhitelistWhitelistremoveProtocols​(String tag, String attribute, String... removeProtocols)removeProtocols​(String tag, String attribute, String... removeProtocols)removeProtocolsremoveProtocolsStringStringStringRemove allowed URL protocols for an element's URL attribute.Remove allowed URL protocols for an element's URL attribute.Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist.WhitelistWhitelistWhitelistremoveTags​(String... tags)removeTags​(String... tags)removeTagsremoveTagsStringRemove a list of allowed elements from a whitelist.Remove a list of allowed elements from a whitelist.static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u.static Whiteliststatic WhitelistWhitelistsimpleText​()simpleText​()simpleTextsimpleTextThis whitelist allows only simple text formatting: b, em, i, strong, u.This whitelist allows only simple text formatting: b, em, i, strong, u.b, em, i, strong, uMethods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, waitMethods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, waitMethods inherited from class java.lang.ObjectObjectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, waitcloneequalsfinalizegetClasshashCodenotifynotifyAlltoStringwaitwaitwaitConstructor Detail Whitelist public Whitelist​() Create a new, empty whitelist. Generally it will be better to start with a default prepared whitelist instead. See Also: basic(), basicWithImages(), simpleText(), relaxed() Method Detail none public static Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped. Returns: whitelist simpleText public static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u. All other HTML (tags and attributes) will be removed. Returns: whitelist basic public static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. Links (a elements) can point to http, https, ftp, mailto, and have an enforced rel=nofollow attribute. Does not allow images. Returns: whitelist basicWithImages public static Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https. Returns: whitelist relaxed public static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Links do not have an enforced rel=nofollow attribute, but you can add that if desired. Returns: whitelist addTags public Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist. (If a tag is not allowed, it will be removed from the HTML.) Parameters: tags - tag names to allow Returns: this (for chaining) removeTags public Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist. (If a tag is not allowed, it will be removed from the HTML.) Parameters: tags - tag names to disallow Returns: this (for chaining) addAttributes public Whitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: addAttributes("a", "href", "class") allows href and class attributes on a tags. To make an attribute valid for all tags, use the pseudo tag :all, e.g. addAttributes(":all", "class"). Parameters: tag - The tag the attributes are for. The tag will be added to the allowed tag list if necessary. attributes - List of valid attributes for the tag Returns: this (for chaining) removeAttributes public Whitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: removeAttributes("a", "href", "class") disallows href and class attributes on a tags. To make an attribute invalid for all tags, use the pseudo tag :all, e.g. removeAttributes(":all", "class"). Parameters: tag - The tag the attributes are for. attributes - List of invalid attributes for the tag Returns: this (for chaining) addEnforcedAttribute public Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element already has the attribute set, it will be overridden with this value. E.g.: addEnforcedAttribute("a", "rel", "nofollow") will make all a tags output as <a href="..." rel="nofollow"> Parameters: tag - The tag the enforced attribute is for. The tag will be added to the allowed tag list if necessary. attribute - The attribute name value - The enforced attribute value Returns: this (for chaining) removeEnforcedAttribute public Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag. Parameters: tag - The tag the enforced attribute is for. attribute - The attribute name Returns: this (for chaining) preserveRelativeLinks public Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. By default, this is false: URLs will be made absolute (e.g. start with an allowed protocol, like e.g. http://. Note that when handling relative links, the input document must have an appropriate base URI set when parsing, so that the link's protocol can be confirmed. Regardless of the setting of the preserve relative links option, the link must be resolvable against the base URI to an allowed protocol; otherwise the attribute will be removed. Parameters: preserve - true to allow relative links, false (default) to deny Returns: this Whitelist, for chaining. See Also: addProtocols(java.lang.String, java.lang.String, java.lang.String...) addProtocols public Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to URLs with the defined protocol. E.g.: addProtocols("a", "href", "ftp", "http", "https") To allow a link to an in-page URL anchor (i.e. <a href="#anchor">, add a #: E.g.: addProtocols("a", "href", "#") Parameters: tag - Tag the URL protocol is for attribute - Attribute name protocols - List of valid protocols Returns: this, for chaining removeProtocols public Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute. If you remove all protocols for an attribute, that attribute will allow any protocol. E.g.: removeProtocols("a", "href", "ftp") Parameters: tag - Tag the URL protocol is for attribute - Attribute name removeProtocols - List of invalid protocols Returns: this, for chaining isSafeTag protected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelist Parameters: tag - test tag Returns: true if allowed isSafeAttribute protected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tag Parameters: tagName - tag to consider allowing the attribute in el - element under test, to confirm protocol attr - attribute under test Returns: true if allowedConstructor Detail Whitelist public Whitelist​() Create a new, empty whitelist. Generally it will be better to start with a default prepared whitelist instead. See Also: basic(), basicWithImages(), simpleText(), relaxed() Method Detail none public static Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped. Returns: whitelist simpleText public static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u. All other HTML (tags and attributes) will be removed. Returns: whitelist basic public static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. Links (a elements) can point to http, https, ftp, mailto, and have an enforced rel=nofollow attribute. Does not allow images. Returns: whitelist basicWithImages public static Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https. Returns: whitelist relaxed public static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Links do not have an enforced rel=nofollow attribute, but you can add that if desired. Returns: whitelist addTags public Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist. (If a tag is not allowed, it will be removed from the HTML.) Parameters: tags - tag names to allow Returns: this (for chaining) removeTags public Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist. (If a tag is not allowed, it will be removed from the HTML.) Parameters: tags - tag names to disallow Returns: this (for chaining) addAttributes public Whitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: addAttributes("a", "href", "class") allows href and class attributes on a tags. To make an attribute valid for all tags, use the pseudo tag :all, e.g. addAttributes(":all", "class"). Parameters: tag - The tag the attributes are for. The tag will be added to the allowed tag list if necessary. attributes - List of valid attributes for the tag Returns: this (for chaining) removeAttributes public Whitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: removeAttributes("a", "href", "class") disallows href and class attributes on a tags. To make an attribute invalid for all tags, use the pseudo tag :all, e.g. removeAttributes(":all", "class"). Parameters: tag - The tag the attributes are for. attributes - List of invalid attributes for the tag Returns: this (for chaining) addEnforcedAttribute public Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element already has the attribute set, it will be overridden with this value. E.g.: addEnforcedAttribute("a", "rel", "nofollow") will make all a tags output as <a href="..." rel="nofollow"> Parameters: tag - The tag the enforced attribute is for. The tag will be added to the allowed tag list if necessary. attribute - The attribute name value - The enforced attribute value Returns: this (for chaining) removeEnforcedAttribute public Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag. Parameters: tag - The tag the enforced attribute is for. attribute - The attribute name Returns: this (for chaining) preserveRelativeLinks public Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. By default, this is false: URLs will be made absolute (e.g. start with an allowed protocol, like e.g. http://. Note that when handling relative links, the input document must have an appropriate base URI set when parsing, so that the link's protocol can be confirmed. Regardless of the setting of the preserve relative links option, the link must be resolvable against the base URI to an allowed protocol; otherwise the attribute will be removed. Parameters: preserve - true to allow relative links, false (default) to deny Returns: this Whitelist, for chaining. See Also: addProtocols(java.lang.String, java.lang.String, java.lang.String...) addProtocols public Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to URLs with the defined protocol. E.g.: addProtocols("a", "href", "ftp", "http", "https") To allow a link to an in-page URL anchor (i.e. <a href="#anchor">, add a #: E.g.: addProtocols("a", "href", "#") Parameters: tag - Tag the URL protocol is for attribute - Attribute name protocols - List of valid protocols Returns: this, for chaining removeProtocols public Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute. If you remove all protocols for an attribute, that attribute will allow any protocol. E.g.: removeProtocols("a", "href", "ftp") Parameters: tag - Tag the URL protocol is for attribute - Attribute name removeProtocols - List of invalid protocols Returns: this, for chaining isSafeTag protected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelist Parameters: tag - test tag Returns: true if allowed isSafeAttribute protected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tag Parameters: tagName - tag to consider allowing the attribute in el - element under test, to confirm protocol attr - attribute under test Returns: true if allowedConstructor Detail Whitelist public Whitelist​() Create a new, empty whitelist. Generally it will be better to start with a default prepared whitelist instead. See Also: basic(), basicWithImages(), simpleText(), relaxed() Method Detail none public static Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped. Returns: whitelist simpleText public static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u. All other HTML (tags and attributes) will be removed. Returns: whitelist basic public static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. Links (a elements) can point to http, https, ftp, mailto, and have an enforced rel=nofollow attribute. Does not allow images. Returns: whitelist basicWithImages public static Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https. Returns: whitelist relaxed public static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Links do not have an enforced rel=nofollow attribute, but you can add that if desired. Returns: whitelist addTags public Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist. (If a tag is not allowed, it will be removed from the HTML.) Parameters: tags - tag names to allow Returns: this (for chaining) removeTags public Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist. (If a tag is not allowed, it will be removed from the HTML.) Parameters: tags - tag names to disallow Returns: this (for chaining) addAttributes public Whitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: addAttributes("a", "href", "class") allows href and class attributes on a tags. To make an attribute valid for all tags, use the pseudo tag :all, e.g. addAttributes(":all", "class"). Parameters: tag - The tag the attributes are for. The tag will be added to the allowed tag list if necessary. attributes - List of valid attributes for the tag Returns: this (for chaining) removeAttributes public Whitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: removeAttributes("a", "href", "class") disallows href and class attributes on a tags. To make an attribute invalid for all tags, use the pseudo tag :all, e.g. removeAttributes(":all", "class"). Parameters: tag - The tag the attributes are for. attributes - List of invalid attributes for the tag Returns: this (for chaining) addEnforcedAttribute public Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element already has the attribute set, it will be overridden with this value. E.g.: addEnforcedAttribute("a", "rel", "nofollow") will make all a tags output as <a href="..." rel="nofollow"> Parameters: tag - The tag the enforced attribute is for. The tag will be added to the allowed tag list if necessary. attribute - The attribute name value - The enforced attribute value Returns: this (for chaining) removeEnforcedAttribute public Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag. Parameters: tag - The tag the enforced attribute is for. attribute - The attribute name Returns: this (for chaining) preserveRelativeLinks public Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. By default, this is false: URLs will be made absolute (e.g. start with an allowed protocol, like e.g. http://. Note that when handling relative links, the input document must have an appropriate base URI set when parsing, so that the link's protocol can be confirmed. Regardless of the setting of the preserve relative links option, the link must be resolvable against the base URI to an allowed protocol; otherwise the attribute will be removed. Parameters: preserve - true to allow relative links, false (default) to deny Returns: this Whitelist, for chaining. See Also: addProtocols(java.lang.String, java.lang.String, java.lang.String...) addProtocols public Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to URLs with the defined protocol. E.g.: addProtocols("a", "href", "ftp", "http", "https") To allow a link to an in-page URL anchor (i.e. <a href="#anchor">, add a #: E.g.: addProtocols("a", "href", "#") Parameters: tag - Tag the URL protocol is for attribute - Attribute name protocols - List of valid protocols Returns: this, for chaining removeProtocols public Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute. If you remove all protocols for an attribute, that attribute will allow any protocol. E.g.: removeProtocols("a", "href", "ftp") Parameters: tag - Tag the URL protocol is for attribute - Attribute name removeProtocols - List of invalid protocols Returns: this, for chaining isSafeTag protected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelist Parameters: tag - test tag Returns: true if allowed isSafeAttribute protected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tag Parameters: tagName - tag to consider allowing the attribute in el - element under test, to confirm protocol attr - attribute under test Returns: true if allowedConstructor Detail Whitelist public Whitelist​() Create a new, empty whitelist. Generally it will be better to start with a default prepared whitelist instead. See Also: basic(), basicWithImages(), simpleText(), relaxed()Constructor Detail Whitelist public Whitelist​() Create a new, empty whitelist. Generally it will be better to start with a default prepared whitelist instead. See Also: basic(), basicWithImages(), simpleText(), relaxed()Constructor DetailWhitelist public Whitelist​() Create a new, empty whitelist. Generally it will be better to start with a default prepared whitelist instead. See Also: basic(), basicWithImages(), simpleText(), relaxed()Whitelist public Whitelist​() Create a new, empty whitelist. Generally it will be better to start with a default prepared whitelist instead. See Also: basic(), basicWithImages(), simpleText(), relaxed()Whitelistpublic Whitelist​()Create a new, empty whitelist. Generally it will be better to start with a default prepared whitelist instead.See Also: basic(), basicWithImages(), simpleText(), relaxed()See Also:See Also:basic(), basicWithImages(), simpleText(), relaxed()basic()basic()basicWithImages()basicWithImages()simpleText()simpleText()relaxed()relaxed()Method Detail none public static Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped. Returns: whitelist simpleText public static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u. All other HTML (tags and attributes) will be removed. Returns: whitelist basic public static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. Links (a elements) can point to http, https, ftp, mailto, and have an enforced rel=nofollow attribute. Does not allow images. Returns: whitelist basicWithImages public static Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https. Returns: whitelist relaxed public static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Links do not have an enforced rel=nofollow attribute, but you can add that if desired. Returns: whitelist addTags public Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist. (If a tag is not allowed, it will be removed from the HTML.) Parameters: tags - tag names to allow Returns: this (for chaining) removeTags public Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist. (If a tag is not allowed, it will be removed from the HTML.) Parameters: tags - tag names to disallow Returns: this (for chaining) addAttributes public Whitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: addAttributes("a", "href", "class") allows href and class attributes on a tags. To make an attribute valid for all tags, use the pseudo tag :all, e.g. addAttributes(":all", "class"). Parameters: tag - The tag the attributes are for. The tag will be added to the allowed tag list if necessary. attributes - List of valid attributes for the tag Returns: this (for chaining) removeAttributes public Whitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: removeAttributes("a", "href", "class") disallows href and class attributes on a tags. To make an attribute invalid for all tags, use the pseudo tag :all, e.g. removeAttributes(":all", "class"). Parameters: tag - The tag the attributes are for. attributes - List of invalid attributes for the tag Returns: this (for chaining) addEnforcedAttribute public Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element already has the attribute set, it will be overridden with this value. E.g.: addEnforcedAttribute("a", "rel", "nofollow") will make all a tags output as <a href="..." rel="nofollow"> Parameters: tag - The tag the enforced attribute is for. The tag will be added to the allowed tag list if necessary. attribute - The attribute name value - The enforced attribute value Returns: this (for chaining) removeEnforcedAttribute public Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag. Parameters: tag - The tag the enforced attribute is for. attribute - The attribute name Returns: this (for chaining) preserveRelativeLinks public Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. By default, this is false: URLs will be made absolute (e.g. start with an allowed protocol, like e.g. http://. Note that when handling relative links, the input document must have an appropriate base URI set when parsing, so that the link's protocol can be confirmed. Regardless of the setting of the preserve relative links option, the link must be resolvable against the base URI to an allowed protocol; otherwise the attribute will be removed. Parameters: preserve - true to allow relative links, false (default) to deny Returns: this Whitelist, for chaining. See Also: addProtocols(java.lang.String, java.lang.String, java.lang.String...) addProtocols public Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to URLs with the defined protocol. E.g.: addProtocols("a", "href", "ftp", "http", "https") To allow a link to an in-page URL anchor (i.e. <a href="#anchor">, add a #: E.g.: addProtocols("a", "href", "#") Parameters: tag - Tag the URL protocol is for attribute - Attribute name protocols - List of valid protocols Returns: this, for chaining removeProtocols public Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute. If you remove all protocols for an attribute, that attribute will allow any protocol. E.g.: removeProtocols("a", "href", "ftp") Parameters: tag - Tag the URL protocol is for attribute - Attribute name removeProtocols - List of invalid protocols Returns: this, for chaining isSafeTag protected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelist Parameters: tag - test tag Returns: true if allowed isSafeAttribute protected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tag Parameters: tagName - tag to consider allowing the attribute in el - element under test, to confirm protocol attr - attribute under test Returns: true if allowedMethod Detail none public static Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped. Returns: whitelist simpleText public static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u. All other HTML (tags and attributes) will be removed. Returns: whitelist basic public static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. Links (a elements) can point to http, https, ftp, mailto, and have an enforced rel=nofollow attribute. Does not allow images. Returns: whitelist basicWithImages public static Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https. Returns: whitelist relaxed public static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Links do not have an enforced rel=nofollow attribute, but you can add that if desired. Returns: whitelist addTags public Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist. (If a tag is not allowed, it will be removed from the HTML.) Parameters: tags - tag names to allow Returns: this (for chaining) removeTags public Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist. (If a tag is not allowed, it will be removed from the HTML.) Parameters: tags - tag names to disallow Returns: this (for chaining) addAttributes public Whitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: addAttributes("a", "href", "class") allows href and class attributes on a tags. To make an attribute valid for all tags, use the pseudo tag :all, e.g. addAttributes(":all", "class"). Parameters: tag - The tag the attributes are for. The tag will be added to the allowed tag list if necessary. attributes - List of valid attributes for the tag Returns: this (for chaining) removeAttributes public Whitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: removeAttributes("a", "href", "class") disallows href and class attributes on a tags. To make an attribute invalid for all tags, use the pseudo tag :all, e.g. removeAttributes(":all", "class"). Parameters: tag - The tag the attributes are for. attributes - List of invalid attributes for the tag Returns: this (for chaining) addEnforcedAttribute public Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element already has the attribute set, it will be overridden with this value. E.g.: addEnforcedAttribute("a", "rel", "nofollow") will make all a tags output as <a href="..." rel="nofollow"> Parameters: tag - The tag the enforced attribute is for. The tag will be added to the allowed tag list if necessary. attribute - The attribute name value - The enforced attribute value Returns: this (for chaining) removeEnforcedAttribute public Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag. Parameters: tag - The tag the enforced attribute is for. attribute - The attribute name Returns: this (for chaining) preserveRelativeLinks public Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. By default, this is false: URLs will be made absolute (e.g. start with an allowed protocol, like e.g. http://. Note that when handling relative links, the input document must have an appropriate base URI set when parsing, so that the link's protocol can be confirmed. Regardless of the setting of the preserve relative links option, the link must be resolvable against the base URI to an allowed protocol; otherwise the attribute will be removed. Parameters: preserve - true to allow relative links, false (default) to deny Returns: this Whitelist, for chaining. See Also: addProtocols(java.lang.String, java.lang.String, java.lang.String...) addProtocols public Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to URLs with the defined protocol. E.g.: addProtocols("a", "href", "ftp", "http", "https") To allow a link to an in-page URL anchor (i.e. <a href="#anchor">, add a #: E.g.: addProtocols("a", "href", "#") Parameters: tag - Tag the URL protocol is for attribute - Attribute name protocols - List of valid protocols Returns: this, for chaining removeProtocols public Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute. If you remove all protocols for an attribute, that attribute will allow any protocol. E.g.: removeProtocols("a", "href", "ftp") Parameters: tag - Tag the URL protocol is for attribute - Attribute name removeProtocols - List of invalid protocols Returns: this, for chaining isSafeTag protected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelist Parameters: tag - test tag Returns: true if allowed isSafeAttribute protected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tag Parameters: tagName - tag to consider allowing the attribute in el - element under test, to confirm protocol attr - attribute under test Returns: true if allowedMethod Detailnone public static Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped. Returns: whitelistnone public static Whitelist none​() This whitelist allows only text nodes: all HTML will be stripped. Returns: whitelistnonepublic static Whitelist none​()WhitelistThis whitelist allows only text nodes: all HTML will be stripped.Returns: whitelistReturns:Returns:whitelistsimpleText public static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u. All other HTML (tags and attributes) will be removed. Returns: whitelistsimpleText public static Whitelist simpleText​() This whitelist allows only simple text formatting: b, em, i, strong, u. All other HTML (tags and attributes) will be removed. Returns: whitelistsimpleTextpublic static Whitelist simpleText​()WhitelistThis whitelist allows only simple text formatting: b, em, i, strong, u. All other HTML (tags and attributes) will be removed.b, em, i, strong, uReturns: whitelistReturns:Returns:whitelistbasic public static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. Links (a elements) can point to http, https, ftp, mailto, and have an enforced rel=nofollow attribute. Does not allow images. Returns: whitelistbasic public static Whitelist basic​() This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. Links (a elements) can point to http, https, ftp, mailto, and have an enforced rel=nofollow attribute. Does not allow images. Returns: whitelistbasicpublic static Whitelist basic​()WhitelistThis whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes. Links (a elements) can point to http, https, ftp, mailto, and have an enforced rel=nofollow attribute. Does not allow images.This whitelist allows a fuller range of text nodes: a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul, and appropriate attributes.a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li, ol, p, pre, q, small, span, strike, strong, sub, sup, u, ulLinks (a elements) can point to http, https, ftp, mailto, and have an enforced rel=nofollow attribute.ahttp, https, ftp, mailtorel=nofollowDoes not allow images.Returns: whitelistReturns:Returns:whitelistbasicWithImages public static Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https. Returns: whitelistbasicWithImages public static Whitelist basicWithImages​() This whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https. Returns: whitelistbasicWithImagespublic static Whitelist basicWithImages​()WhitelistThis whitelist allows the same text tags as basic(), and also allows img tags, with appropriate attributes, with src pointing to http or https.basic()basic()imgsrchttphttpsReturns: whitelistReturns:Returns:whitelistrelaxed public static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Links do not have an enforced rel=nofollow attribute, but you can add that if desired. Returns: whitelistrelaxed public static Whitelist relaxed​() This whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Links do not have an enforced rel=nofollow attribute, but you can add that if desired. Returns: whitelistrelaxedpublic static Whitelist relaxed​()WhitelistThis whitelist allows a full range of text and structural body HTML: a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ul Links do not have an enforced rel=nofollow attribute, but you can add that if desired.a, b, blockquote, br, caption, cite, code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub, sup, table, tbody, td, tfoot, th, thead, tr, u, ulLinks do not have an enforced rel=nofollow attribute, but you can add that if desired.rel=nofollowReturns: whitelistReturns:Returns:whitelistaddTags public Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist. (If a tag is not allowed, it will be removed from the HTML.) Parameters: tags - tag names to allow Returns: this (for chaining)addTags public Whitelist addTags​(String... tags) Add a list of allowed elements to a whitelist. (If a tag is not allowed, it will be removed from the HTML.) Parameters: tags - tag names to allow Returns: this (for chaining)addTagspublic Whitelist addTags​(String... tags)WhitelistStringAdd a list of allowed elements to a whitelist. (If a tag is not allowed, it will be removed from the HTML.)Parameters: tags - tag names to allow Returns: this (for chaining)Parameters:Parameters:tags - tag names to allowtagsReturns:Returns:this (for chaining)removeTags public Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist. (If a tag is not allowed, it will be removed from the HTML.) Parameters: tags - tag names to disallow Returns: this (for chaining)removeTags public Whitelist removeTags​(String... tags) Remove a list of allowed elements from a whitelist. (If a tag is not allowed, it will be removed from the HTML.) Parameters: tags - tag names to disallow Returns: this (for chaining)removeTagspublic Whitelist removeTags​(String... tags)WhitelistStringRemove a list of allowed elements from a whitelist. (If a tag is not allowed, it will be removed from the HTML.)Parameters: tags - tag names to disallow Returns: this (for chaining)Parameters:Parameters:tags - tag names to disallowtagsReturns:Returns:this (for chaining)addAttributes public Whitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: addAttributes("a", "href", "class") allows href and class attributes on a tags. To make an attribute valid for all tags, use the pseudo tag :all, e.g. addAttributes(":all", "class"). Parameters: tag - The tag the attributes are for. The tag will be added to the allowed tag list if necessary. attributes - List of valid attributes for the tag Returns: this (for chaining)addAttributes public Whitelist addAttributes​(String tag, String... attributes) Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: addAttributes("a", "href", "class") allows href and class attributes on a tags. To make an attribute valid for all tags, use the pseudo tag :all, e.g. addAttributes(":all", "class"). Parameters: tag - The tag the attributes are for. The tag will be added to the allowed tag list if necessary. attributes - List of valid attributes for the tag Returns: this (for chaining)addAttributespublic Whitelist addAttributes​(String tag, String... attributes)WhitelistStringStringAdd a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: addAttributes("a", "href", "class") allows href and class attributes on a tags. To make an attribute valid for all tags, use the pseudo tag :all, e.g. addAttributes(":all", "class").E.g.: addAttributes("a", "href", "class") allows href and class attributes on a tags.addAttributes("a", "href", "class")hrefclassaTo make an attribute valid for all tags, use the pseudo tag :all, e.g. addAttributes(":all", "class").all tags:alladdAttributes(":all", "class")Parameters: tag - The tag the attributes are for. The tag will be added to the allowed tag list if necessary. attributes - List of valid attributes for the tag Returns: this (for chaining)Parameters:Parameters:tag - The tag the attributes are for. The tag will be added to the allowed tag list if necessary.tagattributes - List of valid attributes for the tagattributesReturns:Returns:this (for chaining)removeAttributes public Whitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: removeAttributes("a", "href", "class") disallows href and class attributes on a tags. To make an attribute invalid for all tags, use the pseudo tag :all, e.g. removeAttributes(":all", "class"). Parameters: tag - The tag the attributes are for. attributes - List of invalid attributes for the tag Returns: this (for chaining)removeAttributes public Whitelist removeAttributes​(String tag, String... attributes) Remove a list of allowed attributes from a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: removeAttributes("a", "href", "class") disallows href and class attributes on a tags. To make an attribute invalid for all tags, use the pseudo tag :all, e.g. removeAttributes(":all", "class"). Parameters: tag - The tag the attributes are for. attributes - List of invalid attributes for the tag Returns: this (for chaining)removeAttributespublic Whitelist removeAttributes​(String tag, String... attributes)WhitelistStringStringRemove a list of allowed attributes from a tag. (If an attribute is not allowed on an element, it will be removed.) E.g.: removeAttributes("a", "href", "class") disallows href and class attributes on a tags. To make an attribute invalid for all tags, use the pseudo tag :all, e.g. removeAttributes(":all", "class").E.g.: removeAttributes("a", "href", "class") disallows href and class attributes on a tags.removeAttributes("a", "href", "class")hrefclassaTo make an attribute invalid for all tags, use the pseudo tag :all, e.g. removeAttributes(":all", "class").all tags:allremoveAttributes(":all", "class")Parameters: tag - The tag the attributes are for. attributes - List of invalid attributes for the tag Returns: this (for chaining)Parameters:Parameters:tag - The tag the attributes are for.tagattributes - List of invalid attributes for the tagattributesReturns:Returns:this (for chaining)addEnforcedAttribute public Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element already has the attribute set, it will be overridden with this value. E.g.: addEnforcedAttribute("a", "rel", "nofollow") will make all a tags output as <a href="..." rel="nofollow"> Parameters: tag - The tag the enforced attribute is for. The tag will be added to the allowed tag list if necessary. attribute - The attribute name value - The enforced attribute value Returns: this (for chaining)addEnforcedAttribute public Whitelist addEnforcedAttribute​(String tag, String attribute, String value) Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element already has the attribute set, it will be overridden with this value. E.g.: addEnforcedAttribute("a", "rel", "nofollow") will make all a tags output as <a href="..." rel="nofollow"> Parameters: tag - The tag the enforced attribute is for. The tag will be added to the allowed tag list if necessary. attribute - The attribute name value - The enforced attribute value Returns: this (for chaining)addEnforcedAttributepublic Whitelist addEnforcedAttribute​(String tag, String attribute, String value)WhitelistStringStringStringAdd an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element already has the attribute set, it will be overridden with this value. E.g.: addEnforcedAttribute("a", "rel", "nofollow") will make all a tags output as <a href="..." rel="nofollow">E.g.: addEnforcedAttribute("a", "rel", "nofollow") will make all a tags output as <a href="..." rel="nofollow">addEnforcedAttribute("a", "rel", "nofollow")a<a href="..." rel="nofollow">Parameters: tag - The tag the enforced attribute is for. The tag will be added to the allowed tag list if necessary. attribute - The attribute name value - The enforced attribute value Returns: this (for chaining)Parameters:Parameters:tag - The tag the enforced attribute is for. The tag will be added to the allowed tag list if necessary.tagattribute - The attribute nameattributevalue - The enforced attribute valuevalueReturns:Returns:this (for chaining)removeEnforcedAttribute public Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag. Parameters: tag - The tag the enforced attribute is for. attribute - The attribute name Returns: this (for chaining)removeEnforcedAttribute public Whitelist removeEnforcedAttribute​(String tag, String attribute) Remove a previously configured enforced attribute from a tag. Parameters: tag - The tag the enforced attribute is for. attribute - The attribute name Returns: this (for chaining)removeEnforcedAttributepublic Whitelist removeEnforcedAttribute​(String tag, String attribute)WhitelistStringStringRemove a previously configured enforced attribute from a tag.Parameters: tag - The tag the enforced attribute is for. attribute - The attribute name Returns: this (for chaining)Parameters:Parameters:tag - The tag the enforced attribute is for.tagattribute - The attribute nameattributeReturns:Returns:this (for chaining)preserveRelativeLinks public Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. By default, this is false: URLs will be made absolute (e.g. start with an allowed protocol, like e.g. http://. Note that when handling relative links, the input document must have an appropriate base URI set when parsing, so that the link's protocol can be confirmed. Regardless of the setting of the preserve relative links option, the link must be resolvable against the base URI to an allowed protocol; otherwise the attribute will be removed. Parameters: preserve - true to allow relative links, false (default) to deny Returns: this Whitelist, for chaining. See Also: addProtocols(java.lang.String, java.lang.String, java.lang.String...)preserveRelativeLinks public Whitelist preserveRelativeLinks​(boolean preserve) Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. By default, this is false: URLs will be made absolute (e.g. start with an allowed protocol, like e.g. http://. Note that when handling relative links, the input document must have an appropriate base URI set when parsing, so that the link's protocol can be confirmed. Regardless of the setting of the preserve relative links option, the link must be resolvable against the base URI to an allowed protocol; otherwise the attribute will be removed. Parameters: preserve - true to allow relative links, false (default) to deny Returns: this Whitelist, for chaining. See Also: addProtocols(java.lang.String, java.lang.String, java.lang.String...)preserveRelativeLinkspublic Whitelist preserveRelativeLinks​(boolean preserve)WhitelistConfigure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute links. By default, this is false: URLs will be made absolute (e.g. start with an allowed protocol, like e.g. http://. Note that when handling relative links, the input document must have an appropriate base URI set when parsing, so that the link's protocol can be confirmed. Regardless of the setting of the preserve relative links option, the link must be resolvable against the base URI to an allowed protocol; otherwise the attribute will be removed.falsehttp://Note that when handling relative links, the input document must have an appropriate base URI set when parsing, so that the link's protocol can be confirmed. Regardless of the setting of the preserve relative links option, the link must be resolvable against the base URI to an allowed protocol; otherwise the attribute will be removed.base URIpreserve relative linksParameters: preserve - true to allow relative links, false (default) to deny Returns: this Whitelist, for chaining. See Also: addProtocols(java.lang.String, java.lang.String, java.lang.String...)Parameters:Parameters:preserve - true to allow relative links, false (default) to denypreservetruefalseReturns:Returns:this Whitelist, for chaining.See Also:See Also:addProtocols(java.lang.String, java.lang.String, java.lang.String...)addProtocols(java.lang.String, java.lang.String, java.lang.String...)addProtocols(java.lang.String, java.lang.String, java.lang.String...)addProtocols public Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to URLs with the defined protocol. E.g.: addProtocols("a", "href", "ftp", "http", "https") To allow a link to an in-page URL anchor (i.e. <a href="#anchor">, add a #: E.g.: addProtocols("a", "href", "#") Parameters: tag - Tag the URL protocol is for attribute - Attribute name protocols - List of valid protocols Returns: this, for chainingaddProtocols public Whitelist addProtocols​(String tag, String attribute, String... protocols) Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to URLs with the defined protocol. E.g.: addProtocols("a", "href", "ftp", "http", "https") To allow a link to an in-page URL anchor (i.e. <a href="#anchor">, add a #: E.g.: addProtocols("a", "href", "#") Parameters: tag - Tag the URL protocol is for attribute - Attribute name protocols - List of valid protocols Returns: this, for chainingaddProtocolspublic Whitelist addProtocols​(String tag, String attribute, String... protocols)WhitelistStringStringStringAdd allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to URLs with the defined protocol. E.g.: addProtocols("a", "href", "ftp", "http", "https") To allow a link to an in-page URL anchor (i.e. <a href="#anchor">, add a #: E.g.: addProtocols("a", "href", "#")E.g.: addProtocols("a", "href", "ftp", "http", "https")addProtocols("a", "href", "ftp", "http", "https")To allow a link to an in-page URL anchor (i.e. <a href="#anchor">, add a #: E.g.: addProtocols("a", "href", "#")<a href="#anchor">#addProtocols("a", "href", "#")Parameters: tag - Tag the URL protocol is for attribute - Attribute name protocols - List of valid protocols Returns: this, for chainingParameters:Parameters:tag - Tag the URL protocol is fortagattribute - Attribute nameattributeprotocols - List of valid protocolsprotocolsReturns:Returns:this, for chainingremoveProtocols public Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute. If you remove all protocols for an attribute, that attribute will allow any protocol. E.g.: removeProtocols("a", "href", "ftp") Parameters: tag - Tag the URL protocol is for attribute - Attribute name removeProtocols - List of invalid protocols Returns: this, for chainingremoveProtocols public Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols) Remove allowed URL protocols for an element's URL attribute. If you remove all protocols for an attribute, that attribute will allow any protocol. E.g.: removeProtocols("a", "href", "ftp") Parameters: tag - Tag the URL protocol is for attribute - Attribute name removeProtocols - List of invalid protocols Returns: this, for chainingremoveProtocolspublic Whitelist removeProtocols​(String tag, String attribute, String... removeProtocols)WhitelistStringStringStringRemove allowed URL protocols for an element's URL attribute. If you remove all protocols for an attribute, that attribute will allow any protocol. E.g.: removeProtocols("a", "href", "ftp")E.g.: removeProtocols("a", "href", "ftp")removeProtocols("a", "href", "ftp")Parameters: tag - Tag the URL protocol is for attribute - Attribute name removeProtocols - List of invalid protocols Returns: this, for chainingParameters:Parameters:tag - Tag the URL protocol is fortagattribute - Attribute nameattributeremoveProtocols - List of invalid protocolsremoveProtocolsReturns:Returns:this, for chainingisSafeTag protected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelist Parameters: tag - test tag Returns: true if allowedisSafeTag protected boolean isSafeTag​(String tag) Test if the supplied tag is allowed by this whitelist Parameters: tag - test tag Returns: true if allowedisSafeTagprotected boolean isSafeTag​(String tag)StringTest if the supplied tag is allowed by this whitelistParameters: tag - test tag Returns: true if allowedParameters:Parameters:tag - test tagtagReturns:Returns:true if allowedisSafeAttribute protected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tag Parameters: tagName - tag to consider allowing the attribute in el - element under test, to confirm protocol attr - attribute under test Returns: true if allowedisSafeAttribute protected boolean isSafeAttribute​(String tagName, Element el, Attribute attr) Test if the supplied attribute is allowed by this whitelist for this tag Parameters: tagName - tag to consider allowing the attribute in el - element under test, to confirm protocol attr - attribute under test Returns: true if allowedisSafeAttributeprotected boolean isSafeAttribute​(String tagName, Element el, Attribute attr)StringElementAttributeTest if the supplied attribute is allowed by this whitelist for this tagParameters: tagName - tag to consider allowing the attribute in el - element under test, to confirm protocol attr - attribute under test Returns: true if allowedParameters:Parameters:tagName - tag to consider allowing the attribute intagNameel - element under test, to confirm protocolelattr - attribute under testattrReturns:Returns:true if allowedSkip navigation links Overview Package Class Use Tree Deprecated Index HelpSkip navigation linksSkip navigation linksOverview Package Class Use Tree Deprecated Index HelpOverviewOverviewPackagePackageClassUseUseTreeTreeDeprecatedDeprecatedIndexIndexHelpHelpPrev Class Next Class Frames No Frames All Classes <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodPrev Class Next ClassPrev ClassPrev ClassPrev ClassNext ClassFrames No FramesFramesFramesNo FramesNo FramesAll ClassesAll ClassesAll Classes<div> JavaScript is disabled on your browser. </div><div> JavaScript is disabled on your browser. </div>Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSummary: Nested | Field | Constr | MethodSummary:Nested |Field |Constr |ConstrMethodMethodDetail: Field | Constr | MethodDetail:Field |Constr |ConstrMethodMethodCopyright © 2009–2017 Jonathan Hedley. All rights reserved.Copyright © 2009–2017 Jonathan Hedley. All rights reserved.Jonathan Hedley