<div> JavaScript is disabled on your browser. </div> Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | Method Package org.jsoup.select Interface NodeVisitor All Known Implementing Classes: W3CDom.W3CBuilder public interface NodeVisitor Node visitor interface. Provide an implementing class to NodeTraversor to iterate through nodes. This interface provides two methods, head and tail. The head method is called when the node is first seen, and the tail method when all of the node's children have been visited. As an example, head can be used to create a start tag for a node, and tail to create the end tag. Method Summary All Methods Instance Methods Abstract Methods Modifier and Type Method Description void head​(Node node, int depth) Callback for when a node is first visited. void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Method Detail head void head​(Node node, int depth) Callback for when a node is first visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. tail void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | Method Copyright © 2009–2017 Jonathan Hedley. All rights reserved.<div> JavaScript is disabled on your browser. </div>Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSkip navigation links Overview Package Class Use Tree Deprecated Index HelpSkip navigation linksSkip navigation linksOverview Package Class Use Tree Deprecated Index HelpOverviewOverviewPackagePackageClassUseUseTreeTreeDeprecatedDeprecatedIndexIndexHelpHelpPrev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodPrev Class Next ClassPrev ClassPrev ClassPrev ClassNext ClassNext ClassNext ClassFrames No FramesFramesFramesNo FramesNo FramesAll ClassesAll ClassesAll ClassesSEARCH:SEARCH:SEARCH:<div> JavaScript is disabled on your browser. </div><div> JavaScript is disabled on your browser. </div>Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSummary: Nested | Field | Constr | MethodSummary:Nested |Field |Constr |MethodMethodDetail: Field | Constr | MethodDetail:Field |Constr |MethodMethodPackage org.jsoup.select Interface NodeVisitorPackage org.jsoup.selectPackageorg.jsoup.selectInterface NodeVisitorAll Known Implementing Classes: W3CDom.W3CBuilder public interface NodeVisitor Node visitor interface. Provide an implementing class to NodeTraversor to iterate through nodes. This interface provides two methods, head and tail. The head method is called when the node is first seen, and the tail method when all of the node's children have been visited. As an example, head can be used to create a start tag for a node, and tail to create the end tag. Method Summary All Methods Instance Methods Abstract Methods Modifier and Type Method Description void head​(Node node, int depth) Callback for when a node is first visited. void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Method Detail head void head​(Node node, int depth) Callback for when a node is first visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. tail void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1.All Known Implementing Classes: W3CDom.W3CBuilder public interface NodeVisitor Node visitor interface. Provide an implementing class to NodeTraversor to iterate through nodes. This interface provides two methods, head and tail. The head method is called when the node is first seen, and the tail method when all of the node's children have been visited. As an example, head can be used to create a start tag for a node, and tail to create the end tag.All Known Implementing Classes: W3CDom.W3CBuilder public interface NodeVisitor Node visitor interface. Provide an implementing class to NodeTraversor to iterate through nodes. This interface provides two methods, head and tail. The head method is called when the node is first seen, and the tail method when all of the node's children have been visited. As an example, head can be used to create a start tag for a node, and tail to create the end tag.All Known Implementing Classes: W3CDom.W3CBuilder public interface NodeVisitor Node visitor interface. Provide an implementing class to NodeTraversor to iterate through nodes. This interface provides two methods, head and tail. The head method is called when the node is first seen, and the tail method when all of the node's children have been visited. As an example, head can be used to create a start tag for a node, and tail to create the end tag.All Known Implementing Classes: W3CDom.W3CBuilderAll Known Implementing Classes:W3CDom.W3CBuilderW3CDom.W3CBuilderW3CDom.W3CBuilderpublic interface NodeVisitorNodeVisitorNode visitor interface. Provide an implementing class to NodeTraversor to iterate through nodes. This interface provides two methods, head and tail. The head method is called when the node is first seen, and the tail method when all of the node's children have been visited. As an example, head can be used to create a start tag for a node, and tail to create the end tag.NodeTraversorNodeTraversorThis interface provides two methods, head and tail. The head method is called when the node is first seen, and the tail method when all of the node's children have been visited. As an example, head can be used to create a start tag for a node, and tail to create the end tag.headtailMethod Summary All Methods Instance Methods Abstract Methods Modifier and Type Method Description void head​(Node node, int depth) Callback for when a node is first visited. void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited.Method Summary All Methods Instance Methods Abstract Methods Modifier and Type Method Description void head​(Node node, int depth) Callback for when a node is first visited. void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited.Method Summary All Methods Instance Methods Abstract Methods Modifier and Type Method Description void head​(Node node, int depth) Callback for when a node is first visited. void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited.Method Summary All Methods Instance Methods Abstract Methods Modifier and Type Method Description void head​(Node node, int depth) Callback for when a node is first visited. void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited.Method Summary All Methods Instance Methods Abstract Methods Modifier and Type Method Description void head​(Node node, int depth) Callback for when a node is first visited. void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited.Method SummaryAll Methods Instance Methods Abstract Methods Modifier and Type Method Description void head​(Node node, int depth) Callback for when a node is first visited. void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited.All Methods Instance Methods Abstract MethodsAll MethodsAll MethodsInstance MethodsInstance MethodsInstance MethodsAbstract MethodsAbstract MethodsAbstract MethodsModifier and Type Method Description void head​(Node node, int depth) Callback for when a node is first visited. void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited.Modifier and Type Method DescriptionModifier and TypeMethodDescriptionvoid head​(Node node, int depth) Callback for when a node is first visited.voidvoidhead​(Node node, int depth)head​(Node node, int depth)headheadNodeCallback for when a node is first visited.Callback for when a node is first visited.void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited.voidvoidtail​(Node node, int depth)tail​(Node node, int depth)tailtailNodeCallback for when a node is last visited, after all of its descendants have been visited.Callback for when a node is last visited, after all of its descendants have been visited.Method Detail head void head​(Node node, int depth) Callback for when a node is first visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. tail void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1.Method Detail head void head​(Node node, int depth) Callback for when a node is first visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. tail void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1.Method Detail head void head​(Node node, int depth) Callback for when a node is first visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. tail void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1.Method Detail head void head​(Node node, int depth) Callback for when a node is first visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. tail void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1.Method Detail head void head​(Node node, int depth) Callback for when a node is first visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. tail void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1.Method Detailhead void head​(Node node, int depth) Callback for when a node is first visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1.head void head​(Node node, int depth) Callback for when a node is first visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1.headvoid head​(Node node, int depth)NodeCallback for when a node is first visited.Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1.Parameters:Parameters:node - the node being visited.nodedepth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1.depthtail void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1.tail void tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1.tailvoid tail​(Node node, int depth)NodeCallback for when a node is last visited, after all of its descendants have been visited.Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1.Parameters:Parameters:node - the node being visited.nodedepth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1.depthSkip navigation links Overview Package Class Use Tree Deprecated Index HelpSkip navigation linksSkip navigation linksOverview Package Class Use Tree Deprecated Index HelpOverviewOverviewPackagePackageClassUseUseTreeTreeDeprecatedDeprecatedIndexIndexHelpHelpPrev Class Next Class Frames No Frames All Classes <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodPrev Class Next ClassPrev ClassPrev ClassPrev ClassNext ClassNext ClassNext ClassFrames No FramesFramesFramesNo FramesNo FramesAll ClassesAll ClassesAll Classes<div> JavaScript is disabled on your browser. </div><div> JavaScript is disabled on your browser. </div>Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSummary: Nested | Field | Constr | MethodSummary:Nested |Field |Constr |MethodMethodDetail: Field | Constr | MethodDetail:Field |Constr |MethodMethodCopyright © 2009–2017 Jonathan Hedley. All rights reserved.Copyright © 2009–2017 Jonathan Hedley. All rights reserved.Jonathan Hedley