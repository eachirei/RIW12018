<div> JavaScript is disabled on your browser. </div> Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | Method Package org.jsoup.select Class Elements java.lang.Object java.util.AbstractCollection<E> java.util.AbstractList<E> java.util.ArrayList<Element> org.jsoup.select.Elements All Implemented Interfaces: Serializable, Cloneable, Iterable<Element>, Collection<Element>, List<Element>, RandomAccess public class Elements extends ArrayList<Element> A list of Elements, with methods that act on every element in the list. To get an Elements object, use the Element.select(String) method. Author: Jonathan Hedley, jonathan@hedley.net See Also: Serialized Form Field Summary Fields inherited from class java.util.AbstractList modCount Constructor Summary Constructors Constructor Description Elements​() Elements​(int initialCapacity) Elements​(Collection<Element> elements) Elements​(List<Element> elements) Elements​(Element... elements) Method Summary All Methods Instance Methods Concrete Methods Modifier and Type Method Description Elements addClass​(String className) Add the class name to every matched element's class attribute. Elements after​(String html) Insert the supplied HTML after each matched element's outer HTML. Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML. String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute. Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements. Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML. Elements clone​() Creates a deep copy of these elements. List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements. List<String> eachText​() Get the text content of each of the matched elements. Elements empty​() Empty (remove all child nodes from) each matched element. Elements eq​(int index) Get the nth matched element as an Elements object. Elements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements. Element first​() Get the first matched element. List<FormElement> forms​() Get the FormElement forms from the selected elements, if any. boolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined. boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute. boolean hasText​() Test if any matched Element has any text content, that is not just whitespace. String html​() Get the combined inner HTML of all matched elements. Elements html​(String html) Set the inner HTML of each matched element. boolean is​(String query) Test if any of the matched elements match the supplied query. Element last​() Get the last matched element. Elements next​() Get the immediate next element sibling of each element in this list. Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query. Elements nextAll​() Get all of the following element siblings of each element in this list. Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query. Elements not​(String query) Remove elements from this list that match the Selector query. String outerHtml​() Get the combined outer HTML of all matched elements. Elements parents​() Get all of the parents and ancestor elements of the matched elements. Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML. Elements prev​() Get the immediate previous element sibling of each element in this list. Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query. Elements prevAll​() Get all of the previous element siblings of each element in this list. Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query. Elements remove​() Remove each matched element from the DOM. Elements removeAttr​(String attributeKey) Remove an attribute from every matched element. Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present. Elements select​(String query) Find matching elements within this element list. Elements tagName​(String tagName) Update the tag name of each matched element. String text​() Get the combined text of all the matched elements. Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute. String toString​() Get the combined outer HTML of all matched elements. Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements. Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents. String val​() Get the form element's value of the first matched element. Elements val​(String value) Set the form element's value in each of the matched elements. Elements wrap​(String html) Wrap the supplied HTML around each matched elements. Methods inherited from class java.util.AbstractCollection containsAll Methods inherited from class java.util.AbstractList equals, hashCode Methods inherited from class java.util.ArrayList add, add, addAll, addAll, clear, contains, ensureCapacity, forEach, get, indexOf, isEmpty, iterator, lastIndexOf, listIterator, listIterator, remove, remove, removeAll, removeIf, removeRange, replaceAll, retainAll, set, size, sort, spliterator, subList, toArray, toArray, trimToSize Methods inherited from interface java.util.Collection parallelStream, stream Methods inherited from interface java.util.List containsAll, equals, hashCode, of, of, of, of, of, of, of, of, of, of, of, of Methods inherited from class java.lang.Object finalize, getClass, notify, notifyAll, wait, wait, wait Constructor Detail Elements public Elements​() Elements public Elements​(int initialCapacity) Elements public Elements​(Collection<Element> elements) Elements public Elements​(List<Element> elements) Elements public Elements​(Element... elements) Method Detail clone public Elements clone​() Creates a deep copy of these elements. Overrides: clone in class ArrayList<Element> Returns: a deep copy attr public String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute. Parameters: attributeKey - The attribute key. Returns: The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true), or if the no elements have the attribute, returns empty string. See Also: hasAttr(String) hasAttr public boolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined. Parameters: attributeKey - attribute key Returns: true if any of the elements have the attribute; false if none do. eachAttr public List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements. If an element does not have this attribute, no value is included in the result set for that element. Parameters: attributeKey - the attribute name to return values for. You can add the abs: prefix to the key to get absolute URLs from relative URLs, e.g.: doc.select("a").eachAttr("abs:href") . Returns: a list of each element's attribute value for the attribute attr public Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements. Parameters: attributeKey - attribute key attributeValue - attribute value Returns: this removeAttr public Elements removeAttr​(String attributeKey) Remove an attribute from every matched element. Parameters: attributeKey - The attribute to remove. Returns: this (for chaining) addClass public Elements addClass​(String className) Add the class name to every matched element's class attribute. Parameters: className - class name to add Returns: this removeClass public Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present. Parameters: className - class name to remove Returns: this toggleClass public Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute. Parameters: className - class name to add if missing, or remove if present, from every element. Returns: this hasClass public boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute. Parameters: className - class name to check for Returns: true if any do, false if none do val public String val​() Get the form element's value of the first matched element. Returns: The form element's value, or empty if not set. See Also: Element.val() val public Elements val​(String value) Set the form element's value in each of the matched elements. Parameters: value - The value to set into each matched element Returns: this (for chaining) text public String text​() Get the combined text of all the matched elements. Note that it is possible to get repeats if the matched elements contain both parent elements and their own children, as the Element.text() method returns the combined text of a parent and all its children. Returns: string of all text: unescaped and no HTML. See Also: Element.text(), eachText() hasText public boolean hasText​() Test if any matched Element has any text content, that is not just whitespace. Returns: true if any element has non-blank text content. See Also: Element.hasText() eachText public List<String> eachText​() Get the text content of each of the matched elements. If an element has no text, then it is not included in the result. Returns: A list of each matched element's text content. See Also: Element.text(), Element.hasText(), text() html public String html​() Get the combined inner HTML of all matched elements. Returns: string of all element's inner HTML. See Also: text(), outerHtml() outerHtml public String outerHtml​() Get the combined outer HTML of all matched elements. Returns: string of all element's outer HTML. See Also: text(), html() toString public String toString​() Get the combined outer HTML of all matched elements. Alias of outerHtml(). Overrides: toString in class AbstractCollection<Element> Returns: string of all element's outer HTML. See Also: text(), html() tagName public Elements tagName​(String tagName) Update the tag name of each matched element. For example, to change each <i> to a <em>, do doc.select("i").tagName("em"); Parameters: tagName - the new tag name Returns: this, for chaining See Also: Element.tagName(String) html public Elements html​(String html) Set the inner HTML of each matched element. Parameters: html - HTML to parse and set into each matched element. Returns: this, for chaining See Also: Element.html(String) prepend public Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML. Parameters: html - HTML to add inside each element, before the existing HTML Returns: this, for chaining See Also: Element.prepend(String) append public Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML. Parameters: html - HTML to add inside each element, after the existing HTML Returns: this, for chaining See Also: Element.append(String) before public Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML. Parameters: html - HTML to insert before each element Returns: this, for chaining See Also: Element.before(String) after public Elements after​(String html) Insert the supplied HTML after each matched element's outer HTML. Parameters: html - HTML to insert after each element Returns: this, for chaining See Also: Element.after(String) wrap public Elements wrap​(String html) Wrap the supplied HTML around each matched elements. For example, with HTML <p><b>This</b> is <b>Jsoup</b></p>, doc.select("b").wrap("<i></i>"); becomes <p><i><b>This</b></i> is <i><b>jsoup</b></i></p> Parameters: html - HTML to wrap around each element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this (for chaining) See Also: Element.wrap(java.lang.String) unwrap public Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents. This has the effect of dropping the elements but keeping their children. This is useful for e.g removing unwanted formatting elements but keeping their contents. E.g. with HTML: <div><font>One</font> <font><a href="/">Two</a></font></div> doc.select("font").unwrap(); HTML = <div>One <a href="/">Two</a></div> Returns: this (for chaining) See Also: Node.unwrap() empty public Elements empty​() Empty (remove all child nodes from) each matched element. This is similar to setting the inner HTML of each element to nothing. E.g. HTML: <div><p>Hello <b>there</b></p> <p>now</p></div> doc.select("p").empty(); HTML = <div><p></p> <p></p></div> Returns: this, for chaining See Also: Element.empty(), remove() remove public Elements remove​() Remove each matched element from the DOM. This is similar to setting the outer HTML of each element to nothing. E.g. HTML: <div><p>Hello</p> <p>there</p> <img /></div> doc.select("p").remove(); HTML = <div> <img /></div> Note that this method should not be used to clean user-submitted HTML; rather, use Cleaner to clean HTML. Returns: this, for chaining See Also: Element.empty(), empty() select public Elements select​(String query) Find matching elements within this element list. Parameters: query - A Selector query Returns: the filtered list of elements, or an empty list if none match. not public Elements not​(String query) Remove elements from this list that match the Selector query. E.g. HTML: <div class=logo>One</div> <div>Two</div> Elements divs = doc.select("div").not(".logo"); Result: divs: [<div>Two</div>] Parameters: query - the selector query whose results should be removed from these elements Returns: a new elements list that contains only the filtered results eq public Elements eq​(int index) Get the nth matched element as an Elements object. See also ArrayList.get(int) to retrieve an Element. Parameters: index - the (zero-based) index of the element in the list to retain Returns: Elements containing only the specified element, or, if that element did not exist, an empty list. is public boolean is​(String query) Test if any of the matched elements match the supplied query. Parameters: query - A selector Returns: true if at least one element in the list matches the query. next public Elements next​() Get the immediate next element sibling of each element in this list. Returns: next element siblings. next public Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: next element siblings. nextAll public Elements nextAll​() Get all of the following element siblings of each element in this list. Returns: all following element siblings. nextAll public Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: all following element siblings. prev public Elements prev​() Get the immediate previous element sibling of each element in this list. Returns: previous element siblings. prev public Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: previous element siblings. prevAll public Elements prevAll​() Get all of the previous element siblings of each element in this list. Returns: all previous element siblings. prevAll public Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: all previous element siblings. parents public Elements parents​() Get all of the parents and ancestor elements of the matched elements. Returns: all of the parents and ancestor elements of the matched elements first public Element first​() Get the first matched element. Returns: The first matched element, or null if contents is empty. last public Element last​() Get the last matched element. Returns: The last matched element, or null if contents is empty. traverse public Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements. Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this, for chaining filter public Elements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements. Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this, for chaining forms public List<FormElement> forms​() Get the FormElement forms from the selected elements, if any. Returns: a list of FormElements pulled from the matched elements. The list will be empty if the elements contain no forms. Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | Method Copyright © 2009–2017 Jonathan Hedley. All rights reserved.<div> JavaScript is disabled on your browser. </div>Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSkip navigation links Overview Package Class Use Tree Deprecated Index HelpSkip navigation linksSkip navigation linksOverview Package Class Use Tree Deprecated Index HelpOverviewOverviewPackagePackageClassUseUseTreeTreeDeprecatedDeprecatedIndexIndexHelpHelpPrev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodPrev Class Next ClassPrev ClassPrev ClassPrev ClassNext ClassNext ClassNext ClassFrames No FramesFramesFramesNo FramesNo FramesAll ClassesAll ClassesAll ClassesSEARCH:SEARCH:SEARCH:<div> JavaScript is disabled on your browser. </div><div> JavaScript is disabled on your browser. </div>Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSummary: Nested | Field | Constr | MethodSummary:Nested |Field |FieldConstr |ConstrMethodMethodDetail: Field | Constr | MethodDetail:Field |Constr |ConstrMethodMethodPackage org.jsoup.select Class ElementsPackage org.jsoup.selectPackageorg.jsoup.selectClass Elementsjava.lang.Object java.util.AbstractCollection<E> java.util.AbstractList<E> java.util.ArrayList<Element> org.jsoup.select.Elements All Implemented Interfaces: Serializable, Cloneable, Iterable<Element>, Collection<Element>, List<Element>, RandomAccess public class Elements extends ArrayList<Element> A list of Elements, with methods that act on every element in the list. To get an Elements object, use the Element.select(String) method. Author: Jonathan Hedley, jonathan@hedley.net See Also: Serialized Form Field Summary Fields inherited from class java.util.AbstractList modCount Constructor Summary Constructors Constructor Description Elements​() Elements​(int initialCapacity) Elements​(Collection<Element> elements) Elements​(List<Element> elements) Elements​(Element... elements) Method Summary All Methods Instance Methods Concrete Methods Modifier and Type Method Description Elements addClass​(String className) Add the class name to every matched element's class attribute. Elements after​(String html) Insert the supplied HTML after each matched element's outer HTML. Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML. String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute. Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements. Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML. Elements clone​() Creates a deep copy of these elements. List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements. List<String> eachText​() Get the text content of each of the matched elements. Elements empty​() Empty (remove all child nodes from) each matched element. Elements eq​(int index) Get the nth matched element as an Elements object. Elements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements. Element first​() Get the first matched element. List<FormElement> forms​() Get the FormElement forms from the selected elements, if any. boolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined. boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute. boolean hasText​() Test if any matched Element has any text content, that is not just whitespace. String html​() Get the combined inner HTML of all matched elements. Elements html​(String html) Set the inner HTML of each matched element. boolean is​(String query) Test if any of the matched elements match the supplied query. Element last​() Get the last matched element. Elements next​() Get the immediate next element sibling of each element in this list. Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query. Elements nextAll​() Get all of the following element siblings of each element in this list. Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query. Elements not​(String query) Remove elements from this list that match the Selector query. String outerHtml​() Get the combined outer HTML of all matched elements. Elements parents​() Get all of the parents and ancestor elements of the matched elements. Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML. Elements prev​() Get the immediate previous element sibling of each element in this list. Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query. Elements prevAll​() Get all of the previous element siblings of each element in this list. Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query. Elements remove​() Remove each matched element from the DOM. Elements removeAttr​(String attributeKey) Remove an attribute from every matched element. Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present. Elements select​(String query) Find matching elements within this element list. Elements tagName​(String tagName) Update the tag name of each matched element. String text​() Get the combined text of all the matched elements. Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute. String toString​() Get the combined outer HTML of all matched elements. Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements. Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents. String val​() Get the form element's value of the first matched element. Elements val​(String value) Set the form element's value in each of the matched elements. Elements wrap​(String html) Wrap the supplied HTML around each matched elements. Methods inherited from class java.util.AbstractCollection containsAll Methods inherited from class java.util.AbstractList equals, hashCode Methods inherited from class java.util.ArrayList add, add, addAll, addAll, clear, contains, ensureCapacity, forEach, get, indexOf, isEmpty, iterator, lastIndexOf, listIterator, listIterator, remove, remove, removeAll, removeIf, removeRange, replaceAll, retainAll, set, size, sort, spliterator, subList, toArray, toArray, trimToSize Methods inherited from interface java.util.Collection parallelStream, stream Methods inherited from interface java.util.List containsAll, equals, hashCode, of, of, of, of, of, of, of, of, of, of, of, of Methods inherited from class java.lang.Object finalize, getClass, notify, notifyAll, wait, wait, wait Constructor Detail Elements public Elements​() Elements public Elements​(int initialCapacity) Elements public Elements​(Collection<Element> elements) Elements public Elements​(List<Element> elements) Elements public Elements​(Element... elements) Method Detail clone public Elements clone​() Creates a deep copy of these elements. Overrides: clone in class ArrayList<Element> Returns: a deep copy attr public String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute. Parameters: attributeKey - The attribute key. Returns: The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true), or if the no elements have the attribute, returns empty string. See Also: hasAttr(String) hasAttr public boolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined. Parameters: attributeKey - attribute key Returns: true if any of the elements have the attribute; false if none do. eachAttr public List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements. If an element does not have this attribute, no value is included in the result set for that element. Parameters: attributeKey - the attribute name to return values for. You can add the abs: prefix to the key to get absolute URLs from relative URLs, e.g.: doc.select("a").eachAttr("abs:href") . Returns: a list of each element's attribute value for the attribute attr public Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements. Parameters: attributeKey - attribute key attributeValue - attribute value Returns: this removeAttr public Elements removeAttr​(String attributeKey) Remove an attribute from every matched element. Parameters: attributeKey - The attribute to remove. Returns: this (for chaining) addClass public Elements addClass​(String className) Add the class name to every matched element's class attribute. Parameters: className - class name to add Returns: this removeClass public Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present. Parameters: className - class name to remove Returns: this toggleClass public Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute. Parameters: className - class name to add if missing, or remove if present, from every element. Returns: this hasClass public boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute. Parameters: className - class name to check for Returns: true if any do, false if none do val public String val​() Get the form element's value of the first matched element. Returns: The form element's value, or empty if not set. See Also: Element.val() val public Elements val​(String value) Set the form element's value in each of the matched elements. Parameters: value - The value to set into each matched element Returns: this (for chaining) text public String text​() Get the combined text of all the matched elements. Note that it is possible to get repeats if the matched elements contain both parent elements and their own children, as the Element.text() method returns the combined text of a parent and all its children. Returns: string of all text: unescaped and no HTML. See Also: Element.text(), eachText() hasText public boolean hasText​() Test if any matched Element has any text content, that is not just whitespace. Returns: true if any element has non-blank text content. See Also: Element.hasText() eachText public List<String> eachText​() Get the text content of each of the matched elements. If an element has no text, then it is not included in the result. Returns: A list of each matched element's text content. See Also: Element.text(), Element.hasText(), text() html public String html​() Get the combined inner HTML of all matched elements. Returns: string of all element's inner HTML. See Also: text(), outerHtml() outerHtml public String outerHtml​() Get the combined outer HTML of all matched elements. Returns: string of all element's outer HTML. See Also: text(), html() toString public String toString​() Get the combined outer HTML of all matched elements. Alias of outerHtml(). Overrides: toString in class AbstractCollection<Element> Returns: string of all element's outer HTML. See Also: text(), html() tagName public Elements tagName​(String tagName) Update the tag name of each matched element. For example, to change each <i> to a <em>, do doc.select("i").tagName("em"); Parameters: tagName - the new tag name Returns: this, for chaining See Also: Element.tagName(String) html public Elements html​(String html) Set the inner HTML of each matched element. Parameters: html - HTML to parse and set into each matched element. Returns: this, for chaining See Also: Element.html(String) prepend public Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML. Parameters: html - HTML to add inside each element, before the existing HTML Returns: this, for chaining See Also: Element.prepend(String) append public Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML. Parameters: html - HTML to add inside each element, after the existing HTML Returns: this, for chaining See Also: Element.append(String) before public Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML. Parameters: html - HTML to insert before each element Returns: this, for chaining See Also: Element.before(String) after public Elements after​(String html) Insert the supplied HTML after each matched element's outer HTML. Parameters: html - HTML to insert after each element Returns: this, for chaining See Also: Element.after(String) wrap public Elements wrap​(String html) Wrap the supplied HTML around each matched elements. For example, with HTML <p><b>This</b> is <b>Jsoup</b></p>, doc.select("b").wrap("<i></i>"); becomes <p><i><b>This</b></i> is <i><b>jsoup</b></i></p> Parameters: html - HTML to wrap around each element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this (for chaining) See Also: Element.wrap(java.lang.String) unwrap public Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents. This has the effect of dropping the elements but keeping their children. This is useful for e.g removing unwanted formatting elements but keeping their contents. E.g. with HTML: <div><font>One</font> <font><a href="/">Two</a></font></div> doc.select("font").unwrap(); HTML = <div>One <a href="/">Two</a></div> Returns: this (for chaining) See Also: Node.unwrap() empty public Elements empty​() Empty (remove all child nodes from) each matched element. This is similar to setting the inner HTML of each element to nothing. E.g. HTML: <div><p>Hello <b>there</b></p> <p>now</p></div> doc.select("p").empty(); HTML = <div><p></p> <p></p></div> Returns: this, for chaining See Also: Element.empty(), remove() remove public Elements remove​() Remove each matched element from the DOM. This is similar to setting the outer HTML of each element to nothing. E.g. HTML: <div><p>Hello</p> <p>there</p> <img /></div> doc.select("p").remove(); HTML = <div> <img /></div> Note that this method should not be used to clean user-submitted HTML; rather, use Cleaner to clean HTML. Returns: this, for chaining See Also: Element.empty(), empty() select public Elements select​(String query) Find matching elements within this element list. Parameters: query - A Selector query Returns: the filtered list of elements, or an empty list if none match. not public Elements not​(String query) Remove elements from this list that match the Selector query. E.g. HTML: <div class=logo>One</div> <div>Two</div> Elements divs = doc.select("div").not(".logo"); Result: divs: [<div>Two</div>] Parameters: query - the selector query whose results should be removed from these elements Returns: a new elements list that contains only the filtered results eq public Elements eq​(int index) Get the nth matched element as an Elements object. See also ArrayList.get(int) to retrieve an Element. Parameters: index - the (zero-based) index of the element in the list to retain Returns: Elements containing only the specified element, or, if that element did not exist, an empty list. is public boolean is​(String query) Test if any of the matched elements match the supplied query. Parameters: query - A selector Returns: true if at least one element in the list matches the query. next public Elements next​() Get the immediate next element sibling of each element in this list. Returns: next element siblings. next public Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: next element siblings. nextAll public Elements nextAll​() Get all of the following element siblings of each element in this list. Returns: all following element siblings. nextAll public Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: all following element siblings. prev public Elements prev​() Get the immediate previous element sibling of each element in this list. Returns: previous element siblings. prev public Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: previous element siblings. prevAll public Elements prevAll​() Get all of the previous element siblings of each element in this list. Returns: all previous element siblings. prevAll public Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: all previous element siblings. parents public Elements parents​() Get all of the parents and ancestor elements of the matched elements. Returns: all of the parents and ancestor elements of the matched elements first public Element first​() Get the first matched element. Returns: The first matched element, or null if contents is empty. last public Element last​() Get the last matched element. Returns: The last matched element, or null if contents is empty. traverse public Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements. Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this, for chaining filter public Elements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements. Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this, for chaining forms public List<FormElement> forms​() Get the FormElement forms from the selected elements, if any. Returns: a list of FormElements pulled from the matched elements. The list will be empty if the elements contain no forms.java.lang.Object java.util.AbstractCollection<E> java.util.AbstractList<E> java.util.ArrayList<Element> org.jsoup.select.Elementsjava.lang.Objectjava.lang.Objectjava.util.AbstractCollection<E> java.util.AbstractList<E> java.util.ArrayList<Element> org.jsoup.select.Elementsjava.util.AbstractCollection<E> java.util.AbstractList<E> java.util.ArrayList<Element> org.jsoup.select.Elementsjava.util.AbstractCollection<E>java.util.AbstractCollectionjava.util.AbstractList<E> java.util.ArrayList<Element> org.jsoup.select.Elementsjava.util.AbstractList<E> java.util.ArrayList<Element> org.jsoup.select.Elementsjava.util.AbstractList<E>java.util.AbstractListjava.util.ArrayList<Element> org.jsoup.select.Elementsjava.util.ArrayList<Element> org.jsoup.select.Elementsjava.util.ArrayList<Element>java.util.ArrayListElementorg.jsoup.select.Elementsorg.jsoup.select.Elementsorg.jsoup.select.ElementsAll Implemented Interfaces: Serializable, Cloneable, Iterable<Element>, Collection<Element>, List<Element>, RandomAccess public class Elements extends ArrayList<Element> A list of Elements, with methods that act on every element in the list. To get an Elements object, use the Element.select(String) method. Author: Jonathan Hedley, jonathan@hedley.net See Also: Serialized FormAll Implemented Interfaces: Serializable, Cloneable, Iterable<Element>, Collection<Element>, List<Element>, RandomAccess public class Elements extends ArrayList<Element> A list of Elements, with methods that act on every element in the list. To get an Elements object, use the Element.select(String) method. Author: Jonathan Hedley, jonathan@hedley.net See Also: Serialized FormAll Implemented Interfaces: Serializable, Cloneable, Iterable<Element>, Collection<Element>, List<Element>, RandomAccess public class Elements extends ArrayList<Element> A list of Elements, with methods that act on every element in the list. To get an Elements object, use the Element.select(String) method. Author: Jonathan Hedley, jonathan@hedley.net See Also: Serialized FormAll Implemented Interfaces: Serializable, Cloneable, Iterable<Element>, Collection<Element>, List<Element>, RandomAccessAll Implemented Interfaces:Serializable, Cloneable, Iterable<Element>, Collection<Element>, List<Element>, RandomAccessSerializableSerializableCloneableCloneableIterable<Element>IterableElementCollection<Element>CollectionElementList<Element>ListElementRandomAccessRandomAccesspublic class Elements extends ArrayList<Element>ElementsArrayListElementA list of Elements, with methods that act on every element in the list. To get an Elements object, use the Element.select(String) method.ElementElementTo get an Elements object, use the Element.select(String) method.ElementsElement.select(String)Element.select(String)Author: Jonathan Hedley, jonathan@hedley.net See Also: Serialized FormAuthor:Author:Jonathan Hedley, jonathan@hedley.netSee Also:See Also:Serialized FormSerialized FormField Summary Fields inherited from class java.util.AbstractList modCount Constructor Summary Constructors Constructor Description Elements​() Elements​(int initialCapacity) Elements​(Collection<Element> elements) Elements​(List<Element> elements) Elements​(Element... elements) Method Summary All Methods Instance Methods Concrete Methods Modifier and Type Method Description Elements addClass​(String className) Add the class name to every matched element's class attribute. Elements after​(String html) Insert the supplied HTML after each matched element's outer HTML. Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML. String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute. Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements. Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML. Elements clone​() Creates a deep copy of these elements. List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements. List<String> eachText​() Get the text content of each of the matched elements. Elements empty​() Empty (remove all child nodes from) each matched element. Elements eq​(int index) Get the nth matched element as an Elements object. Elements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements. Element first​() Get the first matched element. List<FormElement> forms​() Get the FormElement forms from the selected elements, if any. boolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined. boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute. boolean hasText​() Test if any matched Element has any text content, that is not just whitespace. String html​() Get the combined inner HTML of all matched elements. Elements html​(String html) Set the inner HTML of each matched element. boolean is​(String query) Test if any of the matched elements match the supplied query. Element last​() Get the last matched element. Elements next​() Get the immediate next element sibling of each element in this list. Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query. Elements nextAll​() Get all of the following element siblings of each element in this list. Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query. Elements not​(String query) Remove elements from this list that match the Selector query. String outerHtml​() Get the combined outer HTML of all matched elements. Elements parents​() Get all of the parents and ancestor elements of the matched elements. Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML. Elements prev​() Get the immediate previous element sibling of each element in this list. Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query. Elements prevAll​() Get all of the previous element siblings of each element in this list. Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query. Elements remove​() Remove each matched element from the DOM. Elements removeAttr​(String attributeKey) Remove an attribute from every matched element. Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present. Elements select​(String query) Find matching elements within this element list. Elements tagName​(String tagName) Update the tag name of each matched element. String text​() Get the combined text of all the matched elements. Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute. String toString​() Get the combined outer HTML of all matched elements. Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements. Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents. String val​() Get the form element's value of the first matched element. Elements val​(String value) Set the form element's value in each of the matched elements. Elements wrap​(String html) Wrap the supplied HTML around each matched elements. Methods inherited from class java.util.AbstractCollection containsAll Methods inherited from class java.util.AbstractList equals, hashCode Methods inherited from class java.util.ArrayList add, add, addAll, addAll, clear, contains, ensureCapacity, forEach, get, indexOf, isEmpty, iterator, lastIndexOf, listIterator, listIterator, remove, remove, removeAll, removeIf, removeRange, replaceAll, retainAll, set, size, sort, spliterator, subList, toArray, toArray, trimToSize Methods inherited from interface java.util.Collection parallelStream, stream Methods inherited from interface java.util.List containsAll, equals, hashCode, of, of, of, of, of, of, of, of, of, of, of, of Methods inherited from class java.lang.Object finalize, getClass, notify, notifyAll, wait, wait, waitField Summary Fields inherited from class java.util.AbstractList modCount Constructor Summary Constructors Constructor Description Elements​() Elements​(int initialCapacity) Elements​(Collection<Element> elements) Elements​(List<Element> elements) Elements​(Element... elements) Method Summary All Methods Instance Methods Concrete Methods Modifier and Type Method Description Elements addClass​(String className) Add the class name to every matched element's class attribute. Elements after​(String html) Insert the supplied HTML after each matched element's outer HTML. Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML. String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute. Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements. Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML. Elements clone​() Creates a deep copy of these elements. List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements. List<String> eachText​() Get the text content of each of the matched elements. Elements empty​() Empty (remove all child nodes from) each matched element. Elements eq​(int index) Get the nth matched element as an Elements object. Elements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements. Element first​() Get the first matched element. List<FormElement> forms​() Get the FormElement forms from the selected elements, if any. boolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined. boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute. boolean hasText​() Test if any matched Element has any text content, that is not just whitespace. String html​() Get the combined inner HTML of all matched elements. Elements html​(String html) Set the inner HTML of each matched element. boolean is​(String query) Test if any of the matched elements match the supplied query. Element last​() Get the last matched element. Elements next​() Get the immediate next element sibling of each element in this list. Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query. Elements nextAll​() Get all of the following element siblings of each element in this list. Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query. Elements not​(String query) Remove elements from this list that match the Selector query. String outerHtml​() Get the combined outer HTML of all matched elements. Elements parents​() Get all of the parents and ancestor elements of the matched elements. Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML. Elements prev​() Get the immediate previous element sibling of each element in this list. Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query. Elements prevAll​() Get all of the previous element siblings of each element in this list. Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query. Elements remove​() Remove each matched element from the DOM. Elements removeAttr​(String attributeKey) Remove an attribute from every matched element. Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present. Elements select​(String query) Find matching elements within this element list. Elements tagName​(String tagName) Update the tag name of each matched element. String text​() Get the combined text of all the matched elements. Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute. String toString​() Get the combined outer HTML of all matched elements. Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements. Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents. String val​() Get the form element's value of the first matched element. Elements val​(String value) Set the form element's value in each of the matched elements. Elements wrap​(String html) Wrap the supplied HTML around each matched elements. Methods inherited from class java.util.AbstractCollection containsAll Methods inherited from class java.util.AbstractList equals, hashCode Methods inherited from class java.util.ArrayList add, add, addAll, addAll, clear, contains, ensureCapacity, forEach, get, indexOf, isEmpty, iterator, lastIndexOf, listIterator, listIterator, remove, remove, removeAll, removeIf, removeRange, replaceAll, retainAll, set, size, sort, spliterator, subList, toArray, toArray, trimToSize Methods inherited from interface java.util.Collection parallelStream, stream Methods inherited from interface java.util.List containsAll, equals, hashCode, of, of, of, of, of, of, of, of, of, of, of, of Methods inherited from class java.lang.Object finalize, getClass, notify, notifyAll, wait, wait, waitField Summary Fields inherited from class java.util.AbstractList modCount Constructor Summary Constructors Constructor Description Elements​() Elements​(int initialCapacity) Elements​(Collection<Element> elements) Elements​(List<Element> elements) Elements​(Element... elements) Method Summary All Methods Instance Methods Concrete Methods Modifier and Type Method Description Elements addClass​(String className) Add the class name to every matched element's class attribute. Elements after​(String html) Insert the supplied HTML after each matched element's outer HTML. Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML. String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute. Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements. Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML. Elements clone​() Creates a deep copy of these elements. List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements. List<String> eachText​() Get the text content of each of the matched elements. Elements empty​() Empty (remove all child nodes from) each matched element. Elements eq​(int index) Get the nth matched element as an Elements object. Elements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements. Element first​() Get the first matched element. List<FormElement> forms​() Get the FormElement forms from the selected elements, if any. boolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined. boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute. boolean hasText​() Test if any matched Element has any text content, that is not just whitespace. String html​() Get the combined inner HTML of all matched elements. Elements html​(String html) Set the inner HTML of each matched element. boolean is​(String query) Test if any of the matched elements match the supplied query. Element last​() Get the last matched element. Elements next​() Get the immediate next element sibling of each element in this list. Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query. Elements nextAll​() Get all of the following element siblings of each element in this list. Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query. Elements not​(String query) Remove elements from this list that match the Selector query. String outerHtml​() Get the combined outer HTML of all matched elements. Elements parents​() Get all of the parents and ancestor elements of the matched elements. Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML. Elements prev​() Get the immediate previous element sibling of each element in this list. Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query. Elements prevAll​() Get all of the previous element siblings of each element in this list. Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query. Elements remove​() Remove each matched element from the DOM. Elements removeAttr​(String attributeKey) Remove an attribute from every matched element. Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present. Elements select​(String query) Find matching elements within this element list. Elements tagName​(String tagName) Update the tag name of each matched element. String text​() Get the combined text of all the matched elements. Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute. String toString​() Get the combined outer HTML of all matched elements. Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements. Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents. String val​() Get the form element's value of the first matched element. Elements val​(String value) Set the form element's value in each of the matched elements. Elements wrap​(String html) Wrap the supplied HTML around each matched elements. Methods inherited from class java.util.AbstractCollection containsAll Methods inherited from class java.util.AbstractList equals, hashCode Methods inherited from class java.util.ArrayList add, add, addAll, addAll, clear, contains, ensureCapacity, forEach, get, indexOf, isEmpty, iterator, lastIndexOf, listIterator, listIterator, remove, remove, removeAll, removeIf, removeRange, replaceAll, retainAll, set, size, sort, spliterator, subList, toArray, toArray, trimToSize Methods inherited from interface java.util.Collection parallelStream, stream Methods inherited from interface java.util.List containsAll, equals, hashCode, of, of, of, of, of, of, of, of, of, of, of, of Methods inherited from class java.lang.Object finalize, getClass, notify, notifyAll, wait, wait, waitField Summary Fields inherited from class java.util.AbstractList modCountField Summary Fields inherited from class java.util.AbstractList modCountField SummaryFields inherited from class java.util.AbstractList modCountFields inherited from class java.util.AbstractList modCountFields inherited from class java.util.AbstractListAbstractListmodCountmodCountConstructor Summary Constructors Constructor Description Elements​() Elements​(int initialCapacity) Elements​(Collection<Element> elements) Elements​(List<Element> elements) Elements​(Element... elements)Constructor Summary Constructors Constructor Description Elements​() Elements​(int initialCapacity) Elements​(Collection<Element> elements) Elements​(List<Element> elements) Elements​(Element... elements)Constructor SummaryConstructors Constructor Description Elements​() Elements​(int initialCapacity) Elements​(Collection<Element> elements) Elements​(List<Element> elements) Elements​(Element... elements)ConstructorsConstructorsConstructor Description Elements​() Elements​(int initialCapacity) Elements​(Collection<Element> elements) Elements​(List<Element> elements) Elements​(Element... elements)Constructor DescriptionConstructorDescriptionElements​()Elements​()Elements​()ElementsElementsElements​(int initialCapacity)Elements​(int initialCapacity)Elements​(int initialCapacity)ElementsElementsElements​(Collection<Element> elements)Elements​(Collection<Element> elements)Elements​(Collection<Element> elements)ElementsElementsCollectionElementElements​(List<Element> elements)Elements​(List<Element> elements)Elements​(List<Element> elements)ElementsElementsListElementElements​(Element... elements)Elements​(Element... elements)Elements​(Element... elements)ElementsElementsElementMethod Summary All Methods Instance Methods Concrete Methods Modifier and Type Method Description Elements addClass​(String className) Add the class name to every matched element's class attribute. Elements after​(String html) Insert the supplied HTML after each matched element's outer HTML. Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML. String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute. Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements. Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML. Elements clone​() Creates a deep copy of these elements. List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements. List<String> eachText​() Get the text content of each of the matched elements. Elements empty​() Empty (remove all child nodes from) each matched element. Elements eq​(int index) Get the nth matched element as an Elements object. Elements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements. Element first​() Get the first matched element. List<FormElement> forms​() Get the FormElement forms from the selected elements, if any. boolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined. boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute. boolean hasText​() Test if any matched Element has any text content, that is not just whitespace. String html​() Get the combined inner HTML of all matched elements. Elements html​(String html) Set the inner HTML of each matched element. boolean is​(String query) Test if any of the matched elements match the supplied query. Element last​() Get the last matched element. Elements next​() Get the immediate next element sibling of each element in this list. Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query. Elements nextAll​() Get all of the following element siblings of each element in this list. Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query. Elements not​(String query) Remove elements from this list that match the Selector query. String outerHtml​() Get the combined outer HTML of all matched elements. Elements parents​() Get all of the parents and ancestor elements of the matched elements. Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML. Elements prev​() Get the immediate previous element sibling of each element in this list. Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query. Elements prevAll​() Get all of the previous element siblings of each element in this list. Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query. Elements remove​() Remove each matched element from the DOM. Elements removeAttr​(String attributeKey) Remove an attribute from every matched element. Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present. Elements select​(String query) Find matching elements within this element list. Elements tagName​(String tagName) Update the tag name of each matched element. String text​() Get the combined text of all the matched elements. Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute. String toString​() Get the combined outer HTML of all matched elements. Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements. Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents. String val​() Get the form element's value of the first matched element. Elements val​(String value) Set the form element's value in each of the matched elements. Elements wrap​(String html) Wrap the supplied HTML around each matched elements. Methods inherited from class java.util.AbstractCollection containsAll Methods inherited from class java.util.AbstractList equals, hashCode Methods inherited from class java.util.ArrayList add, add, addAll, addAll, clear, contains, ensureCapacity, forEach, get, indexOf, isEmpty, iterator, lastIndexOf, listIterator, listIterator, remove, remove, removeAll, removeIf, removeRange, replaceAll, retainAll, set, size, sort, spliterator, subList, toArray, toArray, trimToSize Methods inherited from interface java.util.Collection parallelStream, stream Methods inherited from interface java.util.List containsAll, equals, hashCode, of, of, of, of, of, of, of, of, of, of, of, of Methods inherited from class java.lang.Object finalize, getClass, notify, notifyAll, wait, wait, waitMethod Summary All Methods Instance Methods Concrete Methods Modifier and Type Method Description Elements addClass​(String className) Add the class name to every matched element's class attribute. Elements after​(String html) Insert the supplied HTML after each matched element's outer HTML. Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML. String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute. Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements. Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML. Elements clone​() Creates a deep copy of these elements. List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements. List<String> eachText​() Get the text content of each of the matched elements. Elements empty​() Empty (remove all child nodes from) each matched element. Elements eq​(int index) Get the nth matched element as an Elements object. Elements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements. Element first​() Get the first matched element. List<FormElement> forms​() Get the FormElement forms from the selected elements, if any. boolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined. boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute. boolean hasText​() Test if any matched Element has any text content, that is not just whitespace. String html​() Get the combined inner HTML of all matched elements. Elements html​(String html) Set the inner HTML of each matched element. boolean is​(String query) Test if any of the matched elements match the supplied query. Element last​() Get the last matched element. Elements next​() Get the immediate next element sibling of each element in this list. Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query. Elements nextAll​() Get all of the following element siblings of each element in this list. Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query. Elements not​(String query) Remove elements from this list that match the Selector query. String outerHtml​() Get the combined outer HTML of all matched elements. Elements parents​() Get all of the parents and ancestor elements of the matched elements. Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML. Elements prev​() Get the immediate previous element sibling of each element in this list. Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query. Elements prevAll​() Get all of the previous element siblings of each element in this list. Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query. Elements remove​() Remove each matched element from the DOM. Elements removeAttr​(String attributeKey) Remove an attribute from every matched element. Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present. Elements select​(String query) Find matching elements within this element list. Elements tagName​(String tagName) Update the tag name of each matched element. String text​() Get the combined text of all the matched elements. Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute. String toString​() Get the combined outer HTML of all matched elements. Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements. Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents. String val​() Get the form element's value of the first matched element. Elements val​(String value) Set the form element's value in each of the matched elements. Elements wrap​(String html) Wrap the supplied HTML around each matched elements. Methods inherited from class java.util.AbstractCollection containsAll Methods inherited from class java.util.AbstractList equals, hashCode Methods inherited from class java.util.ArrayList add, add, addAll, addAll, clear, contains, ensureCapacity, forEach, get, indexOf, isEmpty, iterator, lastIndexOf, listIterator, listIterator, remove, remove, removeAll, removeIf, removeRange, replaceAll, retainAll, set, size, sort, spliterator, subList, toArray, toArray, trimToSize Methods inherited from interface java.util.Collection parallelStream, stream Methods inherited from interface java.util.List containsAll, equals, hashCode, of, of, of, of, of, of, of, of, of, of, of, of Methods inherited from class java.lang.Object finalize, getClass, notify, notifyAll, wait, wait, waitMethod SummaryAll Methods Instance Methods Concrete Methods Modifier and Type Method Description Elements addClass​(String className) Add the class name to every matched element's class attribute. Elements after​(String html) Insert the supplied HTML after each matched element's outer HTML. Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML. String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute. Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements. Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML. Elements clone​() Creates a deep copy of these elements. List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements. List<String> eachText​() Get the text content of each of the matched elements. Elements empty​() Empty (remove all child nodes from) each matched element. Elements eq​(int index) Get the nth matched element as an Elements object. Elements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements. Element first​() Get the first matched element. List<FormElement> forms​() Get the FormElement forms from the selected elements, if any. boolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined. boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute. boolean hasText​() Test if any matched Element has any text content, that is not just whitespace. String html​() Get the combined inner HTML of all matched elements. Elements html​(String html) Set the inner HTML of each matched element. boolean is​(String query) Test if any of the matched elements match the supplied query. Element last​() Get the last matched element. Elements next​() Get the immediate next element sibling of each element in this list. Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query. Elements nextAll​() Get all of the following element siblings of each element in this list. Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query. Elements not​(String query) Remove elements from this list that match the Selector query. String outerHtml​() Get the combined outer HTML of all matched elements. Elements parents​() Get all of the parents and ancestor elements of the matched elements. Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML. Elements prev​() Get the immediate previous element sibling of each element in this list. Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query. Elements prevAll​() Get all of the previous element siblings of each element in this list. Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query. Elements remove​() Remove each matched element from the DOM. Elements removeAttr​(String attributeKey) Remove an attribute from every matched element. Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present. Elements select​(String query) Find matching elements within this element list. Elements tagName​(String tagName) Update the tag name of each matched element. String text​() Get the combined text of all the matched elements. Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute. String toString​() Get the combined outer HTML of all matched elements. Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements. Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents. String val​() Get the form element's value of the first matched element. Elements val​(String value) Set the form element's value in each of the matched elements. Elements wrap​(String html) Wrap the supplied HTML around each matched elements.All Methods Instance Methods Concrete MethodsAll MethodsAll MethodsInstance MethodsInstance MethodsInstance MethodsConcrete MethodsConcrete MethodsConcrete MethodsModifier and Type Method Description Elements addClass​(String className) Add the class name to every matched element's class attribute. Elements after​(String html) Insert the supplied HTML after each matched element's outer HTML. Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML. String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute. Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements. Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML. Elements clone​() Creates a deep copy of these elements. List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements. List<String> eachText​() Get the text content of each of the matched elements. Elements empty​() Empty (remove all child nodes from) each matched element. Elements eq​(int index) Get the nth matched element as an Elements object. Elements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements. Element first​() Get the first matched element. List<FormElement> forms​() Get the FormElement forms from the selected elements, if any. boolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined. boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute. boolean hasText​() Test if any matched Element has any text content, that is not just whitespace. String html​() Get the combined inner HTML of all matched elements. Elements html​(String html) Set the inner HTML of each matched element. boolean is​(String query) Test if any of the matched elements match the supplied query. Element last​() Get the last matched element. Elements next​() Get the immediate next element sibling of each element in this list. Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query. Elements nextAll​() Get all of the following element siblings of each element in this list. Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query. Elements not​(String query) Remove elements from this list that match the Selector query. String outerHtml​() Get the combined outer HTML of all matched elements. Elements parents​() Get all of the parents and ancestor elements of the matched elements. Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML. Elements prev​() Get the immediate previous element sibling of each element in this list. Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query. Elements prevAll​() Get all of the previous element siblings of each element in this list. Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query. Elements remove​() Remove each matched element from the DOM. Elements removeAttr​(String attributeKey) Remove an attribute from every matched element. Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present. Elements select​(String query) Find matching elements within this element list. Elements tagName​(String tagName) Update the tag name of each matched element. String text​() Get the combined text of all the matched elements. Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute. String toString​() Get the combined outer HTML of all matched elements. Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements. Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents. String val​() Get the form element's value of the first matched element. Elements val​(String value) Set the form element's value in each of the matched elements. Elements wrap​(String html) Wrap the supplied HTML around each matched elements.Modifier and Type Method DescriptionModifier and TypeMethodDescriptionElements addClass​(String className) Add the class name to every matched element's class attribute.ElementsElementsElementsaddClass​(String className)addClass​(String className)addClassaddClassStringAdd the class name to every matched element's class attribute.Add the class name to every matched element's class attribute.classElements after​(String html) Insert the supplied HTML after each matched element's outer HTML.ElementsElementsElementsafter​(String html)after​(String html)afterafterStringInsert the supplied HTML after each matched element's outer HTML.Insert the supplied HTML after each matched element's outer HTML.Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML.ElementsElementsElementsappend​(String html)append​(String html)appendappendStringAdd the supplied HTML to the end of each matched element's inner HTML.Add the supplied HTML to the end of each matched element's inner HTML.String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute.StringStringStringattr​(String attributeKey)attr​(String attributeKey)attrattrStringGet an attribute value from the first matched element that has the attribute.Get an attribute value from the first matched element that has the attribute.Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements.ElementsElementsElementsattr​(String attributeKey, String attributeValue)attr​(String attributeKey, String attributeValue)attrattrStringStringSet an attribute on all matched elements.Set an attribute on all matched elements.Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML.ElementsElementsElementsbefore​(String html)before​(String html)beforebeforeStringInsert the supplied HTML before each matched element's outer HTML.Insert the supplied HTML before each matched element's outer HTML.Elements clone​() Creates a deep copy of these elements.ElementsElementsElementsclone​()clone​()clonecloneCreates a deep copy of these elements.Creates a deep copy of these elements.List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements.List<String>List<String>ListStringeachAttr​(String attributeKey)eachAttr​(String attributeKey)eachAttreachAttrStringGet the attribute value for each of the matched elements.Get the attribute value for each of the matched elements.List<String> eachText​() Get the text content of each of the matched elements.List<String>List<String>ListStringeachText​()eachText​()eachTexteachTextGet the text content of each of the matched elements.Get the text content of each of the matched elements.Elements empty​() Empty (remove all child nodes from) each matched element.ElementsElementsElementsempty​()empty​()emptyemptyEmpty (remove all child nodes from) each matched element.Empty (remove all child nodes from) each matched element.Elements eq​(int index) Get the nth matched element as an Elements object.ElementsElementsElementseq​(int index)eq​(int index)eqeqGet the nth matched element as an Elements object.Get the nth matched element as an Elements object.nthElements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements.ElementsElementsElementsfilter​(NodeFilter nodeFilter)filter​(NodeFilter nodeFilter)filterfilterNodeFilterPerform a depth-first filtering on each of the selected elements.Perform a depth-first filtering on each of the selected elements.Element first​() Get the first matched element.ElementElementElementfirst​()first​()firstfirstGet the first matched element.Get the first matched element.List<FormElement> forms​() Get the FormElement forms from the selected elements, if any.List<FormElement>List<FormElement>ListFormElementforms​()forms​()formsformsGet the FormElement forms from the selected elements, if any.Get the FormElement forms from the selected elements, if any.FormElementFormElementboolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined.booleanbooleanhasAttr​(String attributeKey)hasAttr​(String attributeKey)hasAttrhasAttrStringChecks if any of the matched elements have this attribute defined.Checks if any of the matched elements have this attribute defined.boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute.booleanbooleanhasClass​(String className)hasClass​(String className)hasClasshasClassStringDetermine if any of the matched elements have this class name set in their class attribute.Determine if any of the matched elements have this class name set in their class attribute.classboolean hasText​() Test if any matched Element has any text content, that is not just whitespace.booleanbooleanhasText​()hasText​()hasTexthasTextTest if any matched Element has any text content, that is not just whitespace.Test if any matched Element has any text content, that is not just whitespace.String html​() Get the combined inner HTML of all matched elements.StringStringStringhtml​()html​()htmlhtmlGet the combined inner HTML of all matched elements.Get the combined inner HTML of all matched elements.Elements html​(String html) Set the inner HTML of each matched element.ElementsElementsElementshtml​(String html)html​(String html)htmlhtmlStringSet the inner HTML of each matched element.Set the inner HTML of each matched element.boolean is​(String query) Test if any of the matched elements match the supplied query.booleanbooleanis​(String query)is​(String query)isisStringTest if any of the matched elements match the supplied query.Test if any of the matched elements match the supplied query.Element last​() Get the last matched element.ElementElementElementlast​()last​()lastlastGet the last matched element.Get the last matched element.Elements next​() Get the immediate next element sibling of each element in this list.ElementsElementsElementsnext​()next​()nextnextGet the immediate next element sibling of each element in this list.Get the immediate next element sibling of each element in this list.Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query.ElementsElementsElementsnext​(String query)next​(String query)nextnextStringGet the immediate next element sibling of each element in this list, filtered by the query.Get the immediate next element sibling of each element in this list, filtered by the query.Elements nextAll​() Get all of the following element siblings of each element in this list.ElementsElementsElementsnextAll​()nextAll​()nextAllnextAllGet all of the following element siblings of each element in this list.Get all of the following element siblings of each element in this list.Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query.ElementsElementsElementsnextAll​(String query)nextAll​(String query)nextAllnextAllStringGet all of the following element siblings of each element in this list, filtered by the query.Get all of the following element siblings of each element in this list, filtered by the query.Elements not​(String query) Remove elements from this list that match the Selector query.ElementsElementsElementsnot​(String query)not​(String query)notnotStringRemove elements from this list that match the Selector query.Remove elements from this list that match the Selector query.SelectorSelectorString outerHtml​() Get the combined outer HTML of all matched elements.StringStringStringouterHtml​()outerHtml​()outerHtmlouterHtmlGet the combined outer HTML of all matched elements.Get the combined outer HTML of all matched elements.Elements parents​() Get all of the parents and ancestor elements of the matched elements.ElementsElementsElementsparents​()parents​()parentsparentsGet all of the parents and ancestor elements of the matched elements.Get all of the parents and ancestor elements of the matched elements.Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML.ElementsElementsElementsprepend​(String html)prepend​(String html)prependprependStringAdd the supplied HTML to the start of each matched element's inner HTML.Add the supplied HTML to the start of each matched element's inner HTML.Elements prev​() Get the immediate previous element sibling of each element in this list.ElementsElementsElementsprev​()prev​()prevprevGet the immediate previous element sibling of each element in this list.Get the immediate previous element sibling of each element in this list.Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query.ElementsElementsElementsprev​(String query)prev​(String query)prevprevStringGet the immediate previous element sibling of each element in this list, filtered by the query.Get the immediate previous element sibling of each element in this list, filtered by the query.Elements prevAll​() Get all of the previous element siblings of each element in this list.ElementsElementsElementsprevAll​()prevAll​()prevAllprevAllGet all of the previous element siblings of each element in this list.Get all of the previous element siblings of each element in this list.Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query.ElementsElementsElementsprevAll​(String query)prevAll​(String query)prevAllprevAllStringGet all of the previous element siblings of each element in this list, filtered by the query.Get all of the previous element siblings of each element in this list, filtered by the query.Elements remove​() Remove each matched element from the DOM.ElementsElementsElementsremove​()remove​()removeremoveRemove each matched element from the DOM.Remove each matched element from the DOM.Elements removeAttr​(String attributeKey) Remove an attribute from every matched element.ElementsElementsElementsremoveAttr​(String attributeKey)removeAttr​(String attributeKey)removeAttrremoveAttrStringRemove an attribute from every matched element.Remove an attribute from every matched element.Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present.ElementsElementsElementsremoveClass​(String className)removeClass​(String className)removeClassremoveClassStringRemove the class name from every matched element's class attribute, if present.Remove the class name from every matched element's class attribute, if present.classElements select​(String query) Find matching elements within this element list.ElementsElementsElementsselect​(String query)select​(String query)selectselectStringFind matching elements within this element list.Find matching elements within this element list.Elements tagName​(String tagName) Update the tag name of each matched element.ElementsElementsElementstagName​(String tagName)tagName​(String tagName)tagNametagNameStringUpdate the tag name of each matched element.Update the tag name of each matched element.String text​() Get the combined text of all the matched elements.StringStringStringtext​()text​()texttextGet the combined text of all the matched elements.Get the combined text of all the matched elements.Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute.ElementsElementsElementstoggleClass​(String className)toggleClass​(String className)toggleClasstoggleClassStringToggle the class name on every matched element's class attribute.Toggle the class name on every matched element's class attribute.classString toString​() Get the combined outer HTML of all matched elements.StringStringStringtoString​()toString​()toStringtoStringGet the combined outer HTML of all matched elements.Get the combined outer HTML of all matched elements.Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements.ElementsElementsElementstraverse​(NodeVisitor nodeVisitor)traverse​(NodeVisitor nodeVisitor)traversetraverseNodeVisitorPerform a depth-first traversal on each of the selected elements.Perform a depth-first traversal on each of the selected elements.Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents.ElementsElementsElementsunwrap​()unwrap​()unwrapunwrapRemoves the matched elements from the DOM, and moves their children up into their parents.Removes the matched elements from the DOM, and moves their children up into their parents.String val​() Get the form element's value of the first matched element.StringStringStringval​()val​()valvalGet the form element's value of the first matched element.Get the form element's value of the first matched element.Elements val​(String value) Set the form element's value in each of the matched elements.ElementsElementsElementsval​(String value)val​(String value)valvalStringSet the form element's value in each of the matched elements.Set the form element's value in each of the matched elements.Elements wrap​(String html) Wrap the supplied HTML around each matched elements.ElementsElementsElementswrap​(String html)wrap​(String html)wrapwrapStringWrap the supplied HTML around each matched elements.Wrap the supplied HTML around each matched elements.Methods inherited from class java.util.AbstractCollection containsAllMethods inherited from class java.util.AbstractCollection containsAllMethods inherited from class java.util.AbstractCollectionAbstractCollectioncontainsAllcontainsAllMethods inherited from class java.util.AbstractList equals, hashCodeMethods inherited from class java.util.AbstractList equals, hashCodeMethods inherited from class java.util.AbstractListAbstractListequals, hashCodeequalshashCodeMethods inherited from class java.util.ArrayList add, add, addAll, addAll, clear, contains, ensureCapacity, forEach, get, indexOf, isEmpty, iterator, lastIndexOf, listIterator, listIterator, remove, remove, removeAll, removeIf, removeRange, replaceAll, retainAll, set, size, sort, spliterator, subList, toArray, toArray, trimToSizeMethods inherited from class java.util.ArrayList add, add, addAll, addAll, clear, contains, ensureCapacity, forEach, get, indexOf, isEmpty, iterator, lastIndexOf, listIterator, listIterator, remove, remove, removeAll, removeIf, removeRange, replaceAll, retainAll, set, size, sort, spliterator, subList, toArray, toArray, trimToSizeMethods inherited from class java.util.ArrayListArrayListadd, add, addAll, addAll, clear, contains, ensureCapacity, forEach, get, indexOf, isEmpty, iterator, lastIndexOf, listIterator, listIterator, remove, remove, removeAll, removeIf, removeRange, replaceAll, retainAll, set, size, sort, spliterator, subList, toArray, toArray, trimToSizeaddaddaddAlladdAllclearcontainsensureCapacityforEachgetindexOfisEmptyiteratorlastIndexOflistIteratorlistIteratorremoveremoveremoveAllremoveIfremoveRangereplaceAllretainAllsetsizesortspliteratorsubListtoArraytoArraytrimToSizeMethods inherited from interface java.util.Collection parallelStream, streamMethods inherited from interface java.util.Collection parallelStream, streamMethods inherited from interface java.util.CollectionCollectionparallelStream, streamparallelStreamstreamMethods inherited from interface java.util.List containsAll, equals, hashCode, of, of, of, of, of, of, of, of, of, of, of, ofMethods inherited from interface java.util.List containsAll, equals, hashCode, of, of, of, of, of, of, of, of, of, of, of, ofMethods inherited from interface java.util.ListListcontainsAll, equals, hashCode, of, of, of, of, of, of, of, of, of, of, of, ofcontainsAllequalshashCodeofofofofofofofofofofofofMethods inherited from class java.lang.Object finalize, getClass, notify, notifyAll, wait, wait, waitMethods inherited from class java.lang.Object finalize, getClass, notify, notifyAll, wait, wait, waitMethods inherited from class java.lang.ObjectObjectfinalize, getClass, notify, notifyAll, wait, wait, waitfinalizegetClassnotifynotifyAllwaitwaitwaitConstructor Detail Elements public Elements​() Elements public Elements​(int initialCapacity) Elements public Elements​(Collection<Element> elements) Elements public Elements​(List<Element> elements) Elements public Elements​(Element... elements) Method Detail clone public Elements clone​() Creates a deep copy of these elements. Overrides: clone in class ArrayList<Element> Returns: a deep copy attr public String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute. Parameters: attributeKey - The attribute key. Returns: The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true), or if the no elements have the attribute, returns empty string. See Also: hasAttr(String) hasAttr public boolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined. Parameters: attributeKey - attribute key Returns: true if any of the elements have the attribute; false if none do. eachAttr public List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements. If an element does not have this attribute, no value is included in the result set for that element. Parameters: attributeKey - the attribute name to return values for. You can add the abs: prefix to the key to get absolute URLs from relative URLs, e.g.: doc.select("a").eachAttr("abs:href") . Returns: a list of each element's attribute value for the attribute attr public Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements. Parameters: attributeKey - attribute key attributeValue - attribute value Returns: this removeAttr public Elements removeAttr​(String attributeKey) Remove an attribute from every matched element. Parameters: attributeKey - The attribute to remove. Returns: this (for chaining) addClass public Elements addClass​(String className) Add the class name to every matched element's class attribute. Parameters: className - class name to add Returns: this removeClass public Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present. Parameters: className - class name to remove Returns: this toggleClass public Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute. Parameters: className - class name to add if missing, or remove if present, from every element. Returns: this hasClass public boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute. Parameters: className - class name to check for Returns: true if any do, false if none do val public String val​() Get the form element's value of the first matched element. Returns: The form element's value, or empty if not set. See Also: Element.val() val public Elements val​(String value) Set the form element's value in each of the matched elements. Parameters: value - The value to set into each matched element Returns: this (for chaining) text public String text​() Get the combined text of all the matched elements. Note that it is possible to get repeats if the matched elements contain both parent elements and their own children, as the Element.text() method returns the combined text of a parent and all its children. Returns: string of all text: unescaped and no HTML. See Also: Element.text(), eachText() hasText public boolean hasText​() Test if any matched Element has any text content, that is not just whitespace. Returns: true if any element has non-blank text content. See Also: Element.hasText() eachText public List<String> eachText​() Get the text content of each of the matched elements. If an element has no text, then it is not included in the result. Returns: A list of each matched element's text content. See Also: Element.text(), Element.hasText(), text() html public String html​() Get the combined inner HTML of all matched elements. Returns: string of all element's inner HTML. See Also: text(), outerHtml() outerHtml public String outerHtml​() Get the combined outer HTML of all matched elements. Returns: string of all element's outer HTML. See Also: text(), html() toString public String toString​() Get the combined outer HTML of all matched elements. Alias of outerHtml(). Overrides: toString in class AbstractCollection<Element> Returns: string of all element's outer HTML. See Also: text(), html() tagName public Elements tagName​(String tagName) Update the tag name of each matched element. For example, to change each <i> to a <em>, do doc.select("i").tagName("em"); Parameters: tagName - the new tag name Returns: this, for chaining See Also: Element.tagName(String) html public Elements html​(String html) Set the inner HTML of each matched element. Parameters: html - HTML to parse and set into each matched element. Returns: this, for chaining See Also: Element.html(String) prepend public Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML. Parameters: html - HTML to add inside each element, before the existing HTML Returns: this, for chaining See Also: Element.prepend(String) append public Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML. Parameters: html - HTML to add inside each element, after the existing HTML Returns: this, for chaining See Also: Element.append(String) before public Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML. Parameters: html - HTML to insert before each element Returns: this, for chaining See Also: Element.before(String) after public Elements after​(String html) Insert the supplied HTML after each matched element's outer HTML. Parameters: html - HTML to insert after each element Returns: this, for chaining See Also: Element.after(String) wrap public Elements wrap​(String html) Wrap the supplied HTML around each matched elements. For example, with HTML <p><b>This</b> is <b>Jsoup</b></p>, doc.select("b").wrap("<i></i>"); becomes <p><i><b>This</b></i> is <i><b>jsoup</b></i></p> Parameters: html - HTML to wrap around each element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this (for chaining) See Also: Element.wrap(java.lang.String) unwrap public Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents. This has the effect of dropping the elements but keeping their children. This is useful for e.g removing unwanted formatting elements but keeping their contents. E.g. with HTML: <div><font>One</font> <font><a href="/">Two</a></font></div> doc.select("font").unwrap(); HTML = <div>One <a href="/">Two</a></div> Returns: this (for chaining) See Also: Node.unwrap() empty public Elements empty​() Empty (remove all child nodes from) each matched element. This is similar to setting the inner HTML of each element to nothing. E.g. HTML: <div><p>Hello <b>there</b></p> <p>now</p></div> doc.select("p").empty(); HTML = <div><p></p> <p></p></div> Returns: this, for chaining See Also: Element.empty(), remove() remove public Elements remove​() Remove each matched element from the DOM. This is similar to setting the outer HTML of each element to nothing. E.g. HTML: <div><p>Hello</p> <p>there</p> <img /></div> doc.select("p").remove(); HTML = <div> <img /></div> Note that this method should not be used to clean user-submitted HTML; rather, use Cleaner to clean HTML. Returns: this, for chaining See Also: Element.empty(), empty() select public Elements select​(String query) Find matching elements within this element list. Parameters: query - A Selector query Returns: the filtered list of elements, or an empty list if none match. not public Elements not​(String query) Remove elements from this list that match the Selector query. E.g. HTML: <div class=logo>One</div> <div>Two</div> Elements divs = doc.select("div").not(".logo"); Result: divs: [<div>Two</div>] Parameters: query - the selector query whose results should be removed from these elements Returns: a new elements list that contains only the filtered results eq public Elements eq​(int index) Get the nth matched element as an Elements object. See also ArrayList.get(int) to retrieve an Element. Parameters: index - the (zero-based) index of the element in the list to retain Returns: Elements containing only the specified element, or, if that element did not exist, an empty list. is public boolean is​(String query) Test if any of the matched elements match the supplied query. Parameters: query - A selector Returns: true if at least one element in the list matches the query. next public Elements next​() Get the immediate next element sibling of each element in this list. Returns: next element siblings. next public Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: next element siblings. nextAll public Elements nextAll​() Get all of the following element siblings of each element in this list. Returns: all following element siblings. nextAll public Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: all following element siblings. prev public Elements prev​() Get the immediate previous element sibling of each element in this list. Returns: previous element siblings. prev public Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: previous element siblings. prevAll public Elements prevAll​() Get all of the previous element siblings of each element in this list. Returns: all previous element siblings. prevAll public Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: all previous element siblings. parents public Elements parents​() Get all of the parents and ancestor elements of the matched elements. Returns: all of the parents and ancestor elements of the matched elements first public Element first​() Get the first matched element. Returns: The first matched element, or null if contents is empty. last public Element last​() Get the last matched element. Returns: The last matched element, or null if contents is empty. traverse public Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements. Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this, for chaining filter public Elements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements. Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this, for chaining forms public List<FormElement> forms​() Get the FormElement forms from the selected elements, if any. Returns: a list of FormElements pulled from the matched elements. The list will be empty if the elements contain no forms.Constructor Detail Elements public Elements​() Elements public Elements​(int initialCapacity) Elements public Elements​(Collection<Element> elements) Elements public Elements​(List<Element> elements) Elements public Elements​(Element... elements) Method Detail clone public Elements clone​() Creates a deep copy of these elements. Overrides: clone in class ArrayList<Element> Returns: a deep copy attr public String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute. Parameters: attributeKey - The attribute key. Returns: The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true), or if the no elements have the attribute, returns empty string. See Also: hasAttr(String) hasAttr public boolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined. Parameters: attributeKey - attribute key Returns: true if any of the elements have the attribute; false if none do. eachAttr public List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements. If an element does not have this attribute, no value is included in the result set for that element. Parameters: attributeKey - the attribute name to return values for. You can add the abs: prefix to the key to get absolute URLs from relative URLs, e.g.: doc.select("a").eachAttr("abs:href") . Returns: a list of each element's attribute value for the attribute attr public Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements. Parameters: attributeKey - attribute key attributeValue - attribute value Returns: this removeAttr public Elements removeAttr​(String attributeKey) Remove an attribute from every matched element. Parameters: attributeKey - The attribute to remove. Returns: this (for chaining) addClass public Elements addClass​(String className) Add the class name to every matched element's class attribute. Parameters: className - class name to add Returns: this removeClass public Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present. Parameters: className - class name to remove Returns: this toggleClass public Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute. Parameters: className - class name to add if missing, or remove if present, from every element. Returns: this hasClass public boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute. Parameters: className - class name to check for Returns: true if any do, false if none do val public String val​() Get the form element's value of the first matched element. Returns: The form element's value, or empty if not set. See Also: Element.val() val public Elements val​(String value) Set the form element's value in each of the matched elements. Parameters: value - The value to set into each matched element Returns: this (for chaining) text public String text​() Get the combined text of all the matched elements. Note that it is possible to get repeats if the matched elements contain both parent elements and their own children, as the Element.text() method returns the combined text of a parent and all its children. Returns: string of all text: unescaped and no HTML. See Also: Element.text(), eachText() hasText public boolean hasText​() Test if any matched Element has any text content, that is not just whitespace. Returns: true if any element has non-blank text content. See Also: Element.hasText() eachText public List<String> eachText​() Get the text content of each of the matched elements. If an element has no text, then it is not included in the result. Returns: A list of each matched element's text content. See Also: Element.text(), Element.hasText(), text() html public String html​() Get the combined inner HTML of all matched elements. Returns: string of all element's inner HTML. See Also: text(), outerHtml() outerHtml public String outerHtml​() Get the combined outer HTML of all matched elements. Returns: string of all element's outer HTML. See Also: text(), html() toString public String toString​() Get the combined outer HTML of all matched elements. Alias of outerHtml(). Overrides: toString in class AbstractCollection<Element> Returns: string of all element's outer HTML. See Also: text(), html() tagName public Elements tagName​(String tagName) Update the tag name of each matched element. For example, to change each <i> to a <em>, do doc.select("i").tagName("em"); Parameters: tagName - the new tag name Returns: this, for chaining See Also: Element.tagName(String) html public Elements html​(String html) Set the inner HTML of each matched element. Parameters: html - HTML to parse and set into each matched element. Returns: this, for chaining See Also: Element.html(String) prepend public Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML. Parameters: html - HTML to add inside each element, before the existing HTML Returns: this, for chaining See Also: Element.prepend(String) append public Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML. Parameters: html - HTML to add inside each element, after the existing HTML Returns: this, for chaining See Also: Element.append(String) before public Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML. Parameters: html - HTML to insert before each element Returns: this, for chaining See Also: Element.before(String) after public Elements after​(String html) Insert the supplied HTML after each matched element's outer HTML. Parameters: html - HTML to insert after each element Returns: this, for chaining See Also: Element.after(String) wrap public Elements wrap​(String html) Wrap the supplied HTML around each matched elements. For example, with HTML <p><b>This</b> is <b>Jsoup</b></p>, doc.select("b").wrap("<i></i>"); becomes <p><i><b>This</b></i> is <i><b>jsoup</b></i></p> Parameters: html - HTML to wrap around each element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this (for chaining) See Also: Element.wrap(java.lang.String) unwrap public Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents. This has the effect of dropping the elements but keeping their children. This is useful for e.g removing unwanted formatting elements but keeping their contents. E.g. with HTML: <div><font>One</font> <font><a href="/">Two</a></font></div> doc.select("font").unwrap(); HTML = <div>One <a href="/">Two</a></div> Returns: this (for chaining) See Also: Node.unwrap() empty public Elements empty​() Empty (remove all child nodes from) each matched element. This is similar to setting the inner HTML of each element to nothing. E.g. HTML: <div><p>Hello <b>there</b></p> <p>now</p></div> doc.select("p").empty(); HTML = <div><p></p> <p></p></div> Returns: this, for chaining See Also: Element.empty(), remove() remove public Elements remove​() Remove each matched element from the DOM. This is similar to setting the outer HTML of each element to nothing. E.g. HTML: <div><p>Hello</p> <p>there</p> <img /></div> doc.select("p").remove(); HTML = <div> <img /></div> Note that this method should not be used to clean user-submitted HTML; rather, use Cleaner to clean HTML. Returns: this, for chaining See Also: Element.empty(), empty() select public Elements select​(String query) Find matching elements within this element list. Parameters: query - A Selector query Returns: the filtered list of elements, or an empty list if none match. not public Elements not​(String query) Remove elements from this list that match the Selector query. E.g. HTML: <div class=logo>One</div> <div>Two</div> Elements divs = doc.select("div").not(".logo"); Result: divs: [<div>Two</div>] Parameters: query - the selector query whose results should be removed from these elements Returns: a new elements list that contains only the filtered results eq public Elements eq​(int index) Get the nth matched element as an Elements object. See also ArrayList.get(int) to retrieve an Element. Parameters: index - the (zero-based) index of the element in the list to retain Returns: Elements containing only the specified element, or, if that element did not exist, an empty list. is public boolean is​(String query) Test if any of the matched elements match the supplied query. Parameters: query - A selector Returns: true if at least one element in the list matches the query. next public Elements next​() Get the immediate next element sibling of each element in this list. Returns: next element siblings. next public Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: next element siblings. nextAll public Elements nextAll​() Get all of the following element siblings of each element in this list. Returns: all following element siblings. nextAll public Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: all following element siblings. prev public Elements prev​() Get the immediate previous element sibling of each element in this list. Returns: previous element siblings. prev public Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: previous element siblings. prevAll public Elements prevAll​() Get all of the previous element siblings of each element in this list. Returns: all previous element siblings. prevAll public Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: all previous element siblings. parents public Elements parents​() Get all of the parents and ancestor elements of the matched elements. Returns: all of the parents and ancestor elements of the matched elements first public Element first​() Get the first matched element. Returns: The first matched element, or null if contents is empty. last public Element last​() Get the last matched element. Returns: The last matched element, or null if contents is empty. traverse public Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements. Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this, for chaining filter public Elements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements. Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this, for chaining forms public List<FormElement> forms​() Get the FormElement forms from the selected elements, if any. Returns: a list of FormElements pulled from the matched elements. The list will be empty if the elements contain no forms.Constructor Detail Elements public Elements​() Elements public Elements​(int initialCapacity) Elements public Elements​(Collection<Element> elements) Elements public Elements​(List<Element> elements) Elements public Elements​(Element... elements) Method Detail clone public Elements clone​() Creates a deep copy of these elements. Overrides: clone in class ArrayList<Element> Returns: a deep copy attr public String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute. Parameters: attributeKey - The attribute key. Returns: The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true), or if the no elements have the attribute, returns empty string. See Also: hasAttr(String) hasAttr public boolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined. Parameters: attributeKey - attribute key Returns: true if any of the elements have the attribute; false if none do. eachAttr public List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements. If an element does not have this attribute, no value is included in the result set for that element. Parameters: attributeKey - the attribute name to return values for. You can add the abs: prefix to the key to get absolute URLs from relative URLs, e.g.: doc.select("a").eachAttr("abs:href") . Returns: a list of each element's attribute value for the attribute attr public Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements. Parameters: attributeKey - attribute key attributeValue - attribute value Returns: this removeAttr public Elements removeAttr​(String attributeKey) Remove an attribute from every matched element. Parameters: attributeKey - The attribute to remove. Returns: this (for chaining) addClass public Elements addClass​(String className) Add the class name to every matched element's class attribute. Parameters: className - class name to add Returns: this removeClass public Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present. Parameters: className - class name to remove Returns: this toggleClass public Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute. Parameters: className - class name to add if missing, or remove if present, from every element. Returns: this hasClass public boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute. Parameters: className - class name to check for Returns: true if any do, false if none do val public String val​() Get the form element's value of the first matched element. Returns: The form element's value, or empty if not set. See Also: Element.val() val public Elements val​(String value) Set the form element's value in each of the matched elements. Parameters: value - The value to set into each matched element Returns: this (for chaining) text public String text​() Get the combined text of all the matched elements. Note that it is possible to get repeats if the matched elements contain both parent elements and their own children, as the Element.text() method returns the combined text of a parent and all its children. Returns: string of all text: unescaped and no HTML. See Also: Element.text(), eachText() hasText public boolean hasText​() Test if any matched Element has any text content, that is not just whitespace. Returns: true if any element has non-blank text content. See Also: Element.hasText() eachText public List<String> eachText​() Get the text content of each of the matched elements. If an element has no text, then it is not included in the result. Returns: A list of each matched element's text content. See Also: Element.text(), Element.hasText(), text() html public String html​() Get the combined inner HTML of all matched elements. Returns: string of all element's inner HTML. See Also: text(), outerHtml() outerHtml public String outerHtml​() Get the combined outer HTML of all matched elements. Returns: string of all element's outer HTML. See Also: text(), html() toString public String toString​() Get the combined outer HTML of all matched elements. Alias of outerHtml(). Overrides: toString in class AbstractCollection<Element> Returns: string of all element's outer HTML. See Also: text(), html() tagName public Elements tagName​(String tagName) Update the tag name of each matched element. For example, to change each <i> to a <em>, do doc.select("i").tagName("em"); Parameters: tagName - the new tag name Returns: this, for chaining See Also: Element.tagName(String) html public Elements html​(String html) Set the inner HTML of each matched element. Parameters: html - HTML to parse and set into each matched element. Returns: this, for chaining See Also: Element.html(String) prepend public Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML. Parameters: html - HTML to add inside each element, before the existing HTML Returns: this, for chaining See Also: Element.prepend(String) append public Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML. Parameters: html - HTML to add inside each element, after the existing HTML Returns: this, for chaining See Also: Element.append(String) before public Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML. Parameters: html - HTML to insert before each element Returns: this, for chaining See Also: Element.before(String) after public Elements after​(String html) Insert the supplied HTML after each matched element's outer HTML. Parameters: html - HTML to insert after each element Returns: this, for chaining See Also: Element.after(String) wrap public Elements wrap​(String html) Wrap the supplied HTML around each matched elements. For example, with HTML <p><b>This</b> is <b>Jsoup</b></p>, doc.select("b").wrap("<i></i>"); becomes <p><i><b>This</b></i> is <i><b>jsoup</b></i></p> Parameters: html - HTML to wrap around each element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this (for chaining) See Also: Element.wrap(java.lang.String) unwrap public Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents. This has the effect of dropping the elements but keeping their children. This is useful for e.g removing unwanted formatting elements but keeping their contents. E.g. with HTML: <div><font>One</font> <font><a href="/">Two</a></font></div> doc.select("font").unwrap(); HTML = <div>One <a href="/">Two</a></div> Returns: this (for chaining) See Also: Node.unwrap() empty public Elements empty​() Empty (remove all child nodes from) each matched element. This is similar to setting the inner HTML of each element to nothing. E.g. HTML: <div><p>Hello <b>there</b></p> <p>now</p></div> doc.select("p").empty(); HTML = <div><p></p> <p></p></div> Returns: this, for chaining See Also: Element.empty(), remove() remove public Elements remove​() Remove each matched element from the DOM. This is similar to setting the outer HTML of each element to nothing. E.g. HTML: <div><p>Hello</p> <p>there</p> <img /></div> doc.select("p").remove(); HTML = <div> <img /></div> Note that this method should not be used to clean user-submitted HTML; rather, use Cleaner to clean HTML. Returns: this, for chaining See Also: Element.empty(), empty() select public Elements select​(String query) Find matching elements within this element list. Parameters: query - A Selector query Returns: the filtered list of elements, or an empty list if none match. not public Elements not​(String query) Remove elements from this list that match the Selector query. E.g. HTML: <div class=logo>One</div> <div>Two</div> Elements divs = doc.select("div").not(".logo"); Result: divs: [<div>Two</div>] Parameters: query - the selector query whose results should be removed from these elements Returns: a new elements list that contains only the filtered results eq public Elements eq​(int index) Get the nth matched element as an Elements object. See also ArrayList.get(int) to retrieve an Element. Parameters: index - the (zero-based) index of the element in the list to retain Returns: Elements containing only the specified element, or, if that element did not exist, an empty list. is public boolean is​(String query) Test if any of the matched elements match the supplied query. Parameters: query - A selector Returns: true if at least one element in the list matches the query. next public Elements next​() Get the immediate next element sibling of each element in this list. Returns: next element siblings. next public Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: next element siblings. nextAll public Elements nextAll​() Get all of the following element siblings of each element in this list. Returns: all following element siblings. nextAll public Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: all following element siblings. prev public Elements prev​() Get the immediate previous element sibling of each element in this list. Returns: previous element siblings. prev public Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: previous element siblings. prevAll public Elements prevAll​() Get all of the previous element siblings of each element in this list. Returns: all previous element siblings. prevAll public Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: all previous element siblings. parents public Elements parents​() Get all of the parents and ancestor elements of the matched elements. Returns: all of the parents and ancestor elements of the matched elements first public Element first​() Get the first matched element. Returns: The first matched element, or null if contents is empty. last public Element last​() Get the last matched element. Returns: The last matched element, or null if contents is empty. traverse public Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements. Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this, for chaining filter public Elements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements. Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this, for chaining forms public List<FormElement> forms​() Get the FormElement forms from the selected elements, if any. Returns: a list of FormElements pulled from the matched elements. The list will be empty if the elements contain no forms.Constructor Detail Elements public Elements​() Elements public Elements​(int initialCapacity) Elements public Elements​(Collection<Element> elements) Elements public Elements​(List<Element> elements) Elements public Elements​(Element... elements)Constructor Detail Elements public Elements​() Elements public Elements​(int initialCapacity) Elements public Elements​(Collection<Element> elements) Elements public Elements​(List<Element> elements) Elements public Elements​(Element... elements)Constructor DetailElements public Elements​()Elements public Elements​()Elementspublic Elements​()Elements public Elements​(int initialCapacity)Elements public Elements​(int initialCapacity)Elementspublic Elements​(int initialCapacity)Elements public Elements​(Collection<Element> elements)Elements public Elements​(Collection<Element> elements)Elementspublic Elements​(Collection<Element> elements)CollectionElementElements public Elements​(List<Element> elements)Elements public Elements​(List<Element> elements)Elementspublic Elements​(List<Element> elements)ListElementElements public Elements​(Element... elements)Elements public Elements​(Element... elements)Elementspublic Elements​(Element... elements)ElementMethod Detail clone public Elements clone​() Creates a deep copy of these elements. Overrides: clone in class ArrayList<Element> Returns: a deep copy attr public String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute. Parameters: attributeKey - The attribute key. Returns: The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true), or if the no elements have the attribute, returns empty string. See Also: hasAttr(String) hasAttr public boolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined. Parameters: attributeKey - attribute key Returns: true if any of the elements have the attribute; false if none do. eachAttr public List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements. If an element does not have this attribute, no value is included in the result set for that element. Parameters: attributeKey - the attribute name to return values for. You can add the abs: prefix to the key to get absolute URLs from relative URLs, e.g.: doc.select("a").eachAttr("abs:href") . Returns: a list of each element's attribute value for the attribute attr public Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements. Parameters: attributeKey - attribute key attributeValue - attribute value Returns: this removeAttr public Elements removeAttr​(String attributeKey) Remove an attribute from every matched element. Parameters: attributeKey - The attribute to remove. Returns: this (for chaining) addClass public Elements addClass​(String className) Add the class name to every matched element's class attribute. Parameters: className - class name to add Returns: this removeClass public Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present. Parameters: className - class name to remove Returns: this toggleClass public Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute. Parameters: className - class name to add if missing, or remove if present, from every element. Returns: this hasClass public boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute. Parameters: className - class name to check for Returns: true if any do, false if none do val public String val​() Get the form element's value of the first matched element. Returns: The form element's value, or empty if not set. See Also: Element.val() val public Elements val​(String value) Set the form element's value in each of the matched elements. Parameters: value - The value to set into each matched element Returns: this (for chaining) text public String text​() Get the combined text of all the matched elements. Note that it is possible to get repeats if the matched elements contain both parent elements and their own children, as the Element.text() method returns the combined text of a parent and all its children. Returns: string of all text: unescaped and no HTML. See Also: Element.text(), eachText() hasText public boolean hasText​() Test if any matched Element has any text content, that is not just whitespace. Returns: true if any element has non-blank text content. See Also: Element.hasText() eachText public List<String> eachText​() Get the text content of each of the matched elements. If an element has no text, then it is not included in the result. Returns: A list of each matched element's text content. See Also: Element.text(), Element.hasText(), text() html public String html​() Get the combined inner HTML of all matched elements. Returns: string of all element's inner HTML. See Also: text(), outerHtml() outerHtml public String outerHtml​() Get the combined outer HTML of all matched elements. Returns: string of all element's outer HTML. See Also: text(), html() toString public String toString​() Get the combined outer HTML of all matched elements. Alias of outerHtml(). Overrides: toString in class AbstractCollection<Element> Returns: string of all element's outer HTML. See Also: text(), html() tagName public Elements tagName​(String tagName) Update the tag name of each matched element. For example, to change each <i> to a <em>, do doc.select("i").tagName("em"); Parameters: tagName - the new tag name Returns: this, for chaining See Also: Element.tagName(String) html public Elements html​(String html) Set the inner HTML of each matched element. Parameters: html - HTML to parse and set into each matched element. Returns: this, for chaining See Also: Element.html(String) prepend public Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML. Parameters: html - HTML to add inside each element, before the existing HTML Returns: this, for chaining See Also: Element.prepend(String) append public Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML. Parameters: html - HTML to add inside each element, after the existing HTML Returns: this, for chaining See Also: Element.append(String) before public Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML. Parameters: html - HTML to insert before each element Returns: this, for chaining See Also: Element.before(String) after public Elements after​(String html) Insert the supplied HTML after each matched element's outer HTML. Parameters: html - HTML to insert after each element Returns: this, for chaining See Also: Element.after(String) wrap public Elements wrap​(String html) Wrap the supplied HTML around each matched elements. For example, with HTML <p><b>This</b> is <b>Jsoup</b></p>, doc.select("b").wrap("<i></i>"); becomes <p><i><b>This</b></i> is <i><b>jsoup</b></i></p> Parameters: html - HTML to wrap around each element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this (for chaining) See Also: Element.wrap(java.lang.String) unwrap public Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents. This has the effect of dropping the elements but keeping their children. This is useful for e.g removing unwanted formatting elements but keeping their contents. E.g. with HTML: <div><font>One</font> <font><a href="/">Two</a></font></div> doc.select("font").unwrap(); HTML = <div>One <a href="/">Two</a></div> Returns: this (for chaining) See Also: Node.unwrap() empty public Elements empty​() Empty (remove all child nodes from) each matched element. This is similar to setting the inner HTML of each element to nothing. E.g. HTML: <div><p>Hello <b>there</b></p> <p>now</p></div> doc.select("p").empty(); HTML = <div><p></p> <p></p></div> Returns: this, for chaining See Also: Element.empty(), remove() remove public Elements remove​() Remove each matched element from the DOM. This is similar to setting the outer HTML of each element to nothing. E.g. HTML: <div><p>Hello</p> <p>there</p> <img /></div> doc.select("p").remove(); HTML = <div> <img /></div> Note that this method should not be used to clean user-submitted HTML; rather, use Cleaner to clean HTML. Returns: this, for chaining See Also: Element.empty(), empty() select public Elements select​(String query) Find matching elements within this element list. Parameters: query - A Selector query Returns: the filtered list of elements, or an empty list if none match. not public Elements not​(String query) Remove elements from this list that match the Selector query. E.g. HTML: <div class=logo>One</div> <div>Two</div> Elements divs = doc.select("div").not(".logo"); Result: divs: [<div>Two</div>] Parameters: query - the selector query whose results should be removed from these elements Returns: a new elements list that contains only the filtered results eq public Elements eq​(int index) Get the nth matched element as an Elements object. See also ArrayList.get(int) to retrieve an Element. Parameters: index - the (zero-based) index of the element in the list to retain Returns: Elements containing only the specified element, or, if that element did not exist, an empty list. is public boolean is​(String query) Test if any of the matched elements match the supplied query. Parameters: query - A selector Returns: true if at least one element in the list matches the query. next public Elements next​() Get the immediate next element sibling of each element in this list. Returns: next element siblings. next public Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: next element siblings. nextAll public Elements nextAll​() Get all of the following element siblings of each element in this list. Returns: all following element siblings. nextAll public Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: all following element siblings. prev public Elements prev​() Get the immediate previous element sibling of each element in this list. Returns: previous element siblings. prev public Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: previous element siblings. prevAll public Elements prevAll​() Get all of the previous element siblings of each element in this list. Returns: all previous element siblings. prevAll public Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: all previous element siblings. parents public Elements parents​() Get all of the parents and ancestor elements of the matched elements. Returns: all of the parents and ancestor elements of the matched elements first public Element first​() Get the first matched element. Returns: The first matched element, or null if contents is empty. last public Element last​() Get the last matched element. Returns: The last matched element, or null if contents is empty. traverse public Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements. Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this, for chaining filter public Elements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements. Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this, for chaining forms public List<FormElement> forms​() Get the FormElement forms from the selected elements, if any. Returns: a list of FormElements pulled from the matched elements. The list will be empty if the elements contain no forms.Method Detail clone public Elements clone​() Creates a deep copy of these elements. Overrides: clone in class ArrayList<Element> Returns: a deep copy attr public String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute. Parameters: attributeKey - The attribute key. Returns: The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true), or if the no elements have the attribute, returns empty string. See Also: hasAttr(String) hasAttr public boolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined. Parameters: attributeKey - attribute key Returns: true if any of the elements have the attribute; false if none do. eachAttr public List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements. If an element does not have this attribute, no value is included in the result set for that element. Parameters: attributeKey - the attribute name to return values for. You can add the abs: prefix to the key to get absolute URLs from relative URLs, e.g.: doc.select("a").eachAttr("abs:href") . Returns: a list of each element's attribute value for the attribute attr public Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements. Parameters: attributeKey - attribute key attributeValue - attribute value Returns: this removeAttr public Elements removeAttr​(String attributeKey) Remove an attribute from every matched element. Parameters: attributeKey - The attribute to remove. Returns: this (for chaining) addClass public Elements addClass​(String className) Add the class name to every matched element's class attribute. Parameters: className - class name to add Returns: this removeClass public Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present. Parameters: className - class name to remove Returns: this toggleClass public Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute. Parameters: className - class name to add if missing, or remove if present, from every element. Returns: this hasClass public boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute. Parameters: className - class name to check for Returns: true if any do, false if none do val public String val​() Get the form element's value of the first matched element. Returns: The form element's value, or empty if not set. See Also: Element.val() val public Elements val​(String value) Set the form element's value in each of the matched elements. Parameters: value - The value to set into each matched element Returns: this (for chaining) text public String text​() Get the combined text of all the matched elements. Note that it is possible to get repeats if the matched elements contain both parent elements and their own children, as the Element.text() method returns the combined text of a parent and all its children. Returns: string of all text: unescaped and no HTML. See Also: Element.text(), eachText() hasText public boolean hasText​() Test if any matched Element has any text content, that is not just whitespace. Returns: true if any element has non-blank text content. See Also: Element.hasText() eachText public List<String> eachText​() Get the text content of each of the matched elements. If an element has no text, then it is not included in the result. Returns: A list of each matched element's text content. See Also: Element.text(), Element.hasText(), text() html public String html​() Get the combined inner HTML of all matched elements. Returns: string of all element's inner HTML. See Also: text(), outerHtml() outerHtml public String outerHtml​() Get the combined outer HTML of all matched elements. Returns: string of all element's outer HTML. See Also: text(), html() toString public String toString​() Get the combined outer HTML of all matched elements. Alias of outerHtml(). Overrides: toString in class AbstractCollection<Element> Returns: string of all element's outer HTML. See Also: text(), html() tagName public Elements tagName​(String tagName) Update the tag name of each matched element. For example, to change each <i> to a <em>, do doc.select("i").tagName("em"); Parameters: tagName - the new tag name Returns: this, for chaining See Also: Element.tagName(String) html public Elements html​(String html) Set the inner HTML of each matched element. Parameters: html - HTML to parse and set into each matched element. Returns: this, for chaining See Also: Element.html(String) prepend public Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML. Parameters: html - HTML to add inside each element, before the existing HTML Returns: this, for chaining See Also: Element.prepend(String) append public Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML. Parameters: html - HTML to add inside each element, after the existing HTML Returns: this, for chaining See Also: Element.append(String) before public Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML. Parameters: html - HTML to insert before each element Returns: this, for chaining See Also: Element.before(String) after public Elements after​(String html) Insert the supplied HTML after each matched element's outer HTML. Parameters: html - HTML to insert after each element Returns: this, for chaining See Also: Element.after(String) wrap public Elements wrap​(String html) Wrap the supplied HTML around each matched elements. For example, with HTML <p><b>This</b> is <b>Jsoup</b></p>, doc.select("b").wrap("<i></i>"); becomes <p><i><b>This</b></i> is <i><b>jsoup</b></i></p> Parameters: html - HTML to wrap around each element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this (for chaining) See Also: Element.wrap(java.lang.String) unwrap public Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents. This has the effect of dropping the elements but keeping their children. This is useful for e.g removing unwanted formatting elements but keeping their contents. E.g. with HTML: <div><font>One</font> <font><a href="/">Two</a></font></div> doc.select("font").unwrap(); HTML = <div>One <a href="/">Two</a></div> Returns: this (for chaining) See Also: Node.unwrap() empty public Elements empty​() Empty (remove all child nodes from) each matched element. This is similar to setting the inner HTML of each element to nothing. E.g. HTML: <div><p>Hello <b>there</b></p> <p>now</p></div> doc.select("p").empty(); HTML = <div><p></p> <p></p></div> Returns: this, for chaining See Also: Element.empty(), remove() remove public Elements remove​() Remove each matched element from the DOM. This is similar to setting the outer HTML of each element to nothing. E.g. HTML: <div><p>Hello</p> <p>there</p> <img /></div> doc.select("p").remove(); HTML = <div> <img /></div> Note that this method should not be used to clean user-submitted HTML; rather, use Cleaner to clean HTML. Returns: this, for chaining See Also: Element.empty(), empty() select public Elements select​(String query) Find matching elements within this element list. Parameters: query - A Selector query Returns: the filtered list of elements, or an empty list if none match. not public Elements not​(String query) Remove elements from this list that match the Selector query. E.g. HTML: <div class=logo>One</div> <div>Two</div> Elements divs = doc.select("div").not(".logo"); Result: divs: [<div>Two</div>] Parameters: query - the selector query whose results should be removed from these elements Returns: a new elements list that contains only the filtered results eq public Elements eq​(int index) Get the nth matched element as an Elements object. See also ArrayList.get(int) to retrieve an Element. Parameters: index - the (zero-based) index of the element in the list to retain Returns: Elements containing only the specified element, or, if that element did not exist, an empty list. is public boolean is​(String query) Test if any of the matched elements match the supplied query. Parameters: query - A selector Returns: true if at least one element in the list matches the query. next public Elements next​() Get the immediate next element sibling of each element in this list. Returns: next element siblings. next public Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: next element siblings. nextAll public Elements nextAll​() Get all of the following element siblings of each element in this list. Returns: all following element siblings. nextAll public Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: all following element siblings. prev public Elements prev​() Get the immediate previous element sibling of each element in this list. Returns: previous element siblings. prev public Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: previous element siblings. prevAll public Elements prevAll​() Get all of the previous element siblings of each element in this list. Returns: all previous element siblings. prevAll public Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: all previous element siblings. parents public Elements parents​() Get all of the parents and ancestor elements of the matched elements. Returns: all of the parents and ancestor elements of the matched elements first public Element first​() Get the first matched element. Returns: The first matched element, or null if contents is empty. last public Element last​() Get the last matched element. Returns: The last matched element, or null if contents is empty. traverse public Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements. Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this, for chaining filter public Elements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements. Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this, for chaining forms public List<FormElement> forms​() Get the FormElement forms from the selected elements, if any. Returns: a list of FormElements pulled from the matched elements. The list will be empty if the elements contain no forms.Method Detailclone public Elements clone​() Creates a deep copy of these elements. Overrides: clone in class ArrayList<Element> Returns: a deep copyclone public Elements clone​() Creates a deep copy of these elements. Overrides: clone in class ArrayList<Element> Returns: a deep copyclonepublic Elements clone​()ElementsCreates a deep copy of these elements.Overrides: clone in class ArrayList<Element> Returns: a deep copyOverrides:Overrides:clone in class ArrayList<Element>clonecloneArrayList<Element>ArrayListElementReturns:Returns:a deep copyattr public String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute. Parameters: attributeKey - The attribute key. Returns: The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true), or if the no elements have the attribute, returns empty string. See Also: hasAttr(String)attr public String attr​(String attributeKey) Get an attribute value from the first matched element that has the attribute. Parameters: attributeKey - The attribute key. Returns: The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true), or if the no elements have the attribute, returns empty string. See Also: hasAttr(String)attrpublic String attr​(String attributeKey)StringStringGet an attribute value from the first matched element that has the attribute.Parameters: attributeKey - The attribute key. Returns: The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true), or if the no elements have the attribute, returns empty string. See Also: hasAttr(String)Parameters:Parameters:attributeKey - The attribute key.attributeKeyReturns:Returns:The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true), or if the no elements have the attribute, returns empty string.See Also:See Also:hasAttr(String)hasAttr(String)hasAttr(String)hasAttr public boolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined. Parameters: attributeKey - attribute key Returns: true if any of the elements have the attribute; false if none do.hasAttr public boolean hasAttr​(String attributeKey) Checks if any of the matched elements have this attribute defined. Parameters: attributeKey - attribute key Returns: true if any of the elements have the attribute; false if none do.hasAttrpublic boolean hasAttr​(String attributeKey)StringChecks if any of the matched elements have this attribute defined.Parameters: attributeKey - attribute key Returns: true if any of the elements have the attribute; false if none do.Parameters:Parameters:attributeKey - attribute keyattributeKeyReturns:Returns:true if any of the elements have the attribute; false if none do.eachAttr public List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements. If an element does not have this attribute, no value is included in the result set for that element. Parameters: attributeKey - the attribute name to return values for. You can add the abs: prefix to the key to get absolute URLs from relative URLs, e.g.: doc.select("a").eachAttr("abs:href") . Returns: a list of each element's attribute value for the attributeeachAttr public List<String> eachAttr​(String attributeKey) Get the attribute value for each of the matched elements. If an element does not have this attribute, no value is included in the result set for that element. Parameters: attributeKey - the attribute name to return values for. You can add the abs: prefix to the key to get absolute URLs from relative URLs, e.g.: doc.select("a").eachAttr("abs:href") . Returns: a list of each element's attribute value for the attributeeachAttrpublic List<String> eachAttr​(String attributeKey)ListStringStringGet the attribute value for each of the matched elements. If an element does not have this attribute, no value is included in the result set for that element.Parameters: attributeKey - the attribute name to return values for. You can add the abs: prefix to the key to get absolute URLs from relative URLs, e.g.: doc.select("a").eachAttr("abs:href") . Returns: a list of each element's attribute value for the attributeParameters:Parameters:attributeKey - the attribute name to return values for. You can add the abs: prefix to the key to get absolute URLs from relative URLs, e.g.: doc.select("a").eachAttr("abs:href") .attributeKeyabs:doc.select("a").eachAttr("abs:href")Returns:Returns:a list of each element's attribute value for the attributeattr public Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements. Parameters: attributeKey - attribute key attributeValue - attribute value Returns: thisattr public Elements attr​(String attributeKey, String attributeValue) Set an attribute on all matched elements. Parameters: attributeKey - attribute key attributeValue - attribute value Returns: thisattrpublic Elements attr​(String attributeKey, String attributeValue)ElementsStringStringSet an attribute on all matched elements.Parameters: attributeKey - attribute key attributeValue - attribute value Returns: thisParameters:Parameters:attributeKey - attribute keyattributeKeyattributeValue - attribute valueattributeValueReturns:Returns:thisremoveAttr public Elements removeAttr​(String attributeKey) Remove an attribute from every matched element. Parameters: attributeKey - The attribute to remove. Returns: this (for chaining)removeAttr public Elements removeAttr​(String attributeKey) Remove an attribute from every matched element. Parameters: attributeKey - The attribute to remove. Returns: this (for chaining)removeAttrpublic Elements removeAttr​(String attributeKey)ElementsStringRemove an attribute from every matched element.Parameters: attributeKey - The attribute to remove. Returns: this (for chaining)Parameters:Parameters:attributeKey - The attribute to remove.attributeKeyReturns:Returns:this (for chaining)addClass public Elements addClass​(String className) Add the class name to every matched element's class attribute. Parameters: className - class name to add Returns: thisaddClass public Elements addClass​(String className) Add the class name to every matched element's class attribute. Parameters: className - class name to add Returns: thisaddClasspublic Elements addClass​(String className)ElementsStringAdd the class name to every matched element's class attribute.classParameters: className - class name to add Returns: thisParameters:Parameters:className - class name to addclassNameReturns:Returns:thisremoveClass public Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present. Parameters: className - class name to remove Returns: thisremoveClass public Elements removeClass​(String className) Remove the class name from every matched element's class attribute, if present. Parameters: className - class name to remove Returns: thisremoveClasspublic Elements removeClass​(String className)ElementsStringRemove the class name from every matched element's class attribute, if present.classParameters: className - class name to remove Returns: thisParameters:Parameters:className - class name to removeclassNameReturns:Returns:thistoggleClass public Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute. Parameters: className - class name to add if missing, or remove if present, from every element. Returns: thistoggleClass public Elements toggleClass​(String className) Toggle the class name on every matched element's class attribute. Parameters: className - class name to add if missing, or remove if present, from every element. Returns: thistoggleClasspublic Elements toggleClass​(String className)ElementsStringToggle the class name on every matched element's class attribute.classParameters: className - class name to add if missing, or remove if present, from every element. Returns: thisParameters:Parameters:className - class name to add if missing, or remove if present, from every element.classNameReturns:Returns:thishasClass public boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute. Parameters: className - class name to check for Returns: true if any do, false if none dohasClass public boolean hasClass​(String className) Determine if any of the matched elements have this class name set in their class attribute. Parameters: className - class name to check for Returns: true if any do, false if none dohasClasspublic boolean hasClass​(String className)StringDetermine if any of the matched elements have this class name set in their class attribute.classParameters: className - class name to check for Returns: true if any do, false if none doParameters:Parameters:className - class name to check forclassNameReturns:Returns:true if any do, false if none doval public String val​() Get the form element's value of the first matched element. Returns: The form element's value, or empty if not set. See Also: Element.val()val public String val​() Get the form element's value of the first matched element. Returns: The form element's value, or empty if not set. See Also: Element.val()valpublic String val​()StringGet the form element's value of the first matched element.Returns: The form element's value, or empty if not set. See Also: Element.val()Returns:Returns:The form element's value, or empty if not set.See Also:See Also:Element.val()Element.val()Element.val()val public Elements val​(String value) Set the form element's value in each of the matched elements. Parameters: value - The value to set into each matched element Returns: this (for chaining)val public Elements val​(String value) Set the form element's value in each of the matched elements. Parameters: value - The value to set into each matched element Returns: this (for chaining)valpublic Elements val​(String value)ElementsStringSet the form element's value in each of the matched elements.Parameters: value - The value to set into each matched element Returns: this (for chaining)Parameters:Parameters:value - The value to set into each matched elementvalueReturns:Returns:this (for chaining)text public String text​() Get the combined text of all the matched elements. Note that it is possible to get repeats if the matched elements contain both parent elements and their own children, as the Element.text() method returns the combined text of a parent and all its children. Returns: string of all text: unescaped and no HTML. See Also: Element.text(), eachText()text public String text​() Get the combined text of all the matched elements. Note that it is possible to get repeats if the matched elements contain both parent elements and their own children, as the Element.text() method returns the combined text of a parent and all its children. Returns: string of all text: unescaped and no HTML. See Also: Element.text(), eachText()textpublic String text​()StringGet the combined text of all the matched elements. Note that it is possible to get repeats if the matched elements contain both parent elements and their own children, as the Element.text() method returns the combined text of a parent and all its children.Note that it is possible to get repeats if the matched elements contain both parent elements and their own children, as the Element.text() method returns the combined text of a parent and all its children.Returns: string of all text: unescaped and no HTML. See Also: Element.text(), eachText()Returns:Returns:string of all text: unescaped and no HTML.See Also:See Also:Element.text(), eachText()Element.text()Element.text()eachText()eachText()hasText public boolean hasText​() Test if any matched Element has any text content, that is not just whitespace. Returns: true if any element has non-blank text content. See Also: Element.hasText()hasText public boolean hasText​() Test if any matched Element has any text content, that is not just whitespace. Returns: true if any element has non-blank text content. See Also: Element.hasText()hasTextpublic boolean hasText​()Test if any matched Element has any text content, that is not just whitespace.Returns: true if any element has non-blank text content. See Also: Element.hasText()Returns:Returns:true if any element has non-blank text content.See Also:See Also:Element.hasText()Element.hasText()Element.hasText()eachText public List<String> eachText​() Get the text content of each of the matched elements. If an element has no text, then it is not included in the result. Returns: A list of each matched element's text content. See Also: Element.text(), Element.hasText(), text()eachText public List<String> eachText​() Get the text content of each of the matched elements. If an element has no text, then it is not included in the result. Returns: A list of each matched element's text content. See Also: Element.text(), Element.hasText(), text()eachTextpublic List<String> eachText​()ListStringGet the text content of each of the matched elements. If an element has no text, then it is not included in the result.Returns: A list of each matched element's text content. See Also: Element.text(), Element.hasText(), text()Returns:Returns:A list of each matched element's text content.See Also:See Also:Element.text(), Element.hasText(), text()Element.text()Element.text()Element.hasText()Element.hasText()text()text()html public String html​() Get the combined inner HTML of all matched elements. Returns: string of all element's inner HTML. See Also: text(), outerHtml()html public String html​() Get the combined inner HTML of all matched elements. Returns: string of all element's inner HTML. See Also: text(), outerHtml()htmlpublic String html​()StringGet the combined inner HTML of all matched elements.Returns: string of all element's inner HTML. See Also: text(), outerHtml()Returns:Returns:string of all element's inner HTML.See Also:See Also:text(), outerHtml()text()text()outerHtml()outerHtml()outerHtml public String outerHtml​() Get the combined outer HTML of all matched elements. Returns: string of all element's outer HTML. See Also: text(), html()outerHtml public String outerHtml​() Get the combined outer HTML of all matched elements. Returns: string of all element's outer HTML. See Also: text(), html()outerHtmlpublic String outerHtml​()StringGet the combined outer HTML of all matched elements.Returns: string of all element's outer HTML. See Also: text(), html()Returns:Returns:string of all element's outer HTML.See Also:See Also:text(), html()text()text()html()html()toString public String toString​() Get the combined outer HTML of all matched elements. Alias of outerHtml(). Overrides: toString in class AbstractCollection<Element> Returns: string of all element's outer HTML. See Also: text(), html()toString public String toString​() Get the combined outer HTML of all matched elements. Alias of outerHtml(). Overrides: toString in class AbstractCollection<Element> Returns: string of all element's outer HTML. See Also: text(), html()toStringpublic String toString​()StringGet the combined outer HTML of all matched elements. Alias of outerHtml().outerHtml()outerHtml()Overrides: toString in class AbstractCollection<Element> Returns: string of all element's outer HTML. See Also: text(), html()Overrides:Overrides:toString in class AbstractCollection<Element>toStringtoStringAbstractCollection<Element>AbstractCollectionElementReturns:Returns:string of all element's outer HTML.See Also:See Also:text(), html()text()text()html()html()tagName public Elements tagName​(String tagName) Update the tag name of each matched element. For example, to change each <i> to a <em>, do doc.select("i").tagName("em"); Parameters: tagName - the new tag name Returns: this, for chaining See Also: Element.tagName(String)tagName public Elements tagName​(String tagName) Update the tag name of each matched element. For example, to change each <i> to a <em>, do doc.select("i").tagName("em"); Parameters: tagName - the new tag name Returns: this, for chaining See Also: Element.tagName(String)tagNamepublic Elements tagName​(String tagName)ElementsStringUpdate the tag name of each matched element. For example, to change each <i> to a <em>, do doc.select("i").tagName("em");<i><em>doc.select("i").tagName("em");Parameters: tagName - the new tag name Returns: this, for chaining See Also: Element.tagName(String)Parameters:Parameters:tagName - the new tag nametagNameReturns:Returns:this, for chainingSee Also:See Also:Element.tagName(String)Element.tagName(String)Element.tagName(String)html public Elements html​(String html) Set the inner HTML of each matched element. Parameters: html - HTML to parse and set into each matched element. Returns: this, for chaining See Also: Element.html(String)html public Elements html​(String html) Set the inner HTML of each matched element. Parameters: html - HTML to parse and set into each matched element. Returns: this, for chaining See Also: Element.html(String)htmlpublic Elements html​(String html)ElementsStringSet the inner HTML of each matched element.Parameters: html - HTML to parse and set into each matched element. Returns: this, for chaining See Also: Element.html(String)Parameters:Parameters:html - HTML to parse and set into each matched element.htmlReturns:Returns:this, for chainingSee Also:See Also:Element.html(String)Element.html(String)Element.html(String)prepend public Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML. Parameters: html - HTML to add inside each element, before the existing HTML Returns: this, for chaining See Also: Element.prepend(String)prepend public Elements prepend​(String html) Add the supplied HTML to the start of each matched element's inner HTML. Parameters: html - HTML to add inside each element, before the existing HTML Returns: this, for chaining See Also: Element.prepend(String)prependpublic Elements prepend​(String html)ElementsStringAdd the supplied HTML to the start of each matched element's inner HTML.Parameters: html - HTML to add inside each element, before the existing HTML Returns: this, for chaining See Also: Element.prepend(String)Parameters:Parameters:html - HTML to add inside each element, before the existing HTMLhtmlReturns:Returns:this, for chainingSee Also:See Also:Element.prepend(String)Element.prepend(String)Element.prepend(String)append public Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML. Parameters: html - HTML to add inside each element, after the existing HTML Returns: this, for chaining See Also: Element.append(String)append public Elements append​(String html) Add the supplied HTML to the end of each matched element's inner HTML. Parameters: html - HTML to add inside each element, after the existing HTML Returns: this, for chaining See Also: Element.append(String)appendpublic Elements append​(String html)ElementsStringAdd the supplied HTML to the end of each matched element's inner HTML.Parameters: html - HTML to add inside each element, after the existing HTML Returns: this, for chaining See Also: Element.append(String)Parameters:Parameters:html - HTML to add inside each element, after the existing HTMLhtmlReturns:Returns:this, for chainingSee Also:See Also:Element.append(String)Element.append(String)Element.append(String)before public Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML. Parameters: html - HTML to insert before each element Returns: this, for chaining See Also: Element.before(String)before public Elements before​(String html) Insert the supplied HTML before each matched element's outer HTML. Parameters: html - HTML to insert before each element Returns: this, for chaining See Also: Element.before(String)beforepublic Elements before​(String html)ElementsStringInsert the supplied HTML before each matched element's outer HTML.Parameters: html - HTML to insert before each element Returns: this, for chaining See Also: Element.before(String)Parameters:Parameters:html - HTML to insert before each elementhtmlReturns:Returns:this, for chainingSee Also:See Also:Element.before(String)Element.before(String)Element.before(String)after public Elements after​(String html) Insert the supplied HTML after each matched element's outer HTML. Parameters: html - HTML to insert after each element Returns: this, for chaining See Also: Element.after(String)after public Elements after​(String html) Insert the supplied HTML after each matched element's outer HTML. Parameters: html - HTML to insert after each element Returns: this, for chaining See Also: Element.after(String)afterpublic Elements after​(String html)ElementsStringInsert the supplied HTML after each matched element's outer HTML.Parameters: html - HTML to insert after each element Returns: this, for chaining See Also: Element.after(String)Parameters:Parameters:html - HTML to insert after each elementhtmlReturns:Returns:this, for chainingSee Also:See Also:Element.after(String)Element.after(String)Element.after(String)wrap public Elements wrap​(String html) Wrap the supplied HTML around each matched elements. For example, with HTML <p><b>This</b> is <b>Jsoup</b></p>, doc.select("b").wrap("<i></i>"); becomes <p><i><b>This</b></i> is <i><b>jsoup</b></i></p> Parameters: html - HTML to wrap around each element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this (for chaining) See Also: Element.wrap(java.lang.String)wrap public Elements wrap​(String html) Wrap the supplied HTML around each matched elements. For example, with HTML <p><b>This</b> is <b>Jsoup</b></p>, doc.select("b").wrap("<i></i>"); becomes <p><i><b>This</b></i> is <i><b>jsoup</b></i></p> Parameters: html - HTML to wrap around each element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this (for chaining) See Also: Element.wrap(java.lang.String)wrappublic Elements wrap​(String html)ElementsStringWrap the supplied HTML around each matched elements. For example, with HTML <p><b>This</b> is <b>Jsoup</b></p>, doc.select("b").wrap("<i></i>"); becomes <p><i><b>This</b></i> is <i><b>jsoup</b></i></p><p><b>This</b> is <b>Jsoup</b></p>doc.select("b").wrap("<i></i>");<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>Parameters: html - HTML to wrap around each element, e.g. <div class="head"></div>. Can be arbitrarily deep. Returns: this (for chaining) See Also: Element.wrap(java.lang.String)Parameters:Parameters:html - HTML to wrap around each element, e.g. <div class="head"></div>. Can be arbitrarily deep.html<div class="head"></div>Returns:Returns:this (for chaining)See Also:See Also:Element.wrap(java.lang.String)Element.wrap(java.lang.String)Element.wrap(java.lang.String)unwrap public Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents. This has the effect of dropping the elements but keeping their children. This is useful for e.g removing unwanted formatting elements but keeping their contents. E.g. with HTML: <div><font>One</font> <font><a href="/">Two</a></font></div> doc.select("font").unwrap(); HTML = <div>One <a href="/">Two</a></div> Returns: this (for chaining) See Also: Node.unwrap()unwrap public Elements unwrap​() Removes the matched elements from the DOM, and moves their children up into their parents. This has the effect of dropping the elements but keeping their children. This is useful for e.g removing unwanted formatting elements but keeping their contents. E.g. with HTML: <div><font>One</font> <font><a href="/">Two</a></font></div> doc.select("font").unwrap(); HTML = <div>One <a href="/">Two</a></div> Returns: this (for chaining) See Also: Node.unwrap()unwrappublic Elements unwrap​()ElementsRemoves the matched elements from the DOM, and moves their children up into their parents. This has the effect of dropping the elements but keeping their children. This is useful for e.g removing unwanted formatting elements but keeping their contents. E.g. with HTML: <div><font>One</font> <font><a href="/">Two</a></font></div> doc.select("font").unwrap(); HTML = <div>One <a href="/">Two</a></div>This is useful for e.g removing unwanted formatting elements but keeping their contents.<div><font>One</font> <font><a href="/">Two</a></font></div><div><font>One</font> <font><a href="/">Two</a></font></div>doc.select("font").unwrap();doc.select("font").unwrap();HTML = <div>One <a href="/">Two</a></div><div>One <a href="/">Two</a></div>Returns: this (for chaining) See Also: Node.unwrap()Returns:Returns:this (for chaining)See Also:See Also:Node.unwrap()Node.unwrap()Node.unwrap()empty public Elements empty​() Empty (remove all child nodes from) each matched element. This is similar to setting the inner HTML of each element to nothing. E.g. HTML: <div><p>Hello <b>there</b></p> <p>now</p></div> doc.select("p").empty(); HTML = <div><p></p> <p></p></div> Returns: this, for chaining See Also: Element.empty(), remove()empty public Elements empty​() Empty (remove all child nodes from) each matched element. This is similar to setting the inner HTML of each element to nothing. E.g. HTML: <div><p>Hello <b>there</b></p> <p>now</p></div> doc.select("p").empty(); HTML = <div><p></p> <p></p></div> Returns: this, for chaining See Also: Element.empty(), remove()emptypublic Elements empty​()ElementsEmpty (remove all child nodes from) each matched element. This is similar to setting the inner HTML of each element to nothing. E.g. HTML: <div><p>Hello <b>there</b></p> <p>now</p></div> doc.select("p").empty(); HTML = <div><p></p> <p></p></div>E.g. HTML: <div><p>Hello <b>there</b></p> <p>now</p></div> doc.select("p").empty(); HTML = <div><p></p> <p></p></div><div><p>Hello <b>there</b></p> <p>now</p></div>doc.select("p").empty();<div><p></p> <p></p></div>Returns: this, for chaining See Also: Element.empty(), remove()Returns:Returns:this, for chainingSee Also:See Also:Element.empty(), remove()Element.empty()Element.empty()remove()remove()remove public Elements remove​() Remove each matched element from the DOM. This is similar to setting the outer HTML of each element to nothing. E.g. HTML: <div><p>Hello</p> <p>there</p> <img /></div> doc.select("p").remove(); HTML = <div> <img /></div> Note that this method should not be used to clean user-submitted HTML; rather, use Cleaner to clean HTML. Returns: this, for chaining See Also: Element.empty(), empty()remove public Elements remove​() Remove each matched element from the DOM. This is similar to setting the outer HTML of each element to nothing. E.g. HTML: <div><p>Hello</p> <p>there</p> <img /></div> doc.select("p").remove(); HTML = <div> <img /></div> Note that this method should not be used to clean user-submitted HTML; rather, use Cleaner to clean HTML. Returns: this, for chaining See Also: Element.empty(), empty()removepublic Elements remove​()ElementsRemove each matched element from the DOM. This is similar to setting the outer HTML of each element to nothing. E.g. HTML: <div><p>Hello</p> <p>there</p> <img /></div> doc.select("p").remove(); HTML = <div> <img /></div> Note that this method should not be used to clean user-submitted HTML; rather, use Cleaner to clean HTML.E.g. HTML: <div><p>Hello</p> <p>there</p> <img /></div> doc.select("p").remove(); HTML = <div> <img /></div><div><p>Hello</p> <p>there</p> <img /></div>doc.select("p").remove();<div> <img /></div>Note that this method should not be used to clean user-submitted HTML; rather, use Cleaner to clean HTML.CleanerCleanerReturns: this, for chaining See Also: Element.empty(), empty()Returns:Returns:this, for chainingSee Also:See Also:Element.empty(), empty()Element.empty()Element.empty()empty()empty()select public Elements select​(String query) Find matching elements within this element list. Parameters: query - A Selector query Returns: the filtered list of elements, or an empty list if none match.select public Elements select​(String query) Find matching elements within this element list. Parameters: query - A Selector query Returns: the filtered list of elements, or an empty list if none match.selectpublic Elements select​(String query)ElementsStringFind matching elements within this element list.Parameters: query - A Selector query Returns: the filtered list of elements, or an empty list if none match.Parameters:Parameters:query - A Selector queryquerySelectorSelectorReturns:Returns:the filtered list of elements, or an empty list if none match.not public Elements not​(String query) Remove elements from this list that match the Selector query. E.g. HTML: <div class=logo>One</div> <div>Two</div> Elements divs = doc.select("div").not(".logo"); Result: divs: [<div>Two</div>] Parameters: query - the selector query whose results should be removed from these elements Returns: a new elements list that contains only the filtered resultsnot public Elements not​(String query) Remove elements from this list that match the Selector query. E.g. HTML: <div class=logo>One</div> <div>Two</div> Elements divs = doc.select("div").not(".logo"); Result: divs: [<div>Two</div>] Parameters: query - the selector query whose results should be removed from these elements Returns: a new elements list that contains only the filtered resultsnotpublic Elements not​(String query)ElementsStringRemove elements from this list that match the Selector query. E.g. HTML: <div class=logo>One</div> <div>Two</div> Elements divs = doc.select("div").not(".logo"); Result: divs: [<div>Two</div>]SelectorSelectorE.g. HTML: <div class=logo>One</div> <div>Two</div> Elements divs = doc.select("div").not(".logo"); Result: divs: [<div>Two</div>]<div class=logo>One</div> <div>Two</div>Elements divs = doc.select("div").not(".logo");divs: [<div>Two</div>]Parameters: query - the selector query whose results should be removed from these elements Returns: a new elements list that contains only the filtered resultsParameters:Parameters:query - the selector query whose results should be removed from these elementsqueryReturns:Returns:a new elements list that contains only the filtered resultseq public Elements eq​(int index) Get the nth matched element as an Elements object. See also ArrayList.get(int) to retrieve an Element. Parameters: index - the (zero-based) index of the element in the list to retain Returns: Elements containing only the specified element, or, if that element did not exist, an empty list.eq public Elements eq​(int index) Get the nth matched element as an Elements object. See also ArrayList.get(int) to retrieve an Element. Parameters: index - the (zero-based) index of the element in the list to retain Returns: Elements containing only the specified element, or, if that element did not exist, an empty list.eqpublic Elements eq​(int index)ElementsGet the nth matched element as an Elements object. See also ArrayList.get(int) to retrieve an Element.nthSee also ArrayList.get(int) to retrieve an Element.ArrayList.get(int)ArrayList.get(int)Parameters: index - the (zero-based) index of the element in the list to retain Returns: Elements containing only the specified element, or, if that element did not exist, an empty list.Parameters:Parameters:index - the (zero-based) index of the element in the list to retainindexReturns:Returns:Elements containing only the specified element, or, if that element did not exist, an empty list.is public boolean is​(String query) Test if any of the matched elements match the supplied query. Parameters: query - A selector Returns: true if at least one element in the list matches the query.is public boolean is​(String query) Test if any of the matched elements match the supplied query. Parameters: query - A selector Returns: true if at least one element in the list matches the query.ispublic boolean is​(String query)StringTest if any of the matched elements match the supplied query.Parameters: query - A selector Returns: true if at least one element in the list matches the query.Parameters:Parameters:query - A selectorqueryReturns:Returns:true if at least one element in the list matches the query.next public Elements next​() Get the immediate next element sibling of each element in this list. Returns: next element siblings.next public Elements next​() Get the immediate next element sibling of each element in this list. Returns: next element siblings.nextpublic Elements next​()ElementsGet the immediate next element sibling of each element in this list.Returns: next element siblings.Returns:Returns:next element siblings.next public Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: next element siblings.next public Elements next​(String query) Get the immediate next element sibling of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: next element siblings.nextpublic Elements next​(String query)ElementsStringGet the immediate next element sibling of each element in this list, filtered by the query.Parameters: query - CSS query to match siblings against Returns: next element siblings.Parameters:Parameters:query - CSS query to match siblings againstqueryReturns:Returns:next element siblings.nextAll public Elements nextAll​() Get all of the following element siblings of each element in this list. Returns: all following element siblings.nextAll public Elements nextAll​() Get all of the following element siblings of each element in this list. Returns: all following element siblings.nextAllpublic Elements nextAll​()ElementsGet all of the following element siblings of each element in this list.Returns: all following element siblings.Returns:Returns:all following element siblings.nextAll public Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: all following element siblings.nextAll public Elements nextAll​(String query) Get all of the following element siblings of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: all following element siblings.nextAllpublic Elements nextAll​(String query)ElementsStringGet all of the following element siblings of each element in this list, filtered by the query.Parameters: query - CSS query to match siblings against Returns: all following element siblings.Parameters:Parameters:query - CSS query to match siblings againstqueryReturns:Returns:all following element siblings.prev public Elements prev​() Get the immediate previous element sibling of each element in this list. Returns: previous element siblings.prev public Elements prev​() Get the immediate previous element sibling of each element in this list. Returns: previous element siblings.prevpublic Elements prev​()ElementsGet the immediate previous element sibling of each element in this list.Returns: previous element siblings.Returns:Returns:previous element siblings.prev public Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: previous element siblings.prev public Elements prev​(String query) Get the immediate previous element sibling of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: previous element siblings.prevpublic Elements prev​(String query)ElementsStringGet the immediate previous element sibling of each element in this list, filtered by the query.Parameters: query - CSS query to match siblings against Returns: previous element siblings.Parameters:Parameters:query - CSS query to match siblings againstqueryReturns:Returns:previous element siblings.prevAll public Elements prevAll​() Get all of the previous element siblings of each element in this list. Returns: all previous element siblings.prevAll public Elements prevAll​() Get all of the previous element siblings of each element in this list. Returns: all previous element siblings.prevAllpublic Elements prevAll​()ElementsGet all of the previous element siblings of each element in this list.Returns: all previous element siblings.Returns:Returns:all previous element siblings.prevAll public Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: all previous element siblings.prevAll public Elements prevAll​(String query) Get all of the previous element siblings of each element in this list, filtered by the query. Parameters: query - CSS query to match siblings against Returns: all previous element siblings.prevAllpublic Elements prevAll​(String query)ElementsStringGet all of the previous element siblings of each element in this list, filtered by the query.Parameters: query - CSS query to match siblings against Returns: all previous element siblings.Parameters:Parameters:query - CSS query to match siblings againstqueryReturns:Returns:all previous element siblings.parents public Elements parents​() Get all of the parents and ancestor elements of the matched elements. Returns: all of the parents and ancestor elements of the matched elementsparents public Elements parents​() Get all of the parents and ancestor elements of the matched elements. Returns: all of the parents and ancestor elements of the matched elementsparentspublic Elements parents​()ElementsGet all of the parents and ancestor elements of the matched elements.Returns: all of the parents and ancestor elements of the matched elementsReturns:Returns:all of the parents and ancestor elements of the matched elementsfirst public Element first​() Get the first matched element. Returns: The first matched element, or null if contents is empty.first public Element first​() Get the first matched element. Returns: The first matched element, or null if contents is empty.firstpublic Element first​()ElementGet the first matched element.Returns: The first matched element, or null if contents is empty.Returns:Returns:The first matched element, or null if contents is empty.nulllast public Element last​() Get the last matched element. Returns: The last matched element, or null if contents is empty.last public Element last​() Get the last matched element. Returns: The last matched element, or null if contents is empty.lastpublic Element last​()ElementGet the last matched element.Returns: The last matched element, or null if contents is empty.Returns:Returns:The last matched element, or null if contents is empty.nulltraverse public Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements. Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this, for chainingtraverse public Elements traverse​(NodeVisitor nodeVisitor) Perform a depth-first traversal on each of the selected elements. Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this, for chainingtraversepublic Elements traverse​(NodeVisitor nodeVisitor)ElementsNodeVisitorPerform a depth-first traversal on each of the selected elements.Parameters: nodeVisitor - the visitor callbacks to perform on each node Returns: this, for chainingParameters:Parameters:nodeVisitor - the visitor callbacks to perform on each nodenodeVisitorReturns:Returns:this, for chainingfilter public Elements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements. Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this, for chainingfilter public Elements filter​(NodeFilter nodeFilter) Perform a depth-first filtering on each of the selected elements. Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this, for chainingfilterpublic Elements filter​(NodeFilter nodeFilter)ElementsNodeFilterPerform a depth-first filtering on each of the selected elements.Parameters: nodeFilter - the filter callbacks to perform on each node Returns: this, for chainingParameters:Parameters:nodeFilter - the filter callbacks to perform on each nodenodeFilterReturns:Returns:this, for chainingforms public List<FormElement> forms​() Get the FormElement forms from the selected elements, if any. Returns: a list of FormElements pulled from the matched elements. The list will be empty if the elements contain no forms.forms public List<FormElement> forms​() Get the FormElement forms from the selected elements, if any. Returns: a list of FormElements pulled from the matched elements. The list will be empty if the elements contain no forms.formspublic List<FormElement> forms​()ListFormElementGet the FormElement forms from the selected elements, if any.FormElementFormElementReturns: a list of FormElements pulled from the matched elements. The list will be empty if the elements contain no forms.Returns:Returns:a list of FormElements pulled from the matched elements. The list will be empty if the elements contain no forms.FormElementFormElementSkip navigation links Overview Package Class Use Tree Deprecated Index HelpSkip navigation linksSkip navigation linksOverview Package Class Use Tree Deprecated Index HelpOverviewOverviewPackagePackageClassUseUseTreeTreeDeprecatedDeprecatedIndexIndexHelpHelpPrev Class Next Class Frames No Frames All Classes <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodPrev Class Next ClassPrev ClassPrev ClassPrev ClassNext ClassNext ClassNext ClassFrames No FramesFramesFramesNo FramesNo FramesAll ClassesAll ClassesAll Classes<div> JavaScript is disabled on your browser. </div><div> JavaScript is disabled on your browser. </div>Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSummary: Nested | Field | Constr | MethodSummary:Nested |Field |FieldConstr |ConstrMethodMethodDetail: Field | Constr | MethodDetail:Field |Constr |ConstrMethodMethodCopyright © 2009–2017 Jonathan Hedley. All rights reserved.Copyright © 2009–2017 Jonathan Hedley. All rights reserved.Jonathan Hedley