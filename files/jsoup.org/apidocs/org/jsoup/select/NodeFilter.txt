<div> JavaScript is disabled on your browser. </div> Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | Method Package org.jsoup.select Interface NodeFilter public interface NodeFilter Node filter interface. Provide an implementing class to NodeTraversor to iterate through nodes. This interface provides two methods, head and tail. The head method is called when the node is first seen, and the tail method when all of the node's children have been visited. As an example, head can be used to create a start tag for a node, and tail to create the end tag. For every node, the filter has to decide whether to continue (NodeFilter.FilterResult.CONTINUE), skip all children (NodeFilter.FilterResult.SKIP_CHILDREN), skip node entirely (NodeFilter.FilterResult.SKIP_ENTIRELY), remove the subtree (NodeFilter.FilterResult.REMOVE), interrupt the iteration and return (NodeFilter.FilterResult.STOP). The difference between NodeFilter.FilterResult.SKIP_CHILDREN and NodeFilter.FilterResult.SKIP_ENTIRELY is that the first will invoke tail(Node, int) on the node, while the latter will not. Within tail(Node, int), both are equivalent to NodeFilter.FilterResult.CONTINUE. Nested Class Summary Nested Classes Modifier and Type Interface Description static class NodeFilter.FilterResult Filter decision. Method Summary All Methods Instance Methods Abstract Methods Modifier and Type Method Description NodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited. NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Method Detail head NodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decision tail NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decision Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | Method Copyright © 2009–2017 Jonathan Hedley. All rights reserved.<div> JavaScript is disabled on your browser. </div>Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSkip navigation links Overview Package Class Use Tree Deprecated Index HelpSkip navigation linksSkip navigation linksOverview Package Class Use Tree Deprecated Index HelpOverviewOverviewPackagePackageClassUseUseTreeTreeDeprecatedDeprecatedIndexIndexHelpHelpPrev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodPrev Class Next ClassPrev ClassPrev ClassPrev ClassNext ClassNext ClassNext ClassFrames No FramesFramesFramesNo FramesNo FramesAll ClassesAll ClassesAll ClassesSEARCH:SEARCH:SEARCH:<div> JavaScript is disabled on your browser. </div><div> JavaScript is disabled on your browser. </div>Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSummary: Nested | Field | Constr | MethodSummary:Nested |NestedField |Constr |MethodMethodDetail: Field | Constr | MethodDetail:Field |Constr |MethodMethodPackage org.jsoup.select Interface NodeFilterPackage org.jsoup.selectPackageorg.jsoup.selectInterface NodeFilterpublic interface NodeFilter Node filter interface. Provide an implementing class to NodeTraversor to iterate through nodes. This interface provides two methods, head and tail. The head method is called when the node is first seen, and the tail method when all of the node's children have been visited. As an example, head can be used to create a start tag for a node, and tail to create the end tag. For every node, the filter has to decide whether to continue (NodeFilter.FilterResult.CONTINUE), skip all children (NodeFilter.FilterResult.SKIP_CHILDREN), skip node entirely (NodeFilter.FilterResult.SKIP_ENTIRELY), remove the subtree (NodeFilter.FilterResult.REMOVE), interrupt the iteration and return (NodeFilter.FilterResult.STOP). The difference between NodeFilter.FilterResult.SKIP_CHILDREN and NodeFilter.FilterResult.SKIP_ENTIRELY is that the first will invoke tail(Node, int) on the node, while the latter will not. Within tail(Node, int), both are equivalent to NodeFilter.FilterResult.CONTINUE. Nested Class Summary Nested Classes Modifier and Type Interface Description static class NodeFilter.FilterResult Filter decision. Method Summary All Methods Instance Methods Abstract Methods Modifier and Type Method Description NodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited. NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Method Detail head NodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decision tail NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decisionpublic interface NodeFilter Node filter interface. Provide an implementing class to NodeTraversor to iterate through nodes. This interface provides two methods, head and tail. The head method is called when the node is first seen, and the tail method when all of the node's children have been visited. As an example, head can be used to create a start tag for a node, and tail to create the end tag. For every node, the filter has to decide whether to continue (NodeFilter.FilterResult.CONTINUE), skip all children (NodeFilter.FilterResult.SKIP_CHILDREN), skip node entirely (NodeFilter.FilterResult.SKIP_ENTIRELY), remove the subtree (NodeFilter.FilterResult.REMOVE), interrupt the iteration and return (NodeFilter.FilterResult.STOP). The difference between NodeFilter.FilterResult.SKIP_CHILDREN and NodeFilter.FilterResult.SKIP_ENTIRELY is that the first will invoke tail(Node, int) on the node, while the latter will not. Within tail(Node, int), both are equivalent to NodeFilter.FilterResult.CONTINUE.public interface NodeFilter Node filter interface. Provide an implementing class to NodeTraversor to iterate through nodes. This interface provides two methods, head and tail. The head method is called when the node is first seen, and the tail method when all of the node's children have been visited. As an example, head can be used to create a start tag for a node, and tail to create the end tag. For every node, the filter has to decide whether to continue (NodeFilter.FilterResult.CONTINUE), skip all children (NodeFilter.FilterResult.SKIP_CHILDREN), skip node entirely (NodeFilter.FilterResult.SKIP_ENTIRELY), remove the subtree (NodeFilter.FilterResult.REMOVE), interrupt the iteration and return (NodeFilter.FilterResult.STOP). The difference between NodeFilter.FilterResult.SKIP_CHILDREN and NodeFilter.FilterResult.SKIP_ENTIRELY is that the first will invoke tail(Node, int) on the node, while the latter will not. Within tail(Node, int), both are equivalent to NodeFilter.FilterResult.CONTINUE.public interface NodeFilter Node filter interface. Provide an implementing class to NodeTraversor to iterate through nodes. This interface provides two methods, head and tail. The head method is called when the node is first seen, and the tail method when all of the node's children have been visited. As an example, head can be used to create a start tag for a node, and tail to create the end tag. For every node, the filter has to decide whether to continue (NodeFilter.FilterResult.CONTINUE), skip all children (NodeFilter.FilterResult.SKIP_CHILDREN), skip node entirely (NodeFilter.FilterResult.SKIP_ENTIRELY), remove the subtree (NodeFilter.FilterResult.REMOVE), interrupt the iteration and return (NodeFilter.FilterResult.STOP). The difference between NodeFilter.FilterResult.SKIP_CHILDREN and NodeFilter.FilterResult.SKIP_ENTIRELY is that the first will invoke tail(Node, int) on the node, while the latter will not. Within tail(Node, int), both are equivalent to NodeFilter.FilterResult.CONTINUE.public interface NodeFilterNodeFilterNode filter interface. Provide an implementing class to NodeTraversor to iterate through nodes. This interface provides two methods, head and tail. The head method is called when the node is first seen, and the tail method when all of the node's children have been visited. As an example, head can be used to create a start tag for a node, and tail to create the end tag. For every node, the filter has to decide whether to continue (NodeFilter.FilterResult.CONTINUE), skip all children (NodeFilter.FilterResult.SKIP_CHILDREN), skip node entirely (NodeFilter.FilterResult.SKIP_ENTIRELY), remove the subtree (NodeFilter.FilterResult.REMOVE), interrupt the iteration and return (NodeFilter.FilterResult.STOP). The difference between NodeFilter.FilterResult.SKIP_CHILDREN and NodeFilter.FilterResult.SKIP_ENTIRELY is that the first will invoke tail(Node, int) on the node, while the latter will not. Within tail(Node, int), both are equivalent to NodeFilter.FilterResult.CONTINUE.NodeTraversorNodeTraversorThis interface provides two methods, head and tail. The head method is called when the node is first seen, and the tail method when all of the node's children have been visited. As an example, head can be used to create a start tag for a node, and tail to create the end tag.headtailFor every node, the filter has to decide whether tocontinue (NodeFilter.FilterResult.CONTINUE), skip all children (NodeFilter.FilterResult.SKIP_CHILDREN), skip node entirely (NodeFilter.FilterResult.SKIP_ENTIRELY), remove the subtree (NodeFilter.FilterResult.REMOVE), interrupt the iteration and return (NodeFilter.FilterResult.STOP).continue (NodeFilter.FilterResult.CONTINUE),NodeFilter.FilterResult.CONTINUENodeFilter.FilterResult.CONTINUEskip all children (NodeFilter.FilterResult.SKIP_CHILDREN),NodeFilter.FilterResult.SKIP_CHILDRENNodeFilter.FilterResult.SKIP_CHILDRENskip node entirely (NodeFilter.FilterResult.SKIP_ENTIRELY),NodeFilter.FilterResult.SKIP_ENTIRELYNodeFilter.FilterResult.SKIP_ENTIRELYremove the subtree (NodeFilter.FilterResult.REMOVE),NodeFilter.FilterResult.REMOVENodeFilter.FilterResult.REMOVEinterrupt the iteration and return (NodeFilter.FilterResult.STOP).NodeFilter.FilterResult.STOPNodeFilter.FilterResult.STOPNodeFilter.FilterResult.SKIP_CHILDRENNodeFilter.FilterResult.SKIP_CHILDRENNodeFilter.FilterResult.SKIP_ENTIRELYNodeFilter.FilterResult.SKIP_ENTIRELYtail(Node, int)tail(Node, int)tail(Node, int)tail(Node, int)NodeFilter.FilterResult.CONTINUENodeFilter.FilterResult.CONTINUENested Class Summary Nested Classes Modifier and Type Interface Description static class NodeFilter.FilterResult Filter decision. Method Summary All Methods Instance Methods Abstract Methods Modifier and Type Method Description NodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited. NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited.Nested Class Summary Nested Classes Modifier and Type Interface Description static class NodeFilter.FilterResult Filter decision. Method Summary All Methods Instance Methods Abstract Methods Modifier and Type Method Description NodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited. NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited.Nested Class Summary Nested Classes Modifier and Type Interface Description static class NodeFilter.FilterResult Filter decision. Method Summary All Methods Instance Methods Abstract Methods Modifier and Type Method Description NodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited. NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited.Nested Class Summary Nested Classes Modifier and Type Interface Description static class NodeFilter.FilterResult Filter decision.Nested Class Summary Nested Classes Modifier and Type Interface Description static class NodeFilter.FilterResult Filter decision.Nested Class SummaryNested Classes Modifier and Type Interface Description static class NodeFilter.FilterResult Filter decision.Nested ClassesNested ClassesModifier and Type Interface Description static class NodeFilter.FilterResult Filter decision.Modifier and Type Interface DescriptionModifier and TypeInterfaceDescriptionstatic class NodeFilter.FilterResult Filter decision.static classstatic classNodeFilter.FilterResultNodeFilter.FilterResultNodeFilter.FilterResultNodeFilter.FilterResultFilter decision.Filter decision.Method Summary All Methods Instance Methods Abstract Methods Modifier and Type Method Description NodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited. NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited.Method Summary All Methods Instance Methods Abstract Methods Modifier and Type Method Description NodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited. NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited.Method SummaryAll Methods Instance Methods Abstract Methods Modifier and Type Method Description NodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited. NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited.All Methods Instance Methods Abstract MethodsAll MethodsAll MethodsInstance MethodsInstance MethodsInstance MethodsAbstract MethodsAbstract MethodsAbstract MethodsModifier and Type Method Description NodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited. NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited.Modifier and Type Method DescriptionModifier and TypeMethodDescriptionNodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited.NodeFilter.FilterResultNodeFilter.FilterResultNodeFilter.FilterResulthead​(Node node, int depth)head​(Node node, int depth)headheadNodeCallback for when a node is first visited.Callback for when a node is first visited.NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited.NodeFilter.FilterResultNodeFilter.FilterResultNodeFilter.FilterResulttail​(Node node, int depth)tail​(Node node, int depth)tailtailNodeCallback for when a node is last visited, after all of its descendants have been visited.Callback for when a node is last visited, after all of its descendants have been visited.Method Detail head NodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decision tail NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decisionMethod Detail head NodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decision tail NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decisionMethod Detail head NodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decision tail NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decisionMethod Detail head NodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decision tail NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decisionMethod Detail head NodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decision tail NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decisionMethod Detailhead NodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decisionhead NodeFilter.FilterResult head​(Node node, int depth) Callback for when a node is first visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decisionheadNodeFilter.FilterResult head​(Node node, int depth)NodeFilter.FilterResultNodeCallback for when a node is first visited.Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decisionParameters:Parameters:node - the node being visited.nodedepth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1.depthReturns:Returns:Filter decisiontail NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decisiontail NodeFilter.FilterResult tail​(Node node, int depth) Callback for when a node is last visited, after all of its descendants have been visited. Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decisiontailNodeFilter.FilterResult tail​(Node node, int depth)NodeFilter.FilterResultNodeCallback for when a node is last visited, after all of its descendants have been visited.Parameters: node - the node being visited. depth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1. Returns: Filter decisionParameters:Parameters:node - the node being visited.nodedepth - the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1.depthReturns:Returns:Filter decisionSkip navigation links Overview Package Class Use Tree Deprecated Index HelpSkip navigation linksSkip navigation linksOverview Package Class Use Tree Deprecated Index HelpOverviewOverviewPackagePackageClassUseUseTreeTreeDeprecatedDeprecatedIndexIndexHelpHelpPrev Class Next Class Frames No Frames All Classes <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodPrev Class Next ClassPrev ClassPrev ClassPrev ClassNext ClassNext ClassNext ClassFrames No FramesFramesFramesNo FramesNo FramesAll ClassesAll ClassesAll Classes<div> JavaScript is disabled on your browser. </div><div> JavaScript is disabled on your browser. </div>Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSummary: Nested | Field | Constr | MethodSummary:Nested |NestedField |Constr |MethodMethodDetail: Field | Constr | MethodDetail:Field |Constr |MethodMethodCopyright © 2009–2017 Jonathan Hedley. All rights reserved.Copyright © 2009–2017 Jonathan Hedley. All rights reserved.Jonathan Hedley