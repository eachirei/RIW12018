<div> JavaScript is disabled on your browser. </div> Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | Method Package org.jsoup Class Jsoup java.lang.Object org.jsoup.Jsoup public class Jsoup extends Object The core public access point to the jsoup functionality. Author: Jonathan Hedley Method Summary All Methods Static Methods Concrete Methods Modifier and Type Method Description static String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static Connection connect​(String url) Creates a new Connection to a URL. static boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist. static Document parse​(File in, String charsetName) Parse the contents of a file as HTML. static Document parse​(File in, String charsetName, String baseUri) Parse the contents of a file as HTML. static Document parse​(InputStream in, String charsetName, String baseUri) Read an input stream, and parse it to a Document. static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) Read an input stream, and parse it to a Document. static Document parse​(String html) Parse HTML into a Document. static Document parse​(String html, String baseUri) Parse HTML into a Document. static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser. static Document parse​(URL url, int timeoutMillis) Fetch a URL, and parse it as HTML. static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. static Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Method Detail parse public static Document parse​(String html, String baseUri) Parse HTML into a Document. The parser will make a sensible, balanced document tree out of any HTML. Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. Returns: sane HTML parse public static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser. You can provide an alternate parser, such as a simple XML (non-HTML) parser. Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. parser - alternate parser to use. Returns: sane HTML parse public static Document parse​(String html) Parse HTML into a Document. As no base URI is specified, absolute URL detection relies on the HTML including a <base href> tag. Parameters: html - HTML to parse Returns: sane HTML See Also: parse(String, String) connect public static Connection connect​(String url) Creates a new Connection to a URL. Use to fetch and parse a HTML page. Use examples: Document doc = Jsoup.connect("http://example.com").userAgent("Mozilla").data("name", "jsoup").get(); Document doc = Jsoup.connect("http://example.com").cookie("auth", "token").post(); Parameters: url - URL to connect to. The protocol must be http or https. Returns: the connection. You can add data, cookies, and headers; set the user-agent, referrer, method; and then execute. parse public static Document parse​(File in, String charsetName, String baseUri) throws IOException Parse the contents of a file as HTML. Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parse public static Document parse​(File in, String charsetName) throws IOException Parse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs. Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. See Also: parse(File, String, String) parse public static Document parse​(InputStream in, String charsetName, String baseUri) throws IOException Read an input stream, and parse it to a Document. Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parse public static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException Read an input stream, and parse it to a Document. You can provide an alternate parser, such as a simple XML (non-HTML) parser. Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. parser - alternate parser to use. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parseBodyFragment public static Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Parameters: bodyHtml - body HTML fragment baseUri - URL to resolve relative URLs against. Returns: sane HTML document See Also: Document.body() parseBodyFragment public static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Parameters: bodyHtml - body HTML fragment Returns: sane HTML document See Also: Document.body() parse public static Document parse​(URL url, int timeoutMillis) throws IOException Fetch a URL, and parse it as HTML. Provided for compatibility; in most cases use connect(String) instead. The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to UTF-8. Parameters: url - URL to fetch (with a GET). The protocol must be http or https. timeoutMillis - Connection and read timeout, in milliseconds. If exceeded, IOException is thrown. Returns: The parsed HTML. Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - if a connection or read error occurs See Also: connect(String) clean public static String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) clean public static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. Parameters: bodyHtml - input untrusted HTML (body fragment) whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) clean public static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. The HTML is treated as a body fragment; it's expected the cleaned HTML will be used within the body of an existing document. If you want to clean full documents, use Cleaner.clean(Document) instead, and add structural tags (html, head, body etc) to the whitelist. Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements outputSettings - document output settings; use to control pretty-printing and entity escape modes Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) isValid public static boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. The input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output. Assumes the HTML is a body fragment (i.e. will be used in an existing HTML document body.) Parameters: bodyHtml - HTML to test whitelist - whitelist to test against Returns: true if no tags or attributes were removed; false otherwise See Also: clean(String, org.jsoup.safety.Whitelist) Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | Method Copyright © 2009–2017 Jonathan Hedley. All rights reserved.<div> JavaScript is disabled on your browser. </div>Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSkip navigation links Overview Package Class Use Tree Deprecated Index HelpSkip navigation linksSkip navigation linksOverview Package Class Use Tree Deprecated Index HelpOverviewOverviewPackagePackageClassUseUseTreeTreeDeprecatedDeprecatedIndexIndexHelpHelpPrev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodPrev Class Next ClassPrev ClassPrev ClassPrev ClassNext ClassNext ClassNext ClassFrames No FramesFramesFramesNo FramesNo FramesAll ClassesAll ClassesAll ClassesSEARCH:SEARCH:SEARCH:<div> JavaScript is disabled on your browser. </div><div> JavaScript is disabled on your browser. </div>Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSummary: Nested | Field | Constr | MethodSummary:Nested |Field |Constr |MethodMethodDetail: Field | Constr | MethodDetail:Field |Constr |MethodMethodPackage org.jsoup Class JsoupPackage org.jsoupPackageorg.jsoupClass Jsoupjava.lang.Object org.jsoup.Jsoup public class Jsoup extends Object The core public access point to the jsoup functionality. Author: Jonathan Hedley Method Summary All Methods Static Methods Concrete Methods Modifier and Type Method Description static String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static Connection connect​(String url) Creates a new Connection to a URL. static boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist. static Document parse​(File in, String charsetName) Parse the contents of a file as HTML. static Document parse​(File in, String charsetName, String baseUri) Parse the contents of a file as HTML. static Document parse​(InputStream in, String charsetName, String baseUri) Read an input stream, and parse it to a Document. static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) Read an input stream, and parse it to a Document. static Document parse​(String html) Parse HTML into a Document. static Document parse​(String html, String baseUri) Parse HTML into a Document. static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser. static Document parse​(URL url, int timeoutMillis) Fetch a URL, and parse it as HTML. static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. static Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Method Detail parse public static Document parse​(String html, String baseUri) Parse HTML into a Document. The parser will make a sensible, balanced document tree out of any HTML. Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. Returns: sane HTML parse public static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser. You can provide an alternate parser, such as a simple XML (non-HTML) parser. Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. parser - alternate parser to use. Returns: sane HTML parse public static Document parse​(String html) Parse HTML into a Document. As no base URI is specified, absolute URL detection relies on the HTML including a <base href> tag. Parameters: html - HTML to parse Returns: sane HTML See Also: parse(String, String) connect public static Connection connect​(String url) Creates a new Connection to a URL. Use to fetch and parse a HTML page. Use examples: Document doc = Jsoup.connect("http://example.com").userAgent("Mozilla").data("name", "jsoup").get(); Document doc = Jsoup.connect("http://example.com").cookie("auth", "token").post(); Parameters: url - URL to connect to. The protocol must be http or https. Returns: the connection. You can add data, cookies, and headers; set the user-agent, referrer, method; and then execute. parse public static Document parse​(File in, String charsetName, String baseUri) throws IOException Parse the contents of a file as HTML. Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parse public static Document parse​(File in, String charsetName) throws IOException Parse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs. Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. See Also: parse(File, String, String) parse public static Document parse​(InputStream in, String charsetName, String baseUri) throws IOException Read an input stream, and parse it to a Document. Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parse public static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException Read an input stream, and parse it to a Document. You can provide an alternate parser, such as a simple XML (non-HTML) parser. Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. parser - alternate parser to use. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parseBodyFragment public static Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Parameters: bodyHtml - body HTML fragment baseUri - URL to resolve relative URLs against. Returns: sane HTML document See Also: Document.body() parseBodyFragment public static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Parameters: bodyHtml - body HTML fragment Returns: sane HTML document See Also: Document.body() parse public static Document parse​(URL url, int timeoutMillis) throws IOException Fetch a URL, and parse it as HTML. Provided for compatibility; in most cases use connect(String) instead. The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to UTF-8. Parameters: url - URL to fetch (with a GET). The protocol must be http or https. timeoutMillis - Connection and read timeout, in milliseconds. If exceeded, IOException is thrown. Returns: The parsed HTML. Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - if a connection or read error occurs See Also: connect(String) clean public static String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) clean public static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. Parameters: bodyHtml - input untrusted HTML (body fragment) whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) clean public static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. The HTML is treated as a body fragment; it's expected the cleaned HTML will be used within the body of an existing document. If you want to clean full documents, use Cleaner.clean(Document) instead, and add structural tags (html, head, body etc) to the whitelist. Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements outputSettings - document output settings; use to control pretty-printing and entity escape modes Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) isValid public static boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. The input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output. Assumes the HTML is a body fragment (i.e. will be used in an existing HTML document body.) Parameters: bodyHtml - HTML to test whitelist - whitelist to test against Returns: true if no tags or attributes were removed; false otherwise See Also: clean(String, org.jsoup.safety.Whitelist)java.lang.Object org.jsoup.Jsoupjava.lang.Objectjava.lang.Objectorg.jsoup.Jsouporg.jsoup.Jsouporg.jsoup.Jsouppublic class Jsoup extends Object The core public access point to the jsoup functionality. Author: Jonathan Hedleypublic class Jsoup extends Object The core public access point to the jsoup functionality. Author: Jonathan Hedleypublic class Jsoup extends Object The core public access point to the jsoup functionality. Author: Jonathan Hedleypublic class Jsoup extends ObjectJsoupObjectThe core public access point to the jsoup functionality.Author: Jonathan HedleyAuthor:Author:Jonathan HedleyMethod Summary All Methods Static Methods Concrete Methods Modifier and Type Method Description static String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static Connection connect​(String url) Creates a new Connection to a URL. static boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist. static Document parse​(File in, String charsetName) Parse the contents of a file as HTML. static Document parse​(File in, String charsetName, String baseUri) Parse the contents of a file as HTML. static Document parse​(InputStream in, String charsetName, String baseUri) Read an input stream, and parse it to a Document. static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) Read an input stream, and parse it to a Document. static Document parse​(String html) Parse HTML into a Document. static Document parse​(String html, String baseUri) Parse HTML into a Document. static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser. static Document parse​(URL url, int timeoutMillis) Fetch a URL, and parse it as HTML. static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. static Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, waitMethod Summary All Methods Static Methods Concrete Methods Modifier and Type Method Description static String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static Connection connect​(String url) Creates a new Connection to a URL. static boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist. static Document parse​(File in, String charsetName) Parse the contents of a file as HTML. static Document parse​(File in, String charsetName, String baseUri) Parse the contents of a file as HTML. static Document parse​(InputStream in, String charsetName, String baseUri) Read an input stream, and parse it to a Document. static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) Read an input stream, and parse it to a Document. static Document parse​(String html) Parse HTML into a Document. static Document parse​(String html, String baseUri) Parse HTML into a Document. static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser. static Document parse​(URL url, int timeoutMillis) Fetch a URL, and parse it as HTML. static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. static Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, waitMethod Summary All Methods Static Methods Concrete Methods Modifier and Type Method Description static String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static Connection connect​(String url) Creates a new Connection to a URL. static boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist. static Document parse​(File in, String charsetName) Parse the contents of a file as HTML. static Document parse​(File in, String charsetName, String baseUri) Parse the contents of a file as HTML. static Document parse​(InputStream in, String charsetName, String baseUri) Read an input stream, and parse it to a Document. static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) Read an input stream, and parse it to a Document. static Document parse​(String html) Parse HTML into a Document. static Document parse​(String html, String baseUri) Parse HTML into a Document. static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser. static Document parse​(URL url, int timeoutMillis) Fetch a URL, and parse it as HTML. static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. static Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, waitMethod Summary All Methods Static Methods Concrete Methods Modifier and Type Method Description static String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static Connection connect​(String url) Creates a new Connection to a URL. static boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist. static Document parse​(File in, String charsetName) Parse the contents of a file as HTML. static Document parse​(File in, String charsetName, String baseUri) Parse the contents of a file as HTML. static Document parse​(InputStream in, String charsetName, String baseUri) Read an input stream, and parse it to a Document. static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) Read an input stream, and parse it to a Document. static Document parse​(String html) Parse HTML into a Document. static Document parse​(String html, String baseUri) Parse HTML into a Document. static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser. static Document parse​(URL url, int timeoutMillis) Fetch a URL, and parse it as HTML. static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. static Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, waitMethod Summary All Methods Static Methods Concrete Methods Modifier and Type Method Description static String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static Connection connect​(String url) Creates a new Connection to a URL. static boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist. static Document parse​(File in, String charsetName) Parse the contents of a file as HTML. static Document parse​(File in, String charsetName, String baseUri) Parse the contents of a file as HTML. static Document parse​(InputStream in, String charsetName, String baseUri) Read an input stream, and parse it to a Document. static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) Read an input stream, and parse it to a Document. static Document parse​(String html) Parse HTML into a Document. static Document parse​(String html, String baseUri) Parse HTML into a Document. static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser. static Document parse​(URL url, int timeoutMillis) Fetch a URL, and parse it as HTML. static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. static Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, waitMethod SummaryAll Methods Static Methods Concrete Methods Modifier and Type Method Description static String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static Connection connect​(String url) Creates a new Connection to a URL. static boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist. static Document parse​(File in, String charsetName) Parse the contents of a file as HTML. static Document parse​(File in, String charsetName, String baseUri) Parse the contents of a file as HTML. static Document parse​(InputStream in, String charsetName, String baseUri) Read an input stream, and parse it to a Document. static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) Read an input stream, and parse it to a Document. static Document parse​(String html) Parse HTML into a Document. static Document parse​(String html, String baseUri) Parse HTML into a Document. static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser. static Document parse​(URL url, int timeoutMillis) Fetch a URL, and parse it as HTML. static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. static Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML.All Methods Static Methods Concrete MethodsAll MethodsAll MethodsStatic MethodsStatic MethodsStatic MethodsConcrete MethodsConcrete MethodsConcrete MethodsModifier and Type Method Description static String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. static Connection connect​(String url) Creates a new Connection to a URL. static boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist. static Document parse​(File in, String charsetName) Parse the contents of a file as HTML. static Document parse​(File in, String charsetName, String baseUri) Parse the contents of a file as HTML. static Document parse​(InputStream in, String charsetName, String baseUri) Read an input stream, and parse it to a Document. static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) Read an input stream, and parse it to a Document. static Document parse​(String html) Parse HTML into a Document. static Document parse​(String html, String baseUri) Parse HTML into a Document. static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser. static Document parse​(URL url, int timeoutMillis) Fetch a URL, and parse it as HTML. static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. static Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML.Modifier and Type Method DescriptionModifier and TypeMethodDescriptionstatic String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.static Stringstatic StringStringclean​(String bodyHtml, String baseUri, Whitelist whitelist)clean​(String bodyHtml, String baseUri, Whitelist whitelist)cleancleanStringStringWhitelistGet safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.static Stringstatic StringStringclean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings)clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings)cleancleanStringStringWhitelistDocument.OutputSettingsGet safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.static Stringstatic StringStringclean​(String bodyHtml, Whitelist whitelist)clean​(String bodyHtml, Whitelist whitelist)cleancleanStringWhitelistGet safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.static Connection connect​(String url) Creates a new Connection to a URL.static Connectionstatic ConnectionConnectionconnect​(String url)connect​(String url)connectconnectStringCreates a new Connection to a URL.Creates a new Connection to a URL.ConnectionConnectionstatic boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist.static booleanstatic booleanisValid​(String bodyHtml, Whitelist whitelist)isValid​(String bodyHtml, Whitelist whitelist)isValidisValidStringWhitelistTest if the input body HTML has only tags and attributes allowed by the Whitelist.Test if the input body HTML has only tags and attributes allowed by the Whitelist.static Document parse​(File in, String charsetName) Parse the contents of a file as HTML.static Documentstatic DocumentDocumentparse​(File in, String charsetName)parse​(File in, String charsetName)parseparseFileStringParse the contents of a file as HTML.Parse the contents of a file as HTML.static Document parse​(File in, String charsetName, String baseUri) Parse the contents of a file as HTML.static Documentstatic DocumentDocumentparse​(File in, String charsetName, String baseUri)parse​(File in, String charsetName, String baseUri)parseparseFileStringStringParse the contents of a file as HTML.Parse the contents of a file as HTML.static Document parse​(InputStream in, String charsetName, String baseUri) Read an input stream, and parse it to a Document.static Documentstatic DocumentDocumentparse​(InputStream in, String charsetName, String baseUri)parse​(InputStream in, String charsetName, String baseUri)parseparseInputStreamStringStringRead an input stream, and parse it to a Document.Read an input stream, and parse it to a Document.static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) Read an input stream, and parse it to a Document.static Documentstatic DocumentDocumentparse​(InputStream in, String charsetName, String baseUri, Parser parser)parse​(InputStream in, String charsetName, String baseUri, Parser parser)parseparseInputStreamStringStringParserRead an input stream, and parse it to a Document.Read an input stream, and parse it to a Document.static Document parse​(String html) Parse HTML into a Document.static Documentstatic DocumentDocumentparse​(String html)parse​(String html)parseparseStringParse HTML into a Document.Parse HTML into a Document.static Document parse​(String html, String baseUri) Parse HTML into a Document.static Documentstatic DocumentDocumentparse​(String html, String baseUri)parse​(String html, String baseUri)parseparseStringStringParse HTML into a Document.Parse HTML into a Document.static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser.static Documentstatic DocumentDocumentparse​(String html, String baseUri, Parser parser)parse​(String html, String baseUri, Parser parser)parseparseStringStringParserParse HTML into a Document, using the provided Parser.Parse HTML into a Document, using the provided Parser.static Document parse​(URL url, int timeoutMillis) Fetch a URL, and parse it as HTML.static Documentstatic DocumentDocumentparse​(URL url, int timeoutMillis)parse​(URL url, int timeoutMillis)parseparseURLFetch a URL, and parse it as HTML.Fetch a URL, and parse it as HTML.static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML.static Documentstatic DocumentDocumentparseBodyFragment​(String bodyHtml)parseBodyFragment​(String bodyHtml)parseBodyFragmentparseBodyFragmentStringParse a fragment of HTML, with the assumption that it forms the body of the HTML.Parse a fragment of HTML, with the assumption that it forms the body of the HTML.bodystatic Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML.static Documentstatic DocumentDocumentparseBodyFragment​(String bodyHtml, String baseUri)parseBodyFragment​(String bodyHtml, String baseUri)parseBodyFragmentparseBodyFragmentStringStringParse a fragment of HTML, with the assumption that it forms the body of the HTML.Parse a fragment of HTML, with the assumption that it forms the body of the HTML.bodyMethods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, waitMethods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, waitMethods inherited from class java.lang.ObjectObjectclone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, waitcloneequalsfinalizegetClasshashCodenotifynotifyAlltoStringwaitwaitwaitMethod Detail parse public static Document parse​(String html, String baseUri) Parse HTML into a Document. The parser will make a sensible, balanced document tree out of any HTML. Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. Returns: sane HTML parse public static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser. You can provide an alternate parser, such as a simple XML (non-HTML) parser. Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. parser - alternate parser to use. Returns: sane HTML parse public static Document parse​(String html) Parse HTML into a Document. As no base URI is specified, absolute URL detection relies on the HTML including a <base href> tag. Parameters: html - HTML to parse Returns: sane HTML See Also: parse(String, String) connect public static Connection connect​(String url) Creates a new Connection to a URL. Use to fetch and parse a HTML page. Use examples: Document doc = Jsoup.connect("http://example.com").userAgent("Mozilla").data("name", "jsoup").get(); Document doc = Jsoup.connect("http://example.com").cookie("auth", "token").post(); Parameters: url - URL to connect to. The protocol must be http or https. Returns: the connection. You can add data, cookies, and headers; set the user-agent, referrer, method; and then execute. parse public static Document parse​(File in, String charsetName, String baseUri) throws IOException Parse the contents of a file as HTML. Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parse public static Document parse​(File in, String charsetName) throws IOException Parse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs. Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. See Also: parse(File, String, String) parse public static Document parse​(InputStream in, String charsetName, String baseUri) throws IOException Read an input stream, and parse it to a Document. Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parse public static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException Read an input stream, and parse it to a Document. You can provide an alternate parser, such as a simple XML (non-HTML) parser. Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. parser - alternate parser to use. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parseBodyFragment public static Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Parameters: bodyHtml - body HTML fragment baseUri - URL to resolve relative URLs against. Returns: sane HTML document See Also: Document.body() parseBodyFragment public static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Parameters: bodyHtml - body HTML fragment Returns: sane HTML document See Also: Document.body() parse public static Document parse​(URL url, int timeoutMillis) throws IOException Fetch a URL, and parse it as HTML. Provided for compatibility; in most cases use connect(String) instead. The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to UTF-8. Parameters: url - URL to fetch (with a GET). The protocol must be http or https. timeoutMillis - Connection and read timeout, in milliseconds. If exceeded, IOException is thrown. Returns: The parsed HTML. Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - if a connection or read error occurs See Also: connect(String) clean public static String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) clean public static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. Parameters: bodyHtml - input untrusted HTML (body fragment) whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) clean public static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. The HTML is treated as a body fragment; it's expected the cleaned HTML will be used within the body of an existing document. If you want to clean full documents, use Cleaner.clean(Document) instead, and add structural tags (html, head, body etc) to the whitelist. Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements outputSettings - document output settings; use to control pretty-printing and entity escape modes Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) isValid public static boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. The input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output. Assumes the HTML is a body fragment (i.e. will be used in an existing HTML document body.) Parameters: bodyHtml - HTML to test whitelist - whitelist to test against Returns: true if no tags or attributes were removed; false otherwise See Also: clean(String, org.jsoup.safety.Whitelist)Method Detail parse public static Document parse​(String html, String baseUri) Parse HTML into a Document. The parser will make a sensible, balanced document tree out of any HTML. Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. Returns: sane HTML parse public static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser. You can provide an alternate parser, such as a simple XML (non-HTML) parser. Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. parser - alternate parser to use. Returns: sane HTML parse public static Document parse​(String html) Parse HTML into a Document. As no base URI is specified, absolute URL detection relies on the HTML including a <base href> tag. Parameters: html - HTML to parse Returns: sane HTML See Also: parse(String, String) connect public static Connection connect​(String url) Creates a new Connection to a URL. Use to fetch and parse a HTML page. Use examples: Document doc = Jsoup.connect("http://example.com").userAgent("Mozilla").data("name", "jsoup").get(); Document doc = Jsoup.connect("http://example.com").cookie("auth", "token").post(); Parameters: url - URL to connect to. The protocol must be http or https. Returns: the connection. You can add data, cookies, and headers; set the user-agent, referrer, method; and then execute. parse public static Document parse​(File in, String charsetName, String baseUri) throws IOException Parse the contents of a file as HTML. Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parse public static Document parse​(File in, String charsetName) throws IOException Parse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs. Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. See Also: parse(File, String, String) parse public static Document parse​(InputStream in, String charsetName, String baseUri) throws IOException Read an input stream, and parse it to a Document. Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parse public static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException Read an input stream, and parse it to a Document. You can provide an alternate parser, such as a simple XML (non-HTML) parser. Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. parser - alternate parser to use. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parseBodyFragment public static Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Parameters: bodyHtml - body HTML fragment baseUri - URL to resolve relative URLs against. Returns: sane HTML document See Also: Document.body() parseBodyFragment public static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Parameters: bodyHtml - body HTML fragment Returns: sane HTML document See Also: Document.body() parse public static Document parse​(URL url, int timeoutMillis) throws IOException Fetch a URL, and parse it as HTML. Provided for compatibility; in most cases use connect(String) instead. The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to UTF-8. Parameters: url - URL to fetch (with a GET). The protocol must be http or https. timeoutMillis - Connection and read timeout, in milliseconds. If exceeded, IOException is thrown. Returns: The parsed HTML. Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - if a connection or read error occurs See Also: connect(String) clean public static String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) clean public static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. Parameters: bodyHtml - input untrusted HTML (body fragment) whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) clean public static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. The HTML is treated as a body fragment; it's expected the cleaned HTML will be used within the body of an existing document. If you want to clean full documents, use Cleaner.clean(Document) instead, and add structural tags (html, head, body etc) to the whitelist. Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements outputSettings - document output settings; use to control pretty-printing and entity escape modes Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) isValid public static boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. The input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output. Assumes the HTML is a body fragment (i.e. will be used in an existing HTML document body.) Parameters: bodyHtml - HTML to test whitelist - whitelist to test against Returns: true if no tags or attributes were removed; false otherwise See Also: clean(String, org.jsoup.safety.Whitelist)Method Detail parse public static Document parse​(String html, String baseUri) Parse HTML into a Document. The parser will make a sensible, balanced document tree out of any HTML. Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. Returns: sane HTML parse public static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser. You can provide an alternate parser, such as a simple XML (non-HTML) parser. Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. parser - alternate parser to use. Returns: sane HTML parse public static Document parse​(String html) Parse HTML into a Document. As no base URI is specified, absolute URL detection relies on the HTML including a <base href> tag. Parameters: html - HTML to parse Returns: sane HTML See Also: parse(String, String) connect public static Connection connect​(String url) Creates a new Connection to a URL. Use to fetch and parse a HTML page. Use examples: Document doc = Jsoup.connect("http://example.com").userAgent("Mozilla").data("name", "jsoup").get(); Document doc = Jsoup.connect("http://example.com").cookie("auth", "token").post(); Parameters: url - URL to connect to. The protocol must be http or https. Returns: the connection. You can add data, cookies, and headers; set the user-agent, referrer, method; and then execute. parse public static Document parse​(File in, String charsetName, String baseUri) throws IOException Parse the contents of a file as HTML. Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parse public static Document parse​(File in, String charsetName) throws IOException Parse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs. Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. See Also: parse(File, String, String) parse public static Document parse​(InputStream in, String charsetName, String baseUri) throws IOException Read an input stream, and parse it to a Document. Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parse public static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException Read an input stream, and parse it to a Document. You can provide an alternate parser, such as a simple XML (non-HTML) parser. Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. parser - alternate parser to use. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parseBodyFragment public static Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Parameters: bodyHtml - body HTML fragment baseUri - URL to resolve relative URLs against. Returns: sane HTML document See Also: Document.body() parseBodyFragment public static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Parameters: bodyHtml - body HTML fragment Returns: sane HTML document See Also: Document.body() parse public static Document parse​(URL url, int timeoutMillis) throws IOException Fetch a URL, and parse it as HTML. Provided for compatibility; in most cases use connect(String) instead. The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to UTF-8. Parameters: url - URL to fetch (with a GET). The protocol must be http or https. timeoutMillis - Connection and read timeout, in milliseconds. If exceeded, IOException is thrown. Returns: The parsed HTML. Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - if a connection or read error occurs See Also: connect(String) clean public static String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) clean public static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. Parameters: bodyHtml - input untrusted HTML (body fragment) whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) clean public static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. The HTML is treated as a body fragment; it's expected the cleaned HTML will be used within the body of an existing document. If you want to clean full documents, use Cleaner.clean(Document) instead, and add structural tags (html, head, body etc) to the whitelist. Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements outputSettings - document output settings; use to control pretty-printing and entity escape modes Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) isValid public static boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. The input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output. Assumes the HTML is a body fragment (i.e. will be used in an existing HTML document body.) Parameters: bodyHtml - HTML to test whitelist - whitelist to test against Returns: true if no tags or attributes were removed; false otherwise See Also: clean(String, org.jsoup.safety.Whitelist)Method Detail parse public static Document parse​(String html, String baseUri) Parse HTML into a Document. The parser will make a sensible, balanced document tree out of any HTML. Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. Returns: sane HTML parse public static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser. You can provide an alternate parser, such as a simple XML (non-HTML) parser. Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. parser - alternate parser to use. Returns: sane HTML parse public static Document parse​(String html) Parse HTML into a Document. As no base URI is specified, absolute URL detection relies on the HTML including a <base href> tag. Parameters: html - HTML to parse Returns: sane HTML See Also: parse(String, String) connect public static Connection connect​(String url) Creates a new Connection to a URL. Use to fetch and parse a HTML page. Use examples: Document doc = Jsoup.connect("http://example.com").userAgent("Mozilla").data("name", "jsoup").get(); Document doc = Jsoup.connect("http://example.com").cookie("auth", "token").post(); Parameters: url - URL to connect to. The protocol must be http or https. Returns: the connection. You can add data, cookies, and headers; set the user-agent, referrer, method; and then execute. parse public static Document parse​(File in, String charsetName, String baseUri) throws IOException Parse the contents of a file as HTML. Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parse public static Document parse​(File in, String charsetName) throws IOException Parse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs. Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. See Also: parse(File, String, String) parse public static Document parse​(InputStream in, String charsetName, String baseUri) throws IOException Read an input stream, and parse it to a Document. Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parse public static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException Read an input stream, and parse it to a Document. You can provide an alternate parser, such as a simple XML (non-HTML) parser. Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. parser - alternate parser to use. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parseBodyFragment public static Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Parameters: bodyHtml - body HTML fragment baseUri - URL to resolve relative URLs against. Returns: sane HTML document See Also: Document.body() parseBodyFragment public static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Parameters: bodyHtml - body HTML fragment Returns: sane HTML document See Also: Document.body() parse public static Document parse​(URL url, int timeoutMillis) throws IOException Fetch a URL, and parse it as HTML. Provided for compatibility; in most cases use connect(String) instead. The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to UTF-8. Parameters: url - URL to fetch (with a GET). The protocol must be http or https. timeoutMillis - Connection and read timeout, in milliseconds. If exceeded, IOException is thrown. Returns: The parsed HTML. Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - if a connection or read error occurs See Also: connect(String) clean public static String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) clean public static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. Parameters: bodyHtml - input untrusted HTML (body fragment) whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) clean public static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. The HTML is treated as a body fragment; it's expected the cleaned HTML will be used within the body of an existing document. If you want to clean full documents, use Cleaner.clean(Document) instead, and add structural tags (html, head, body etc) to the whitelist. Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements outputSettings - document output settings; use to control pretty-printing and entity escape modes Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) isValid public static boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. The input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output. Assumes the HTML is a body fragment (i.e. will be used in an existing HTML document body.) Parameters: bodyHtml - HTML to test whitelist - whitelist to test against Returns: true if no tags or attributes were removed; false otherwise See Also: clean(String, org.jsoup.safety.Whitelist)Method Detail parse public static Document parse​(String html, String baseUri) Parse HTML into a Document. The parser will make a sensible, balanced document tree out of any HTML. Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. Returns: sane HTML parse public static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser. You can provide an alternate parser, such as a simple XML (non-HTML) parser. Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. parser - alternate parser to use. Returns: sane HTML parse public static Document parse​(String html) Parse HTML into a Document. As no base URI is specified, absolute URL detection relies on the HTML including a <base href> tag. Parameters: html - HTML to parse Returns: sane HTML See Also: parse(String, String) connect public static Connection connect​(String url) Creates a new Connection to a URL. Use to fetch and parse a HTML page. Use examples: Document doc = Jsoup.connect("http://example.com").userAgent("Mozilla").data("name", "jsoup").get(); Document doc = Jsoup.connect("http://example.com").cookie("auth", "token").post(); Parameters: url - URL to connect to. The protocol must be http or https. Returns: the connection. You can add data, cookies, and headers; set the user-agent, referrer, method; and then execute. parse public static Document parse​(File in, String charsetName, String baseUri) throws IOException Parse the contents of a file as HTML. Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parse public static Document parse​(File in, String charsetName) throws IOException Parse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs. Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. See Also: parse(File, String, String) parse public static Document parse​(InputStream in, String charsetName, String baseUri) throws IOException Read an input stream, and parse it to a Document. Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parse public static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException Read an input stream, and parse it to a Document. You can provide an alternate parser, such as a simple XML (non-HTML) parser. Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. parser - alternate parser to use. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. parseBodyFragment public static Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Parameters: bodyHtml - body HTML fragment baseUri - URL to resolve relative URLs against. Returns: sane HTML document See Also: Document.body() parseBodyFragment public static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Parameters: bodyHtml - body HTML fragment Returns: sane HTML document See Also: Document.body() parse public static Document parse​(URL url, int timeoutMillis) throws IOException Fetch a URL, and parse it as HTML. Provided for compatibility; in most cases use connect(String) instead. The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to UTF-8. Parameters: url - URL to fetch (with a GET). The protocol must be http or https. timeoutMillis - Connection and read timeout, in milliseconds. If exceeded, IOException is thrown. Returns: The parsed HTML. Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - if a connection or read error occurs See Also: connect(String) clean public static String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) clean public static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. Parameters: bodyHtml - input untrusted HTML (body fragment) whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) clean public static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. The HTML is treated as a body fragment; it's expected the cleaned HTML will be used within the body of an existing document. If you want to clean full documents, use Cleaner.clean(Document) instead, and add structural tags (html, head, body etc) to the whitelist. Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements outputSettings - document output settings; use to control pretty-printing and entity escape modes Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document) isValid public static boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. The input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output. Assumes the HTML is a body fragment (i.e. will be used in an existing HTML document body.) Parameters: bodyHtml - HTML to test whitelist - whitelist to test against Returns: true if no tags or attributes were removed; false otherwise See Also: clean(String, org.jsoup.safety.Whitelist)Method Detailparse public static Document parse​(String html, String baseUri) Parse HTML into a Document. The parser will make a sensible, balanced document tree out of any HTML. Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. Returns: sane HTMLparse public static Document parse​(String html, String baseUri) Parse HTML into a Document. The parser will make a sensible, balanced document tree out of any HTML. Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. Returns: sane HTMLparsepublic static Document parse​(String html, String baseUri)DocumentStringStringParse HTML into a Document. The parser will make a sensible, balanced document tree out of any HTML.Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. Returns: sane HTMLParameters:Parameters:html - HTML to parsehtmlbaseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag.baseUri<base href>Returns:Returns:sane HTMLparse public static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser. You can provide an alternate parser, such as a simple XML (non-HTML) parser. Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. parser - alternate parser to use. Returns: sane HTMLparse public static Document parse​(String html, String baseUri, Parser parser) Parse HTML into a Document, using the provided Parser. You can provide an alternate parser, such as a simple XML (non-HTML) parser. Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. parser - alternate parser to use. Returns: sane HTMLparsepublic static Document parse​(String html, String baseUri, Parser parser)DocumentStringStringParserParse HTML into a Document, using the provided Parser. You can provide an alternate parser, such as a simple XML (non-HTML) parser.Parameters: html - HTML to parse baseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag. parser - alternate parser to use. Returns: sane HTMLParameters:Parameters:html - HTML to parsehtmlbaseUri - The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur before the HTML declares a <base href> tag.baseUri<base href>parser - alternate parser to use.parserparserparserReturns:Returns:sane HTMLparse public static Document parse​(String html) Parse HTML into a Document. As no base URI is specified, absolute URL detection relies on the HTML including a <base href> tag. Parameters: html - HTML to parse Returns: sane HTML See Also: parse(String, String)parse public static Document parse​(String html) Parse HTML into a Document. As no base URI is specified, absolute URL detection relies on the HTML including a <base href> tag. Parameters: html - HTML to parse Returns: sane HTML See Also: parse(String, String)parsepublic static Document parse​(String html)DocumentStringParse HTML into a Document. As no base URI is specified, absolute URL detection relies on the HTML including a <base href> tag.<base href>Parameters: html - HTML to parse Returns: sane HTML See Also: parse(String, String)Parameters:Parameters:html - HTML to parsehtmlReturns:Returns:sane HTMLSee Also:See Also:parse(String, String)parse(String, String)parse(String, String)connect public static Connection connect​(String url) Creates a new Connection to a URL. Use to fetch and parse a HTML page. Use examples: Document doc = Jsoup.connect("http://example.com").userAgent("Mozilla").data("name", "jsoup").get(); Document doc = Jsoup.connect("http://example.com").cookie("auth", "token").post(); Parameters: url - URL to connect to. The protocol must be http or https. Returns: the connection. You can add data, cookies, and headers; set the user-agent, referrer, method; and then execute.connect public static Connection connect​(String url) Creates a new Connection to a URL. Use to fetch and parse a HTML page. Use examples: Document doc = Jsoup.connect("http://example.com").userAgent("Mozilla").data("name", "jsoup").get(); Document doc = Jsoup.connect("http://example.com").cookie("auth", "token").post(); Parameters: url - URL to connect to. The protocol must be http or https. Returns: the connection. You can add data, cookies, and headers; set the user-agent, referrer, method; and then execute.connectpublic static Connection connect​(String url)ConnectionStringCreates a new Connection to a URL. Use to fetch and parse a HTML page. Use examples: Document doc = Jsoup.connect("http://example.com").userAgent("Mozilla").data("name", "jsoup").get(); Document doc = Jsoup.connect("http://example.com").cookie("auth", "token").post();ConnectionConnectionUse examples:Document doc = Jsoup.connect("http://example.com").userAgent("Mozilla").data("name", "jsoup").get(); Document doc = Jsoup.connect("http://example.com").cookie("auth", "token").post();Document doc = Jsoup.connect("http://example.com").userAgent("Mozilla").data("name", "jsoup").get();Document doc = Jsoup.connect("http://example.com").userAgent("Mozilla").data("name", "jsoup").get();Document doc = Jsoup.connect("http://example.com").cookie("auth", "token").post();Document doc = Jsoup.connect("http://example.com").cookie("auth", "token").post();Parameters: url - URL to connect to. The protocol must be http or https. Returns: the connection. You can add data, cookies, and headers; set the user-agent, referrer, method; and then execute.Parameters:Parameters:url - URL to connect to. The protocol must be http or https.urlhttphttpsReturns:Returns:the connection. You can add data, cookies, and headers; set the user-agent, referrer, method; and then execute.parse public static Document parse​(File in, String charsetName, String baseUri) throws IOException Parse the contents of a file as HTML. Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid.parse public static Document parse​(File in, String charsetName, String baseUri) throws IOException Parse the contents of a file as HTML. Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid.parsepublic static Document parse​(File in, String charsetName, String baseUri) throws IOExceptionDocumentFileStringStringIOExceptionParse the contents of a file as HTML.Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid.Parameters:Parameters:in - file to load HTML fromincharsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do).charsetNamenullhttp-equivUTF-8baseUri - The URL where the HTML was retrieved from, to resolve relative links against.baseUriReturns:Returns:sane HTMLThrows:Throws:IOException - if the file could not be found, or read, or if the charsetName is invalid.IOExceptionIOExceptionparse public static Document parse​(File in, String charsetName) throws IOException Parse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs. Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. See Also: parse(File, String, String)parse public static Document parse​(File in, String charsetName) throws IOException Parse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs. Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. See Also: parse(File, String, String)parsepublic static Document parse​(File in, String charsetName) throws IOExceptionDocumentFileStringIOExceptionParse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs.Parameters: in - file to load HTML from charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid. See Also: parse(File, String, String)Parameters:Parameters:in - file to load HTML fromincharsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do).charsetNamenullhttp-equivUTF-8Returns:Returns:sane HTMLThrows:Throws:IOException - if the file could not be found, or read, or if the charsetName is invalid.IOExceptionIOExceptionSee Also:See Also:parse(File, String, String)parse(File, String, String)parse(File, String, String)parse public static Document parse​(InputStream in, String charsetName, String baseUri) throws IOException Read an input stream, and parse it to a Document. Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid.parse public static Document parse​(InputStream in, String charsetName, String baseUri) throws IOException Read an input stream, and parse it to a Document. Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid.parsepublic static Document parse​(InputStream in, String charsetName, String baseUri) throws IOExceptionDocumentInputStreamStringStringIOExceptionRead an input stream, and parse it to a Document.Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid.Parameters:Parameters:in - input stream to read. Make sure to close it after parsing.incharsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do).charsetNamenullhttp-equivUTF-8baseUri - The URL where the HTML was retrieved from, to resolve relative links against.baseUriReturns:Returns:sane HTMLThrows:Throws:IOException - if the file could not be found, or read, or if the charsetName is invalid.IOExceptionIOExceptionparse public static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException Read an input stream, and parse it to a Document. You can provide an alternate parser, such as a simple XML (non-HTML) parser. Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. parser - alternate parser to use. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid.parse public static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException Read an input stream, and parse it to a Document. You can provide an alternate parser, such as a simple XML (non-HTML) parser. Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. parser - alternate parser to use. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid.parsepublic static Document parse​(InputStream in, String charsetName, String baseUri, Parser parser) throws IOExceptionDocumentInputStreamStringStringParserIOExceptionRead an input stream, and parse it to a Document. You can provide an alternate parser, such as a simple XML (non-HTML) parser.Parameters: in - input stream to read. Make sure to close it after parsing. charsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do). baseUri - The URL where the HTML was retrieved from, to resolve relative links against. parser - alternate parser to use. Returns: sane HTML Throws: IOException - if the file could not be found, or read, or if the charsetName is invalid.Parameters:Parameters:in - input stream to read. Make sure to close it after parsing.incharsetName - (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if present, or fall back to UTF-8 (which is often safe to do).charsetNamenullhttp-equivUTF-8baseUri - The URL where the HTML was retrieved from, to resolve relative links against.baseUriparser - alternate parser to use.parserparserparserReturns:Returns:sane HTMLThrows:Throws:IOException - if the file could not be found, or read, or if the charsetName is invalid.IOExceptionIOExceptionparseBodyFragment public static Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Parameters: bodyHtml - body HTML fragment baseUri - URL to resolve relative URLs against. Returns: sane HTML document See Also: Document.body()parseBodyFragment public static Document parseBodyFragment​(String bodyHtml, String baseUri) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Parameters: bodyHtml - body HTML fragment baseUri - URL to resolve relative URLs against. Returns: sane HTML document See Also: Document.body()parseBodyFragmentpublic static Document parseBodyFragment​(String bodyHtml, String baseUri)DocumentStringStringParse a fragment of HTML, with the assumption that it forms the body of the HTML.bodyParameters: bodyHtml - body HTML fragment baseUri - URL to resolve relative URLs against. Returns: sane HTML document See Also: Document.body()Parameters:Parameters:bodyHtml - body HTML fragmentbodyHtmlbaseUri - URL to resolve relative URLs against.baseUriReturns:Returns:sane HTML documentSee Also:See Also:Document.body()Document.body()Document.body()parseBodyFragment public static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Parameters: bodyHtml - body HTML fragment Returns: sane HTML document See Also: Document.body()parseBodyFragment public static Document parseBodyFragment​(String bodyHtml) Parse a fragment of HTML, with the assumption that it forms the body of the HTML. Parameters: bodyHtml - body HTML fragment Returns: sane HTML document See Also: Document.body()parseBodyFragmentpublic static Document parseBodyFragment​(String bodyHtml)DocumentStringParse a fragment of HTML, with the assumption that it forms the body of the HTML.bodyParameters: bodyHtml - body HTML fragment Returns: sane HTML document See Also: Document.body()Parameters:Parameters:bodyHtml - body HTML fragmentbodyHtmlReturns:Returns:sane HTML documentSee Also:See Also:Document.body()Document.body()Document.body()parse public static Document parse​(URL url, int timeoutMillis) throws IOException Fetch a URL, and parse it as HTML. Provided for compatibility; in most cases use connect(String) instead. The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to UTF-8. Parameters: url - URL to fetch (with a GET). The protocol must be http or https. timeoutMillis - Connection and read timeout, in milliseconds. If exceeded, IOException is thrown. Returns: The parsed HTML. Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - if a connection or read error occurs See Also: connect(String)parse public static Document parse​(URL url, int timeoutMillis) throws IOException Fetch a URL, and parse it as HTML. Provided for compatibility; in most cases use connect(String) instead. The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to UTF-8. Parameters: url - URL to fetch (with a GET). The protocol must be http or https. timeoutMillis - Connection and read timeout, in milliseconds. If exceeded, IOException is thrown. Returns: The parsed HTML. Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - if a connection or read error occurs See Also: connect(String)parsepublic static Document parse​(URL url, int timeoutMillis) throws IOExceptionDocumentURLIOExceptionFetch a URL, and parse it as HTML. Provided for compatibility; in most cases use connect(String) instead. The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to UTF-8.connect(String)connect(String)The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to UTF-8.UTF-8Parameters: url - URL to fetch (with a GET). The protocol must be http or https. timeoutMillis - Connection and read timeout, in milliseconds. If exceeded, IOException is thrown. Returns: The parsed HTML. Throws: MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed HttpStatusException - if the response is not OK and HTTP response errors are not ignored UnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignored SocketTimeoutException - if the connection times out IOException - if a connection or read error occurs See Also: connect(String)Parameters:Parameters:url - URL to fetch (with a GET). The protocol must be http or https.urlhttphttpstimeoutMillis - Connection and read timeout, in milliseconds. If exceeded, IOException is thrown.timeoutMillisReturns:Returns:The parsed HTML.Throws:Throws:MalformedURLException - if the request URL is not a HTTP or HTTPS URL, or is otherwise malformedMalformedURLExceptionMalformedURLExceptionHttpStatusException - if the response is not OK and HTTP response errors are not ignoredHttpStatusExceptionHttpStatusExceptionUnsupportedMimeTypeException - if the response mime type is not supported and those errors are not ignoredUnsupportedMimeTypeExceptionUnsupportedMimeTypeExceptionSocketTimeoutException - if the connection times outSocketTimeoutExceptionSocketTimeoutExceptionIOException - if a connection or read error occursIOExceptionIOExceptionSee Also:See Also:connect(String)connect(String)connect(String)clean public static String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document)clean public static String clean​(String bodyHtml, String baseUri, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document)cleanpublic static String clean​(String bodyHtml, String baseUri, Whitelist whitelist)StringStringStringWhitelistGet safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document)Parameters:Parameters:bodyHtml - input untrusted HTML (body fragment)bodyHtmlbaseUri - URL to resolve relative URLs againstbaseUriwhitelist - white-list of permitted HTML elementswhitelistReturns:Returns:safe HTML (body fragment)See Also:See Also:Cleaner.clean(Document)Cleaner.clean(Document)Cleaner.clean(Document)clean public static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. Parameters: bodyHtml - input untrusted HTML (body fragment) whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document)clean public static String clean​(String bodyHtml, Whitelist whitelist) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. Parameters: bodyHtml - input untrusted HTML (body fragment) whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document)cleanpublic static String clean​(String bodyHtml, Whitelist whitelist)StringStringWhitelistGet safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.Parameters: bodyHtml - input untrusted HTML (body fragment) whitelist - white-list of permitted HTML elements Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document)Parameters:Parameters:bodyHtml - input untrusted HTML (body fragment)bodyHtmlwhitelist - white-list of permitted HTML elementswhitelistReturns:Returns:safe HTML (body fragment)See Also:See Also:Cleaner.clean(Document)Cleaner.clean(Document)Cleaner.clean(Document)clean public static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. The HTML is treated as a body fragment; it's expected the cleaned HTML will be used within the body of an existing document. If you want to clean full documents, use Cleaner.clean(Document) instead, and add structural tags (html, head, body etc) to the whitelist. Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements outputSettings - document output settings; use to control pretty-printing and entity escape modes Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document)clean public static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. The HTML is treated as a body fragment; it's expected the cleaned HTML will be used within the body of an existing document. If you want to clean full documents, use Cleaner.clean(Document) instead, and add structural tags (html, head, body etc) to the whitelist. Parameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements outputSettings - document output settings; use to control pretty-printing and entity escape modes Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document)cleanpublic static String clean​(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings)StringStringStringWhitelistDocument.OutputSettingsGet safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes. The HTML is treated as a body fragment; it's expected the cleaned HTML will be used within the body of an existing document. If you want to clean full documents, use Cleaner.clean(Document) instead, and add structural tags (html, head, body etc) to the whitelist.The HTML is treated as a body fragment; it's expected the cleaned HTML will be used within the body of an existing document. If you want to clean full documents, use Cleaner.clean(Document) instead, and add structural tags (html, head, body etc) to the whitelist.Cleaner.clean(Document)Cleaner.clean(Document)html, head, bodyParameters: bodyHtml - input untrusted HTML (body fragment) baseUri - URL to resolve relative URLs against whitelist - white-list of permitted HTML elements outputSettings - document output settings; use to control pretty-printing and entity escape modes Returns: safe HTML (body fragment) See Also: Cleaner.clean(Document)Parameters:Parameters:bodyHtml - input untrusted HTML (body fragment)bodyHtmlbaseUri - URL to resolve relative URLs againstbaseUriwhitelist - white-list of permitted HTML elementswhitelistoutputSettings - document output settings; use to control pretty-printing and entity escape modesoutputSettingsReturns:Returns:safe HTML (body fragment)See Also:See Also:Cleaner.clean(Document)Cleaner.clean(Document)Cleaner.clean(Document)isValid public static boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. The input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output. Assumes the HTML is a body fragment (i.e. will be used in an existing HTML document body.) Parameters: bodyHtml - HTML to test whitelist - whitelist to test against Returns: true if no tags or attributes were removed; false otherwise See Also: clean(String, org.jsoup.safety.Whitelist)isValid public static boolean isValid​(String bodyHtml, Whitelist whitelist) Test if the input body HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. The input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output. Assumes the HTML is a body fragment (i.e. will be used in an existing HTML document body.) Parameters: bodyHtml - HTML to test whitelist - whitelist to test against Returns: true if no tags or attributes were removed; false otherwise See Also: clean(String, org.jsoup.safety.Whitelist)isValidpublic static boolean isValid​(String bodyHtml, Whitelist whitelist)StringWhitelistTest if the input body HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. The input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output. Assumes the HTML is a body fragment (i.e. will be used in an existing HTML document body.)The input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output.Assumes the HTML is a body fragment (i.e. will be used in an existing HTML document body.)Parameters: bodyHtml - HTML to test whitelist - whitelist to test against Returns: true if no tags or attributes were removed; false otherwise See Also: clean(String, org.jsoup.safety.Whitelist)Parameters:Parameters:bodyHtml - HTML to testbodyHtmlwhitelist - whitelist to test againstwhitelistReturns:Returns:true if no tags or attributes were removed; false otherwiseSee Also:See Also:clean(String, org.jsoup.safety.Whitelist)clean(String, org.jsoup.safety.Whitelist)clean(String, org.jsoup.safety.Whitelist)Skip navigation links Overview Package Class Use Tree Deprecated Index HelpSkip navigation linksSkip navigation linksOverview Package Class Use Tree Deprecated Index HelpOverviewOverviewPackagePackageClassUseUseTreeTreeDeprecatedDeprecatedIndexIndexHelpHelpPrev Class Next Class Frames No Frames All Classes <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodPrev Class Next ClassPrev ClassPrev ClassPrev ClassNext ClassNext ClassNext ClassFrames No FramesFramesFramesNo FramesNo FramesAll ClassesAll ClassesAll Classes<div> JavaScript is disabled on your browser. </div><div> JavaScript is disabled on your browser. </div>Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSummary: Nested | Field | Constr | MethodSummary:Nested |Field |Constr |MethodMethodDetail: Field | Constr | MethodDetail:Field |Constr |MethodMethodCopyright © 2009–2017 Jonathan Hedley. All rights reserved.Copyright © 2009–2017 Jonathan Hedley. All rights reserved.Jonathan Hedley