<div> JavaScript is disabled on your browser. </div> Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | Method Package org.jsoup.parser Class TokenQueue java.lang.Object org.jsoup.parser.TokenQueue public class TokenQueue extends Object A character queue with parsing helpers. Author: Jonathan Hedley Constructor Summary Constructors Constructor Description TokenQueue​(String data) Create a new TokenQueue. Method Summary All Methods Static Methods Instance Methods Concrete Methods Modifier and Type Method Description void addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved). void addFirst​(String seq) Add a string to the start of the queue. void advance​() Drops the next character off the queue. String chompBalanced​(char open, char close) Pulls a balanced string off the queue. String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). String chompToIgnoreCase​(String seq) char consume​() Consume one character off queue. void consume​(String seq) Consumes the supplied sequence of the queue. String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :") String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier String consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects). String consumeTagName​() Consume an tag name off the queue (word or :, _, -) String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out. String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue. String consumeToIgnoreCase​(String seq) boolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue. String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue. boolean isEmpty​() Is the queue empty? boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue. boolean matches​(String seq) Tests if the next characters on the queue match the sequence. boolean matchesAny​(char... seq) boolean matchesAny​(String... seq) Tests if the next characters match any of the sequences. boolean matchesCS​(String seq) Case sensitive match test. boolean matchesStartTag​() boolean matchesWhitespace​() Tests if queue starts with a whitespace character. boolean matchesWord​() Test if the queue matches a word character (letter or digit). char peek​() Retrieves but does not remove the first character from the queue. String remainder​() Consume and return whatever is left on the queue. String toString​() static String unescape​(String in) Unescape a \ escaped string. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait Constructor Detail TokenQueue public TokenQueue​(String data) Create a new TokenQueue. Parameters: data - string of data to back queue. Method Detail isEmpty public boolean isEmpty​() Is the queue empty? Returns: true if no data left in queue. peek public char peek​() Retrieves but does not remove the first character from the queue. Returns: First character, or 0 if empty. addFirst public void addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved). Parameters: c - character to add addFirst public void addFirst​(String seq) Add a string to the start of the queue. Parameters: seq - string to add. matches public boolean matches​(String seq) Tests if the next characters on the queue match the sequence. Case insensitive. Parameters: seq - String to check queue for. Returns: true if the next characters match. matchesCS public boolean matchesCS​(String seq) Case sensitive match test. Parameters: seq - string to case sensitively check for Returns: true if matched, false if not matchesAny public boolean matchesAny​(String... seq) Tests if the next characters match any of the sequences. Case insensitive. Parameters: seq - list of strings to case insensitively check for Returns: true of any matched, false if none did matchesAny public boolean matchesAny​(char... seq) matchesStartTag public boolean matchesStartTag​() matchChomp public boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue. Parameters: seq - String to search for, and if found, remove from queue. Returns: true if found and removed, false if not found. matchesWhitespace public boolean matchesWhitespace​() Tests if queue starts with a whitespace character. Returns: if starts with whitespace matchesWord public boolean matchesWord​() Test if the queue matches a word character (letter or digit). Returns: if matches a word character advance public void advance​() Drops the next character off the queue. consume public char consume​() Consume one character off queue. Returns: first character on queue. consume public void consume​(String seq) Consumes the supplied sequence of the queue. If the queue does not start with the supplied sequence, will throw an illegal state exception -- but you should be running match() against that condition. Case insensitive. Parameters: seq - sequence to remove from head of queue. consumeTo public String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out. Parameters: seq - String to end on (and not include in return, but leave on queue). Case sensitive. Returns: The matched data consumed from queue. consumeToIgnoreCase public String consumeToIgnoreCase​(String seq) consumeToAny public String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue. Leaves the terminator on the queue. Parameters: seq - any number of terminators to consume to. Case insensitive. Returns: consumed string chompTo public String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). If the queue runs out of characters before finding the seq, will return as much as it can (and queue will go isEmpty() == true). Parameters: seq - String to match up to, and not include in return, and to pull off queue. Case sensitive. Returns: Data matched from queue. chompToIgnoreCase public String chompToIgnoreCase​(String seq) chompBalanced public String chompBalanced​(char open, char close) Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three", and leave " four" on the queue. Unbalanced openers and closers can be quoted (with ' or ") or escaped (with \). Those escapes will be left in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for contains text strings; use unescape for that. Parameters: open - opener close - closer Returns: data matched from the queue unescape public static String unescape​(String in) Unescape a \ escaped string. Parameters: in - backslash escaped string Returns: unescaped string consumeWhitespace public boolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue. Returns: Whether consuming whitespace or not consumeWord public String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue. Returns: String of word characters from queue, or empty string if none. consumeTagName public String consumeTagName​() Consume an tag name off the queue (word or :, _, -) Returns: tag name consumeElementSelector public String consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects). Returns: tag name consumeCssIdentifier public String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier Returns: identifier consumeAttributeKey public String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :") Returns: attribute key remainder public String remainder​() Consume and return whatever is left on the queue. Returns: remained of queue. toString public String toString​() Overrides: toString in class Object Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | Method Copyright © 2009–2017 Jonathan Hedley. All rights reserved.<div> JavaScript is disabled on your browser. </div>Skip navigation links Overview Package Class Use Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSkip navigation links Overview Package Class Use Tree Deprecated Index HelpSkip navigation linksSkip navigation linksOverview Package Class Use Tree Deprecated Index HelpOverviewOverviewPackagePackageClassUseUseTreeTreeDeprecatedDeprecatedIndexIndexHelpHelpPrev Class Next Class Frames No Frames All Classes SEARCH: <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodPrev Class Next ClassPrev ClassPrev ClassPrev ClassNext ClassNext ClassNext ClassFrames No FramesFramesFramesNo FramesNo FramesAll ClassesAll ClassesAll ClassesSEARCH:SEARCH:SEARCH:<div> JavaScript is disabled on your browser. </div><div> JavaScript is disabled on your browser. </div>Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSummary: Nested | Field | Constr | MethodSummary:Nested |Field |Constr |ConstrMethodMethodDetail: Field | Constr | MethodDetail:Field |Constr |ConstrMethodMethodPackage org.jsoup.parser Class TokenQueuePackage org.jsoup.parserPackageorg.jsoup.parserClass TokenQueuejava.lang.Object org.jsoup.parser.TokenQueue public class TokenQueue extends Object A character queue with parsing helpers. Author: Jonathan Hedley Constructor Summary Constructors Constructor Description TokenQueue​(String data) Create a new TokenQueue. Method Summary All Methods Static Methods Instance Methods Concrete Methods Modifier and Type Method Description void addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved). void addFirst​(String seq) Add a string to the start of the queue. void advance​() Drops the next character off the queue. String chompBalanced​(char open, char close) Pulls a balanced string off the queue. String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). String chompToIgnoreCase​(String seq) char consume​() Consume one character off queue. void consume​(String seq) Consumes the supplied sequence of the queue. String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :") String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier String consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects). String consumeTagName​() Consume an tag name off the queue (word or :, _, -) String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out. String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue. String consumeToIgnoreCase​(String seq) boolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue. String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue. boolean isEmpty​() Is the queue empty? boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue. boolean matches​(String seq) Tests if the next characters on the queue match the sequence. boolean matchesAny​(char... seq) boolean matchesAny​(String... seq) Tests if the next characters match any of the sequences. boolean matchesCS​(String seq) Case sensitive match test. boolean matchesStartTag​() boolean matchesWhitespace​() Tests if queue starts with a whitespace character. boolean matchesWord​() Test if the queue matches a word character (letter or digit). char peek​() Retrieves but does not remove the first character from the queue. String remainder​() Consume and return whatever is left on the queue. String toString​() static String unescape​(String in) Unescape a \ escaped string. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait Constructor Detail TokenQueue public TokenQueue​(String data) Create a new TokenQueue. Parameters: data - string of data to back queue. Method Detail isEmpty public boolean isEmpty​() Is the queue empty? Returns: true if no data left in queue. peek public char peek​() Retrieves but does not remove the first character from the queue. Returns: First character, or 0 if empty. addFirst public void addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved). Parameters: c - character to add addFirst public void addFirst​(String seq) Add a string to the start of the queue. Parameters: seq - string to add. matches public boolean matches​(String seq) Tests if the next characters on the queue match the sequence. Case insensitive. Parameters: seq - String to check queue for. Returns: true if the next characters match. matchesCS public boolean matchesCS​(String seq) Case sensitive match test. Parameters: seq - string to case sensitively check for Returns: true if matched, false if not matchesAny public boolean matchesAny​(String... seq) Tests if the next characters match any of the sequences. Case insensitive. Parameters: seq - list of strings to case insensitively check for Returns: true of any matched, false if none did matchesAny public boolean matchesAny​(char... seq) matchesStartTag public boolean matchesStartTag​() matchChomp public boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue. Parameters: seq - String to search for, and if found, remove from queue. Returns: true if found and removed, false if not found. matchesWhitespace public boolean matchesWhitespace​() Tests if queue starts with a whitespace character. Returns: if starts with whitespace matchesWord public boolean matchesWord​() Test if the queue matches a word character (letter or digit). Returns: if matches a word character advance public void advance​() Drops the next character off the queue. consume public char consume​() Consume one character off queue. Returns: first character on queue. consume public void consume​(String seq) Consumes the supplied sequence of the queue. If the queue does not start with the supplied sequence, will throw an illegal state exception -- but you should be running match() against that condition. Case insensitive. Parameters: seq - sequence to remove from head of queue. consumeTo public String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out. Parameters: seq - String to end on (and not include in return, but leave on queue). Case sensitive. Returns: The matched data consumed from queue. consumeToIgnoreCase public String consumeToIgnoreCase​(String seq) consumeToAny public String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue. Leaves the terminator on the queue. Parameters: seq - any number of terminators to consume to. Case insensitive. Returns: consumed string chompTo public String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). If the queue runs out of characters before finding the seq, will return as much as it can (and queue will go isEmpty() == true). Parameters: seq - String to match up to, and not include in return, and to pull off queue. Case sensitive. Returns: Data matched from queue. chompToIgnoreCase public String chompToIgnoreCase​(String seq) chompBalanced public String chompBalanced​(char open, char close) Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three", and leave " four" on the queue. Unbalanced openers and closers can be quoted (with ' or ") or escaped (with \). Those escapes will be left in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for contains text strings; use unescape for that. Parameters: open - opener close - closer Returns: data matched from the queue unescape public static String unescape​(String in) Unescape a \ escaped string. Parameters: in - backslash escaped string Returns: unescaped string consumeWhitespace public boolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue. Returns: Whether consuming whitespace or not consumeWord public String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue. Returns: String of word characters from queue, or empty string if none. consumeTagName public String consumeTagName​() Consume an tag name off the queue (word or :, _, -) Returns: tag name consumeElementSelector public String consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects). Returns: tag name consumeCssIdentifier public String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier Returns: identifier consumeAttributeKey public String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :") Returns: attribute key remainder public String remainder​() Consume and return whatever is left on the queue. Returns: remained of queue. toString public String toString​() Overrides: toString in class Objectjava.lang.Object org.jsoup.parser.TokenQueuejava.lang.Objectjava.lang.Objectorg.jsoup.parser.TokenQueueorg.jsoup.parser.TokenQueueorg.jsoup.parser.TokenQueuepublic class TokenQueue extends Object A character queue with parsing helpers. Author: Jonathan Hedleypublic class TokenQueue extends Object A character queue with parsing helpers. Author: Jonathan Hedleypublic class TokenQueue extends Object A character queue with parsing helpers. Author: Jonathan Hedleypublic class TokenQueue extends ObjectTokenQueueObjectA character queue with parsing helpers.Author: Jonathan HedleyAuthor:Author:Jonathan HedleyConstructor Summary Constructors Constructor Description TokenQueue​(String data) Create a new TokenQueue. Method Summary All Methods Static Methods Instance Methods Concrete Methods Modifier and Type Method Description void addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved). void addFirst​(String seq) Add a string to the start of the queue. void advance​() Drops the next character off the queue. String chompBalanced​(char open, char close) Pulls a balanced string off the queue. String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). String chompToIgnoreCase​(String seq) char consume​() Consume one character off queue. void consume​(String seq) Consumes the supplied sequence of the queue. String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :") String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier String consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects). String consumeTagName​() Consume an tag name off the queue (word or :, _, -) String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out. String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue. String consumeToIgnoreCase​(String seq) boolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue. String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue. boolean isEmpty​() Is the queue empty? boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue. boolean matches​(String seq) Tests if the next characters on the queue match the sequence. boolean matchesAny​(char... seq) boolean matchesAny​(String... seq) Tests if the next characters match any of the sequences. boolean matchesCS​(String seq) Case sensitive match test. boolean matchesStartTag​() boolean matchesWhitespace​() Tests if queue starts with a whitespace character. boolean matchesWord​() Test if the queue matches a word character (letter or digit). char peek​() Retrieves but does not remove the first character from the queue. String remainder​() Consume and return whatever is left on the queue. String toString​() static String unescape​(String in) Unescape a \ escaped string. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitConstructor Summary Constructors Constructor Description TokenQueue​(String data) Create a new TokenQueue. Method Summary All Methods Static Methods Instance Methods Concrete Methods Modifier and Type Method Description void addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved). void addFirst​(String seq) Add a string to the start of the queue. void advance​() Drops the next character off the queue. String chompBalanced​(char open, char close) Pulls a balanced string off the queue. String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). String chompToIgnoreCase​(String seq) char consume​() Consume one character off queue. void consume​(String seq) Consumes the supplied sequence of the queue. String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :") String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier String consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects). String consumeTagName​() Consume an tag name off the queue (word or :, _, -) String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out. String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue. String consumeToIgnoreCase​(String seq) boolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue. String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue. boolean isEmpty​() Is the queue empty? boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue. boolean matches​(String seq) Tests if the next characters on the queue match the sequence. boolean matchesAny​(char... seq) boolean matchesAny​(String... seq) Tests if the next characters match any of the sequences. boolean matchesCS​(String seq) Case sensitive match test. boolean matchesStartTag​() boolean matchesWhitespace​() Tests if queue starts with a whitespace character. boolean matchesWord​() Test if the queue matches a word character (letter or digit). char peek​() Retrieves but does not remove the first character from the queue. String remainder​() Consume and return whatever is left on the queue. String toString​() static String unescape​(String in) Unescape a \ escaped string. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitConstructor Summary Constructors Constructor Description TokenQueue​(String data) Create a new TokenQueue. Method Summary All Methods Static Methods Instance Methods Concrete Methods Modifier and Type Method Description void addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved). void addFirst​(String seq) Add a string to the start of the queue. void advance​() Drops the next character off the queue. String chompBalanced​(char open, char close) Pulls a balanced string off the queue. String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). String chompToIgnoreCase​(String seq) char consume​() Consume one character off queue. void consume​(String seq) Consumes the supplied sequence of the queue. String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :") String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier String consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects). String consumeTagName​() Consume an tag name off the queue (word or :, _, -) String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out. String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue. String consumeToIgnoreCase​(String seq) boolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue. String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue. boolean isEmpty​() Is the queue empty? boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue. boolean matches​(String seq) Tests if the next characters on the queue match the sequence. boolean matchesAny​(char... seq) boolean matchesAny​(String... seq) Tests if the next characters match any of the sequences. boolean matchesCS​(String seq) Case sensitive match test. boolean matchesStartTag​() boolean matchesWhitespace​() Tests if queue starts with a whitespace character. boolean matchesWord​() Test if the queue matches a word character (letter or digit). char peek​() Retrieves but does not remove the first character from the queue. String remainder​() Consume and return whatever is left on the queue. String toString​() static String unescape​(String in) Unescape a \ escaped string. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitConstructor Summary Constructors Constructor Description TokenQueue​(String data) Create a new TokenQueue.Constructor Summary Constructors Constructor Description TokenQueue​(String data) Create a new TokenQueue.Constructor SummaryConstructors Constructor Description TokenQueue​(String data) Create a new TokenQueue.ConstructorsConstructorsConstructor Description TokenQueue​(String data) Create a new TokenQueue.Constructor DescriptionConstructorDescriptionTokenQueue​(String data) Create a new TokenQueue.TokenQueue​(String data)TokenQueue​(String data)TokenQueueTokenQueueStringCreate a new TokenQueue.Create a new TokenQueue.Method Summary All Methods Static Methods Instance Methods Concrete Methods Modifier and Type Method Description void addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved). void addFirst​(String seq) Add a string to the start of the queue. void advance​() Drops the next character off the queue. String chompBalanced​(char open, char close) Pulls a balanced string off the queue. String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). String chompToIgnoreCase​(String seq) char consume​() Consume one character off queue. void consume​(String seq) Consumes the supplied sequence of the queue. String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :") String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier String consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects). String consumeTagName​() Consume an tag name off the queue (word or :, _, -) String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out. String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue. String consumeToIgnoreCase​(String seq) boolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue. String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue. boolean isEmpty​() Is the queue empty? boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue. boolean matches​(String seq) Tests if the next characters on the queue match the sequence. boolean matchesAny​(char... seq) boolean matchesAny​(String... seq) Tests if the next characters match any of the sequences. boolean matchesCS​(String seq) Case sensitive match test. boolean matchesStartTag​() boolean matchesWhitespace​() Tests if queue starts with a whitespace character. boolean matchesWord​() Test if the queue matches a word character (letter or digit). char peek​() Retrieves but does not remove the first character from the queue. String remainder​() Consume and return whatever is left on the queue. String toString​() static String unescape​(String in) Unescape a \ escaped string. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitMethod Summary All Methods Static Methods Instance Methods Concrete Methods Modifier and Type Method Description void addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved). void addFirst​(String seq) Add a string to the start of the queue. void advance​() Drops the next character off the queue. String chompBalanced​(char open, char close) Pulls a balanced string off the queue. String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). String chompToIgnoreCase​(String seq) char consume​() Consume one character off queue. void consume​(String seq) Consumes the supplied sequence of the queue. String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :") String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier String consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects). String consumeTagName​() Consume an tag name off the queue (word or :, _, -) String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out. String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue. String consumeToIgnoreCase​(String seq) boolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue. String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue. boolean isEmpty​() Is the queue empty? boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue. boolean matches​(String seq) Tests if the next characters on the queue match the sequence. boolean matchesAny​(char... seq) boolean matchesAny​(String... seq) Tests if the next characters match any of the sequences. boolean matchesCS​(String seq) Case sensitive match test. boolean matchesStartTag​() boolean matchesWhitespace​() Tests if queue starts with a whitespace character. boolean matchesWord​() Test if the queue matches a word character (letter or digit). char peek​() Retrieves but does not remove the first character from the queue. String remainder​() Consume and return whatever is left on the queue. String toString​() static String unescape​(String in) Unescape a \ escaped string. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitMethod SummaryAll Methods Static Methods Instance Methods Concrete Methods Modifier and Type Method Description void addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved). void addFirst​(String seq) Add a string to the start of the queue. void advance​() Drops the next character off the queue. String chompBalanced​(char open, char close) Pulls a balanced string off the queue. String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). String chompToIgnoreCase​(String seq) char consume​() Consume one character off queue. void consume​(String seq) Consumes the supplied sequence of the queue. String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :") String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier String consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects). String consumeTagName​() Consume an tag name off the queue (word or :, _, -) String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out. String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue. String consumeToIgnoreCase​(String seq) boolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue. String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue. boolean isEmpty​() Is the queue empty? boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue. boolean matches​(String seq) Tests if the next characters on the queue match the sequence. boolean matchesAny​(char... seq) boolean matchesAny​(String... seq) Tests if the next characters match any of the sequences. boolean matchesCS​(String seq) Case sensitive match test. boolean matchesStartTag​() boolean matchesWhitespace​() Tests if queue starts with a whitespace character. boolean matchesWord​() Test if the queue matches a word character (letter or digit). char peek​() Retrieves but does not remove the first character from the queue. String remainder​() Consume and return whatever is left on the queue. String toString​() static String unescape​(String in) Unescape a \ escaped string.All Methods Static Methods Instance Methods Concrete MethodsAll MethodsAll MethodsStatic MethodsStatic MethodsStatic MethodsInstance MethodsInstance MethodsInstance MethodsConcrete MethodsConcrete MethodsConcrete MethodsModifier and Type Method Description void addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved). void addFirst​(String seq) Add a string to the start of the queue. void advance​() Drops the next character off the queue. String chompBalanced​(char open, char close) Pulls a balanced string off the queue. String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). String chompToIgnoreCase​(String seq) char consume​() Consume one character off queue. void consume​(String seq) Consumes the supplied sequence of the queue. String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :") String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier String consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects). String consumeTagName​() Consume an tag name off the queue (word or :, _, -) String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out. String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue. String consumeToIgnoreCase​(String seq) boolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue. String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue. boolean isEmpty​() Is the queue empty? boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue. boolean matches​(String seq) Tests if the next characters on the queue match the sequence. boolean matchesAny​(char... seq) boolean matchesAny​(String... seq) Tests if the next characters match any of the sequences. boolean matchesCS​(String seq) Case sensitive match test. boolean matchesStartTag​() boolean matchesWhitespace​() Tests if queue starts with a whitespace character. boolean matchesWord​() Test if the queue matches a word character (letter or digit). char peek​() Retrieves but does not remove the first character from the queue. String remainder​() Consume and return whatever is left on the queue. String toString​() static String unescape​(String in) Unescape a \ escaped string.Modifier and Type Method DescriptionModifier and TypeMethodDescriptionvoid addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved).voidvoidaddFirst​(Character c)addFirst​(Character c)addFirstaddFirstCharacterAdd a character to the start of the queue (will be the next character retrieved).Add a character to the start of the queue (will be the next character retrieved).void addFirst​(String seq) Add a string to the start of the queue.voidvoidaddFirst​(String seq)addFirst​(String seq)addFirstaddFirstStringAdd a string to the start of the queue.Add a string to the start of the queue.void advance​() Drops the next character off the queue.voidvoidadvance​()advance​()advanceadvanceDrops the next character off the queue.Drops the next character off the queue.String chompBalanced​(char open, char close) Pulls a balanced string off the queue.StringStringStringchompBalanced​(char open, char close)chompBalanced​(char open, char close)chompBalancedchompBalancedPulls a balanced string off the queue.Pulls a balanced string off the queue.String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it).StringStringStringchompTo​(String seq)chompTo​(String seq)chompTochompToStringPulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it).Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it).String chompToIgnoreCase​(String seq)StringStringStringchompToIgnoreCase​(String seq)chompToIgnoreCase​(String seq)chompToIgnoreCasechompToIgnoreCaseStringchar consume​() Consume one character off queue.charcharconsume​()consume​()consumeconsumeConsume one character off queue.Consume one character off queue.void consume​(String seq) Consumes the supplied sequence of the queue.voidvoidconsume​(String seq)consume​(String seq)consumeconsumeStringConsumes the supplied sequence of the queue.Consumes the supplied sequence of the queue.String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :")StringStringStringconsumeAttributeKey​()consumeAttributeKey​()consumeAttributeKeyconsumeAttributeKeyConsume an attribute key off the queue (letter, digit, -, _, :")Consume an attribute key off the queue (letter, digit, -, _, :")String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifierStringStringStringconsumeCssIdentifier​()consumeCssIdentifier​()consumeCssIdentifierconsumeCssIdentifierConsume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifierConsume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifierString consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects).StringStringStringconsumeElementSelector​()consumeElementSelector​()consumeElementSelectorconsumeElementSelectorConsume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects).Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects).String consumeTagName​() Consume an tag name off the queue (word or :, _, -)StringStringStringconsumeTagName​()consumeTagName​()consumeTagNameconsumeTagNameConsume an tag name off the queue (word or :, _, -)Consume an tag name off the queue (word or :, _, -)String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out.StringStringStringconsumeTo​(String seq)consumeTo​(String seq)consumeToconsumeToStringPulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out.Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out.String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue.StringStringStringconsumeToAny​(String... seq)consumeToAny​(String... seq)consumeToAnyconsumeToAnyStringConsumes to the first sequence provided, or to the end of the queue.Consumes to the first sequence provided, or to the end of the queue.String consumeToIgnoreCase​(String seq)StringStringStringconsumeToIgnoreCase​(String seq)consumeToIgnoreCase​(String seq)consumeToIgnoreCaseconsumeToIgnoreCaseStringboolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue.booleanbooleanconsumeWhitespace​()consumeWhitespace​()consumeWhitespaceconsumeWhitespacePulls the next run of whitespace characters of the queue.Pulls the next run of whitespace characters of the queue.String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue.StringStringStringconsumeWord​()consumeWord​()consumeWordconsumeWordRetrieves the next run of word type (letter or digit) off the queue.Retrieves the next run of word type (letter or digit) off the queue.boolean isEmpty​() Is the queue empty?booleanbooleanisEmpty​()isEmpty​()isEmptyisEmptyIs the queue empty?Is the queue empty?boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue.booleanbooleanmatchChomp​(String seq)matchChomp​(String seq)matchChompmatchChompStringTests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue.Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue.boolean matches​(String seq) Tests if the next characters on the queue match the sequence.booleanbooleanmatches​(String seq)matches​(String seq)matchesmatchesStringTests if the next characters on the queue match the sequence.Tests if the next characters on the queue match the sequence.boolean matchesAny​(char... seq)booleanbooleanmatchesAny​(char... seq)matchesAny​(char... seq)matchesAnymatchesAnyboolean matchesAny​(String... seq) Tests if the next characters match any of the sequences.booleanbooleanmatchesAny​(String... seq)matchesAny​(String... seq)matchesAnymatchesAnyStringTests if the next characters match any of the sequences.Tests if the next characters match any of the sequences.boolean matchesCS​(String seq) Case sensitive match test.booleanbooleanmatchesCS​(String seq)matchesCS​(String seq)matchesCSmatchesCSStringCase sensitive match test.Case sensitive match test.boolean matchesStartTag​()booleanbooleanmatchesStartTag​()matchesStartTag​()matchesStartTagmatchesStartTagboolean matchesWhitespace​() Tests if queue starts with a whitespace character.booleanbooleanmatchesWhitespace​()matchesWhitespace​()matchesWhitespacematchesWhitespaceTests if queue starts with a whitespace character.Tests if queue starts with a whitespace character.boolean matchesWord​() Test if the queue matches a word character (letter or digit).booleanbooleanmatchesWord​()matchesWord​()matchesWordmatchesWordTest if the queue matches a word character (letter or digit).Test if the queue matches a word character (letter or digit).char peek​() Retrieves but does not remove the first character from the queue.charcharpeek​()peek​()peekpeekRetrieves but does not remove the first character from the queue.Retrieves but does not remove the first character from the queue.String remainder​() Consume and return whatever is left on the queue.StringStringStringremainder​()remainder​()remainderremainderConsume and return whatever is left on the queue.Consume and return whatever is left on the queue.String toString​()StringStringStringtoString​()toString​()toStringtoStringstatic String unescape​(String in) Unescape a \ escaped string.static Stringstatic StringStringunescape​(String in)unescape​(String in)unescapeunescapeStringUnescape a \ escaped string.Unescape a \ escaped string.Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitMethods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitMethods inherited from class java.lang.ObjectObjectclone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, waitcloneequalsfinalizegetClasshashCodenotifynotifyAllwaitwaitwaitConstructor Detail TokenQueue public TokenQueue​(String data) Create a new TokenQueue. Parameters: data - string of data to back queue. Method Detail isEmpty public boolean isEmpty​() Is the queue empty? Returns: true if no data left in queue. peek public char peek​() Retrieves but does not remove the first character from the queue. Returns: First character, or 0 if empty. addFirst public void addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved). Parameters: c - character to add addFirst public void addFirst​(String seq) Add a string to the start of the queue. Parameters: seq - string to add. matches public boolean matches​(String seq) Tests if the next characters on the queue match the sequence. Case insensitive. Parameters: seq - String to check queue for. Returns: true if the next characters match. matchesCS public boolean matchesCS​(String seq) Case sensitive match test. Parameters: seq - string to case sensitively check for Returns: true if matched, false if not matchesAny public boolean matchesAny​(String... seq) Tests if the next characters match any of the sequences. Case insensitive. Parameters: seq - list of strings to case insensitively check for Returns: true of any matched, false if none did matchesAny public boolean matchesAny​(char... seq) matchesStartTag public boolean matchesStartTag​() matchChomp public boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue. Parameters: seq - String to search for, and if found, remove from queue. Returns: true if found and removed, false if not found. matchesWhitespace public boolean matchesWhitespace​() Tests if queue starts with a whitespace character. Returns: if starts with whitespace matchesWord public boolean matchesWord​() Test if the queue matches a word character (letter or digit). Returns: if matches a word character advance public void advance​() Drops the next character off the queue. consume public char consume​() Consume one character off queue. Returns: first character on queue. consume public void consume​(String seq) Consumes the supplied sequence of the queue. If the queue does not start with the supplied sequence, will throw an illegal state exception -- but you should be running match() against that condition. Case insensitive. Parameters: seq - sequence to remove from head of queue. consumeTo public String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out. Parameters: seq - String to end on (and not include in return, but leave on queue). Case sensitive. Returns: The matched data consumed from queue. consumeToIgnoreCase public String consumeToIgnoreCase​(String seq) consumeToAny public String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue. Leaves the terminator on the queue. Parameters: seq - any number of terminators to consume to. Case insensitive. Returns: consumed string chompTo public String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). If the queue runs out of characters before finding the seq, will return as much as it can (and queue will go isEmpty() == true). Parameters: seq - String to match up to, and not include in return, and to pull off queue. Case sensitive. Returns: Data matched from queue. chompToIgnoreCase public String chompToIgnoreCase​(String seq) chompBalanced public String chompBalanced​(char open, char close) Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three", and leave " four" on the queue. Unbalanced openers and closers can be quoted (with ' or ") or escaped (with \). Those escapes will be left in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for contains text strings; use unescape for that. Parameters: open - opener close - closer Returns: data matched from the queue unescape public static String unescape​(String in) Unescape a \ escaped string. Parameters: in - backslash escaped string Returns: unescaped string consumeWhitespace public boolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue. Returns: Whether consuming whitespace or not consumeWord public String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue. Returns: String of word characters from queue, or empty string if none. consumeTagName public String consumeTagName​() Consume an tag name off the queue (word or :, _, -) Returns: tag name consumeElementSelector public String consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects). Returns: tag name consumeCssIdentifier public String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier Returns: identifier consumeAttributeKey public String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :") Returns: attribute key remainder public String remainder​() Consume and return whatever is left on the queue. Returns: remained of queue. toString public String toString​() Overrides: toString in class ObjectConstructor Detail TokenQueue public TokenQueue​(String data) Create a new TokenQueue. Parameters: data - string of data to back queue. Method Detail isEmpty public boolean isEmpty​() Is the queue empty? Returns: true if no data left in queue. peek public char peek​() Retrieves but does not remove the first character from the queue. Returns: First character, or 0 if empty. addFirst public void addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved). Parameters: c - character to add addFirst public void addFirst​(String seq) Add a string to the start of the queue. Parameters: seq - string to add. matches public boolean matches​(String seq) Tests if the next characters on the queue match the sequence. Case insensitive. Parameters: seq - String to check queue for. Returns: true if the next characters match. matchesCS public boolean matchesCS​(String seq) Case sensitive match test. Parameters: seq - string to case sensitively check for Returns: true if matched, false if not matchesAny public boolean matchesAny​(String... seq) Tests if the next characters match any of the sequences. Case insensitive. Parameters: seq - list of strings to case insensitively check for Returns: true of any matched, false if none did matchesAny public boolean matchesAny​(char... seq) matchesStartTag public boolean matchesStartTag​() matchChomp public boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue. Parameters: seq - String to search for, and if found, remove from queue. Returns: true if found and removed, false if not found. matchesWhitespace public boolean matchesWhitespace​() Tests if queue starts with a whitespace character. Returns: if starts with whitespace matchesWord public boolean matchesWord​() Test if the queue matches a word character (letter or digit). Returns: if matches a word character advance public void advance​() Drops the next character off the queue. consume public char consume​() Consume one character off queue. Returns: first character on queue. consume public void consume​(String seq) Consumes the supplied sequence of the queue. If the queue does not start with the supplied sequence, will throw an illegal state exception -- but you should be running match() against that condition. Case insensitive. Parameters: seq - sequence to remove from head of queue. consumeTo public String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out. Parameters: seq - String to end on (and not include in return, but leave on queue). Case sensitive. Returns: The matched data consumed from queue. consumeToIgnoreCase public String consumeToIgnoreCase​(String seq) consumeToAny public String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue. Leaves the terminator on the queue. Parameters: seq - any number of terminators to consume to. Case insensitive. Returns: consumed string chompTo public String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). If the queue runs out of characters before finding the seq, will return as much as it can (and queue will go isEmpty() == true). Parameters: seq - String to match up to, and not include in return, and to pull off queue. Case sensitive. Returns: Data matched from queue. chompToIgnoreCase public String chompToIgnoreCase​(String seq) chompBalanced public String chompBalanced​(char open, char close) Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three", and leave " four" on the queue. Unbalanced openers and closers can be quoted (with ' or ") or escaped (with \). Those escapes will be left in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for contains text strings; use unescape for that. Parameters: open - opener close - closer Returns: data matched from the queue unescape public static String unescape​(String in) Unescape a \ escaped string. Parameters: in - backslash escaped string Returns: unescaped string consumeWhitespace public boolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue. Returns: Whether consuming whitespace or not consumeWord public String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue. Returns: String of word characters from queue, or empty string if none. consumeTagName public String consumeTagName​() Consume an tag name off the queue (word or :, _, -) Returns: tag name consumeElementSelector public String consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects). Returns: tag name consumeCssIdentifier public String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier Returns: identifier consumeAttributeKey public String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :") Returns: attribute key remainder public String remainder​() Consume and return whatever is left on the queue. Returns: remained of queue. toString public String toString​() Overrides: toString in class ObjectConstructor Detail TokenQueue public TokenQueue​(String data) Create a new TokenQueue. Parameters: data - string of data to back queue. Method Detail isEmpty public boolean isEmpty​() Is the queue empty? Returns: true if no data left in queue. peek public char peek​() Retrieves but does not remove the first character from the queue. Returns: First character, or 0 if empty. addFirst public void addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved). Parameters: c - character to add addFirst public void addFirst​(String seq) Add a string to the start of the queue. Parameters: seq - string to add. matches public boolean matches​(String seq) Tests if the next characters on the queue match the sequence. Case insensitive. Parameters: seq - String to check queue for. Returns: true if the next characters match. matchesCS public boolean matchesCS​(String seq) Case sensitive match test. Parameters: seq - string to case sensitively check for Returns: true if matched, false if not matchesAny public boolean matchesAny​(String... seq) Tests if the next characters match any of the sequences. Case insensitive. Parameters: seq - list of strings to case insensitively check for Returns: true of any matched, false if none did matchesAny public boolean matchesAny​(char... seq) matchesStartTag public boolean matchesStartTag​() matchChomp public boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue. Parameters: seq - String to search for, and if found, remove from queue. Returns: true if found and removed, false if not found. matchesWhitespace public boolean matchesWhitespace​() Tests if queue starts with a whitespace character. Returns: if starts with whitespace matchesWord public boolean matchesWord​() Test if the queue matches a word character (letter or digit). Returns: if matches a word character advance public void advance​() Drops the next character off the queue. consume public char consume​() Consume one character off queue. Returns: first character on queue. consume public void consume​(String seq) Consumes the supplied sequence of the queue. If the queue does not start with the supplied sequence, will throw an illegal state exception -- but you should be running match() against that condition. Case insensitive. Parameters: seq - sequence to remove from head of queue. consumeTo public String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out. Parameters: seq - String to end on (and not include in return, but leave on queue). Case sensitive. Returns: The matched data consumed from queue. consumeToIgnoreCase public String consumeToIgnoreCase​(String seq) consumeToAny public String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue. Leaves the terminator on the queue. Parameters: seq - any number of terminators to consume to. Case insensitive. Returns: consumed string chompTo public String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). If the queue runs out of characters before finding the seq, will return as much as it can (and queue will go isEmpty() == true). Parameters: seq - String to match up to, and not include in return, and to pull off queue. Case sensitive. Returns: Data matched from queue. chompToIgnoreCase public String chompToIgnoreCase​(String seq) chompBalanced public String chompBalanced​(char open, char close) Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three", and leave " four" on the queue. Unbalanced openers and closers can be quoted (with ' or ") or escaped (with \). Those escapes will be left in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for contains text strings; use unescape for that. Parameters: open - opener close - closer Returns: data matched from the queue unescape public static String unescape​(String in) Unescape a \ escaped string. Parameters: in - backslash escaped string Returns: unescaped string consumeWhitespace public boolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue. Returns: Whether consuming whitespace or not consumeWord public String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue. Returns: String of word characters from queue, or empty string if none. consumeTagName public String consumeTagName​() Consume an tag name off the queue (word or :, _, -) Returns: tag name consumeElementSelector public String consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects). Returns: tag name consumeCssIdentifier public String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier Returns: identifier consumeAttributeKey public String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :") Returns: attribute key remainder public String remainder​() Consume and return whatever is left on the queue. Returns: remained of queue. toString public String toString​() Overrides: toString in class ObjectConstructor Detail TokenQueue public TokenQueue​(String data) Create a new TokenQueue. Parameters: data - string of data to back queue.Constructor Detail TokenQueue public TokenQueue​(String data) Create a new TokenQueue. Parameters: data - string of data to back queue.Constructor DetailTokenQueue public TokenQueue​(String data) Create a new TokenQueue. Parameters: data - string of data to back queue.TokenQueue public TokenQueue​(String data) Create a new TokenQueue. Parameters: data - string of data to back queue.TokenQueuepublic TokenQueue​(String data)StringCreate a new TokenQueue.Parameters: data - string of data to back queue.Parameters:Parameters:data - string of data to back queue.dataMethod Detail isEmpty public boolean isEmpty​() Is the queue empty? Returns: true if no data left in queue. peek public char peek​() Retrieves but does not remove the first character from the queue. Returns: First character, or 0 if empty. addFirst public void addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved). Parameters: c - character to add addFirst public void addFirst​(String seq) Add a string to the start of the queue. Parameters: seq - string to add. matches public boolean matches​(String seq) Tests if the next characters on the queue match the sequence. Case insensitive. Parameters: seq - String to check queue for. Returns: true if the next characters match. matchesCS public boolean matchesCS​(String seq) Case sensitive match test. Parameters: seq - string to case sensitively check for Returns: true if matched, false if not matchesAny public boolean matchesAny​(String... seq) Tests if the next characters match any of the sequences. Case insensitive. Parameters: seq - list of strings to case insensitively check for Returns: true of any matched, false if none did matchesAny public boolean matchesAny​(char... seq) matchesStartTag public boolean matchesStartTag​() matchChomp public boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue. Parameters: seq - String to search for, and if found, remove from queue. Returns: true if found and removed, false if not found. matchesWhitespace public boolean matchesWhitespace​() Tests if queue starts with a whitespace character. Returns: if starts with whitespace matchesWord public boolean matchesWord​() Test if the queue matches a word character (letter or digit). Returns: if matches a word character advance public void advance​() Drops the next character off the queue. consume public char consume​() Consume one character off queue. Returns: first character on queue. consume public void consume​(String seq) Consumes the supplied sequence of the queue. If the queue does not start with the supplied sequence, will throw an illegal state exception -- but you should be running match() against that condition. Case insensitive. Parameters: seq - sequence to remove from head of queue. consumeTo public String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out. Parameters: seq - String to end on (and not include in return, but leave on queue). Case sensitive. Returns: The matched data consumed from queue. consumeToIgnoreCase public String consumeToIgnoreCase​(String seq) consumeToAny public String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue. Leaves the terminator on the queue. Parameters: seq - any number of terminators to consume to. Case insensitive. Returns: consumed string chompTo public String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). If the queue runs out of characters before finding the seq, will return as much as it can (and queue will go isEmpty() == true). Parameters: seq - String to match up to, and not include in return, and to pull off queue. Case sensitive. Returns: Data matched from queue. chompToIgnoreCase public String chompToIgnoreCase​(String seq) chompBalanced public String chompBalanced​(char open, char close) Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three", and leave " four" on the queue. Unbalanced openers and closers can be quoted (with ' or ") or escaped (with \). Those escapes will be left in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for contains text strings; use unescape for that. Parameters: open - opener close - closer Returns: data matched from the queue unescape public static String unescape​(String in) Unescape a \ escaped string. Parameters: in - backslash escaped string Returns: unescaped string consumeWhitespace public boolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue. Returns: Whether consuming whitespace or not consumeWord public String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue. Returns: String of word characters from queue, or empty string if none. consumeTagName public String consumeTagName​() Consume an tag name off the queue (word or :, _, -) Returns: tag name consumeElementSelector public String consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects). Returns: tag name consumeCssIdentifier public String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier Returns: identifier consumeAttributeKey public String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :") Returns: attribute key remainder public String remainder​() Consume and return whatever is left on the queue. Returns: remained of queue. toString public String toString​() Overrides: toString in class ObjectMethod Detail isEmpty public boolean isEmpty​() Is the queue empty? Returns: true if no data left in queue. peek public char peek​() Retrieves but does not remove the first character from the queue. Returns: First character, or 0 if empty. addFirst public void addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved). Parameters: c - character to add addFirst public void addFirst​(String seq) Add a string to the start of the queue. Parameters: seq - string to add. matches public boolean matches​(String seq) Tests if the next characters on the queue match the sequence. Case insensitive. Parameters: seq - String to check queue for. Returns: true if the next characters match. matchesCS public boolean matchesCS​(String seq) Case sensitive match test. Parameters: seq - string to case sensitively check for Returns: true if matched, false if not matchesAny public boolean matchesAny​(String... seq) Tests if the next characters match any of the sequences. Case insensitive. Parameters: seq - list of strings to case insensitively check for Returns: true of any matched, false if none did matchesAny public boolean matchesAny​(char... seq) matchesStartTag public boolean matchesStartTag​() matchChomp public boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue. Parameters: seq - String to search for, and if found, remove from queue. Returns: true if found and removed, false if not found. matchesWhitespace public boolean matchesWhitespace​() Tests if queue starts with a whitespace character. Returns: if starts with whitespace matchesWord public boolean matchesWord​() Test if the queue matches a word character (letter or digit). Returns: if matches a word character advance public void advance​() Drops the next character off the queue. consume public char consume​() Consume one character off queue. Returns: first character on queue. consume public void consume​(String seq) Consumes the supplied sequence of the queue. If the queue does not start with the supplied sequence, will throw an illegal state exception -- but you should be running match() against that condition. Case insensitive. Parameters: seq - sequence to remove from head of queue. consumeTo public String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out. Parameters: seq - String to end on (and not include in return, but leave on queue). Case sensitive. Returns: The matched data consumed from queue. consumeToIgnoreCase public String consumeToIgnoreCase​(String seq) consumeToAny public String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue. Leaves the terminator on the queue. Parameters: seq - any number of terminators to consume to. Case insensitive. Returns: consumed string chompTo public String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). If the queue runs out of characters before finding the seq, will return as much as it can (and queue will go isEmpty() == true). Parameters: seq - String to match up to, and not include in return, and to pull off queue. Case sensitive. Returns: Data matched from queue. chompToIgnoreCase public String chompToIgnoreCase​(String seq) chompBalanced public String chompBalanced​(char open, char close) Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three", and leave " four" on the queue. Unbalanced openers and closers can be quoted (with ' or ") or escaped (with \). Those escapes will be left in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for contains text strings; use unescape for that. Parameters: open - opener close - closer Returns: data matched from the queue unescape public static String unescape​(String in) Unescape a \ escaped string. Parameters: in - backslash escaped string Returns: unescaped string consumeWhitespace public boolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue. Returns: Whether consuming whitespace or not consumeWord public String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue. Returns: String of word characters from queue, or empty string if none. consumeTagName public String consumeTagName​() Consume an tag name off the queue (word or :, _, -) Returns: tag name consumeElementSelector public String consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects). Returns: tag name consumeCssIdentifier public String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier Returns: identifier consumeAttributeKey public String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :") Returns: attribute key remainder public String remainder​() Consume and return whatever is left on the queue. Returns: remained of queue. toString public String toString​() Overrides: toString in class ObjectMethod DetailisEmpty public boolean isEmpty​() Is the queue empty? Returns: true if no data left in queue.isEmpty public boolean isEmpty​() Is the queue empty? Returns: true if no data left in queue.isEmptypublic boolean isEmpty​()Is the queue empty?Returns: true if no data left in queue.Returns:Returns:true if no data left in queue.peek public char peek​() Retrieves but does not remove the first character from the queue. Returns: First character, or 0 if empty.peek public char peek​() Retrieves but does not remove the first character from the queue. Returns: First character, or 0 if empty.peekpublic char peek​()Retrieves but does not remove the first character from the queue.Returns: First character, or 0 if empty.Returns:Returns:First character, or 0 if empty.addFirst public void addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved). Parameters: c - character to addaddFirst public void addFirst​(Character c) Add a character to the start of the queue (will be the next character retrieved). Parameters: c - character to addaddFirstpublic void addFirst​(Character c)CharacterAdd a character to the start of the queue (will be the next character retrieved).Parameters: c - character to addParameters:Parameters:c - character to addcaddFirst public void addFirst​(String seq) Add a string to the start of the queue. Parameters: seq - string to add.addFirst public void addFirst​(String seq) Add a string to the start of the queue. Parameters: seq - string to add.addFirstpublic void addFirst​(String seq)StringAdd a string to the start of the queue.Parameters: seq - string to add.Parameters:Parameters:seq - string to add.seqmatches public boolean matches​(String seq) Tests if the next characters on the queue match the sequence. Case insensitive. Parameters: seq - String to check queue for. Returns: true if the next characters match.matches public boolean matches​(String seq) Tests if the next characters on the queue match the sequence. Case insensitive. Parameters: seq - String to check queue for. Returns: true if the next characters match.matchespublic boolean matches​(String seq)StringTests if the next characters on the queue match the sequence. Case insensitive.Parameters: seq - String to check queue for. Returns: true if the next characters match.Parameters:Parameters:seq - String to check queue for.seqReturns:Returns:true if the next characters match.matchesCS public boolean matchesCS​(String seq) Case sensitive match test. Parameters: seq - string to case sensitively check for Returns: true if matched, false if notmatchesCS public boolean matchesCS​(String seq) Case sensitive match test. Parameters: seq - string to case sensitively check for Returns: true if matched, false if notmatchesCSpublic boolean matchesCS​(String seq)StringCase sensitive match test.Parameters: seq - string to case sensitively check for Returns: true if matched, false if notParameters:Parameters:seq - string to case sensitively check forseqReturns:Returns:true if matched, false if notmatchesAny public boolean matchesAny​(String... seq) Tests if the next characters match any of the sequences. Case insensitive. Parameters: seq - list of strings to case insensitively check for Returns: true of any matched, false if none didmatchesAny public boolean matchesAny​(String... seq) Tests if the next characters match any of the sequences. Case insensitive. Parameters: seq - list of strings to case insensitively check for Returns: true of any matched, false if none didmatchesAnypublic boolean matchesAny​(String... seq)StringTests if the next characters match any of the sequences. Case insensitive.Parameters: seq - list of strings to case insensitively check for Returns: true of any matched, false if none didParameters:Parameters:seq - list of strings to case insensitively check forseqReturns:Returns:true of any matched, false if none didmatchesAny public boolean matchesAny​(char... seq)matchesAny public boolean matchesAny​(char... seq)matchesAnypublic boolean matchesAny​(char... seq)matchesStartTag public boolean matchesStartTag​()matchesStartTag public boolean matchesStartTag​()matchesStartTagpublic boolean matchesStartTag​()matchChomp public boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue. Parameters: seq - String to search for, and if found, remove from queue. Returns: true if found and removed, false if not found.matchChomp public boolean matchChomp​(String seq) Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue. Parameters: seq - String to search for, and if found, remove from queue. Returns: true if found and removed, false if not found.matchChomppublic boolean matchChomp​(String seq)StringTests if the queue matches the sequence (as with match), and if they do, removes the matched string from the queue.Parameters: seq - String to search for, and if found, remove from queue. Returns: true if found and removed, false if not found.Parameters:Parameters:seq - String to search for, and if found, remove from queue.seqReturns:Returns:true if found and removed, false if not found.matchesWhitespace public boolean matchesWhitespace​() Tests if queue starts with a whitespace character. Returns: if starts with whitespacematchesWhitespace public boolean matchesWhitespace​() Tests if queue starts with a whitespace character. Returns: if starts with whitespacematchesWhitespacepublic boolean matchesWhitespace​()Tests if queue starts with a whitespace character.Returns: if starts with whitespaceReturns:Returns:if starts with whitespacematchesWord public boolean matchesWord​() Test if the queue matches a word character (letter or digit). Returns: if matches a word charactermatchesWord public boolean matchesWord​() Test if the queue matches a word character (letter or digit). Returns: if matches a word charactermatchesWordpublic boolean matchesWord​()Test if the queue matches a word character (letter or digit).Returns: if matches a word characterReturns:Returns:if matches a word characteradvance public void advance​() Drops the next character off the queue.advance public void advance​() Drops the next character off the queue.advancepublic void advance​()Drops the next character off the queue.consume public char consume​() Consume one character off queue. Returns: first character on queue.consume public char consume​() Consume one character off queue. Returns: first character on queue.consumepublic char consume​()Consume one character off queue.Returns: first character on queue.Returns:Returns:first character on queue.consume public void consume​(String seq) Consumes the supplied sequence of the queue. If the queue does not start with the supplied sequence, will throw an illegal state exception -- but you should be running match() against that condition. Case insensitive. Parameters: seq - sequence to remove from head of queue.consume public void consume​(String seq) Consumes the supplied sequence of the queue. If the queue does not start with the supplied sequence, will throw an illegal state exception -- but you should be running match() against that condition. Case insensitive. Parameters: seq - sequence to remove from head of queue.consumepublic void consume​(String seq)StringConsumes the supplied sequence of the queue. If the queue does not start with the supplied sequence, will throw an illegal state exception -- but you should be running match() against that condition. Case insensitive.Case insensitive.Parameters: seq - sequence to remove from head of queue.Parameters:Parameters:seq - sequence to remove from head of queue.seqconsumeTo public String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out. Parameters: seq - String to end on (and not include in return, but leave on queue). Case sensitive. Returns: The matched data consumed from queue.consumeTo public String consumeTo​(String seq) Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out. Parameters: seq - String to end on (and not include in return, but leave on queue). Case sensitive. Returns: The matched data consumed from queue.consumeTopublic String consumeTo​(String seq)StringStringPulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out.Parameters: seq - String to end on (and not include in return, but leave on queue). Case sensitive. Returns: The matched data consumed from queue.Parameters:Parameters:seq - String to end on (and not include in return, but leave on queue). Case sensitive.seqCase sensitive.Returns:Returns:The matched data consumed from queue.consumeToIgnoreCase public String consumeToIgnoreCase​(String seq)consumeToIgnoreCase public String consumeToIgnoreCase​(String seq)consumeToIgnoreCasepublic String consumeToIgnoreCase​(String seq)StringStringconsumeToAny public String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue. Leaves the terminator on the queue. Parameters: seq - any number of terminators to consume to. Case insensitive. Returns: consumed stringconsumeToAny public String consumeToAny​(String... seq) Consumes to the first sequence provided, or to the end of the queue. Leaves the terminator on the queue. Parameters: seq - any number of terminators to consume to. Case insensitive. Returns: consumed stringconsumeToAnypublic String consumeToAny​(String... seq)StringStringConsumes to the first sequence provided, or to the end of the queue. Leaves the terminator on the queue.Parameters: seq - any number of terminators to consume to. Case insensitive. Returns: consumed stringParameters:Parameters:seq - any number of terminators to consume to. Case insensitive.seqCase insensitive.Returns:Returns:consumed stringchompTo public String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). If the queue runs out of characters before finding the seq, will return as much as it can (and queue will go isEmpty() == true). Parameters: seq - String to match up to, and not include in return, and to pull off queue. Case sensitive. Returns: Data matched from queue.chompTo public String chompTo​(String seq) Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). If the queue runs out of characters before finding the seq, will return as much as it can (and queue will go isEmpty() == true). Parameters: seq - String to match up to, and not include in return, and to pull off queue. Case sensitive. Returns: Data matched from queue.chompTopublic String chompTo​(String seq)StringStringPulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it). If the queue runs out of characters before finding the seq, will return as much as it can (and queue will go isEmpty() == true).If the queue runs out of characters before finding the seq, will return as much as it can (and queue will go isEmpty() == true).Parameters: seq - String to match up to, and not include in return, and to pull off queue. Case sensitive. Returns: Data matched from queue.Parameters:Parameters:seq - String to match up to, and not include in return, and to pull off queue. Case sensitive.seqCase sensitive.Returns:Returns:Data matched from queue.chompToIgnoreCase public String chompToIgnoreCase​(String seq)chompToIgnoreCase public String chompToIgnoreCase​(String seq)chompToIgnoreCasepublic String chompToIgnoreCase​(String seq)StringStringchompBalanced public String chompBalanced​(char open, char close) Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three", and leave " four" on the queue. Unbalanced openers and closers can be quoted (with ' or ") or escaped (with \). Those escapes will be left in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for contains text strings; use unescape for that. Parameters: open - opener close - closer Returns: data matched from the queuechompBalanced public String chompBalanced​(char open, char close) Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three", and leave " four" on the queue. Unbalanced openers and closers can be quoted (with ' or ") or escaped (with \). Those escapes will be left in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for contains text strings; use unescape for that. Parameters: open - opener close - closer Returns: data matched from the queuechompBalancedpublic String chompBalanced​(char open, char close)StringPulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three", and leave " four" on the queue. Unbalanced openers and closers can be quoted (with ' or ") or escaped (with \). Those escapes will be left in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for contains text strings; use unescape for that.Parameters: open - opener close - closer Returns: data matched from the queueParameters:Parameters:open - openeropenclose - closercloseReturns:Returns:data matched from the queueunescape public static String unescape​(String in) Unescape a \ escaped string. Parameters: in - backslash escaped string Returns: unescaped stringunescape public static String unescape​(String in) Unescape a \ escaped string. Parameters: in - backslash escaped string Returns: unescaped stringunescapepublic static String unescape​(String in)StringStringUnescape a \ escaped string.Parameters: in - backslash escaped string Returns: unescaped stringParameters:Parameters:in - backslash escaped stringinReturns:Returns:unescaped stringconsumeWhitespace public boolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue. Returns: Whether consuming whitespace or notconsumeWhitespace public boolean consumeWhitespace​() Pulls the next run of whitespace characters of the queue. Returns: Whether consuming whitespace or notconsumeWhitespacepublic boolean consumeWhitespace​()Pulls the next run of whitespace characters of the queue.Returns: Whether consuming whitespace or notReturns:Returns:Whether consuming whitespace or notconsumeWord public String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue. Returns: String of word characters from queue, or empty string if none.consumeWord public String consumeWord​() Retrieves the next run of word type (letter or digit) off the queue. Returns: String of word characters from queue, or empty string if none.consumeWordpublic String consumeWord​()StringRetrieves the next run of word type (letter or digit) off the queue.Returns: String of word characters from queue, or empty string if none.Returns:Returns:String of word characters from queue, or empty string if none.consumeTagName public String consumeTagName​() Consume an tag name off the queue (word or :, _, -) Returns: tag nameconsumeTagName public String consumeTagName​() Consume an tag name off the queue (word or :, _, -) Returns: tag nameconsumeTagNamepublic String consumeTagName​()StringConsume an tag name off the queue (word or :, _, -)Returns: tag nameReturns:Returns:tag nameconsumeElementSelector public String consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects). Returns: tag nameconsumeElementSelector public String consumeElementSelector​() Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects). Returns: tag nameconsumeElementSelectorpublic String consumeElementSelector​()StringConsume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects).Returns: tag nameReturns:Returns:tag nameconsumeCssIdentifier public String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier Returns: identifierconsumeCssIdentifier public String consumeCssIdentifier​() Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier Returns: identifierconsumeCssIdentifierpublic String consumeCssIdentifier​()StringConsume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifierReturns: identifierReturns:Returns:identifierconsumeAttributeKey public String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :") Returns: attribute keyconsumeAttributeKey public String consumeAttributeKey​() Consume an attribute key off the queue (letter, digit, -, _, :") Returns: attribute keyconsumeAttributeKeypublic String consumeAttributeKey​()StringConsume an attribute key off the queue (letter, digit, -, _, :")Returns: attribute keyReturns:Returns:attribute keyremainder public String remainder​() Consume and return whatever is left on the queue. Returns: remained of queue.remainder public String remainder​() Consume and return whatever is left on the queue. Returns: remained of queue.remainderpublic String remainder​()StringConsume and return whatever is left on the queue.Returns: remained of queue.Returns:Returns:remained of queue.toString public String toString​() Overrides: toString in class ObjecttoString public String toString​() Overrides: toString in class ObjecttoStringpublic String toString​()StringOverrides: toString in class ObjectOverrides:Overrides:toString in class ObjecttoStringtoStringObjectObjectSkip navigation links Overview Package Class Use Tree Deprecated Index HelpSkip navigation linksSkip navigation linksOverview Package Class Use Tree Deprecated Index HelpOverviewOverviewPackagePackageClassUseUseTreeTreeDeprecatedDeprecatedIndexIndexHelpHelpPrev Class Next Class Frames No Frames All Classes <div> JavaScript is disabled on your browser. </div> Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodPrev Class Next ClassPrev ClassPrev ClassPrev ClassNext ClassNext ClassNext ClassFrames No FramesFramesFramesNo FramesNo FramesAll ClassesAll ClassesAll Classes<div> JavaScript is disabled on your browser. </div><div> JavaScript is disabled on your browser. </div>Summary: Nested | Field | Constr | Method Detail: Field | Constr | MethodSummary: Nested | Field | Constr | MethodSummary:Nested |Field |Constr |ConstrMethodMethodDetail: Field | Constr | MethodDetail:Field |Constr |ConstrMethodMethodCopyright © 2009–2017 Jonathan Hedley. All rights reserved.Copyright © 2009–2017 Jonathan Hedley. All rights reserved.Jonathan Hedley