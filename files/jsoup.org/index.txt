jsoup, java html parser, homeOpen source Java HTML parser, with DOM, CSS, and jquery-like methods for easy data extraction.jsoup News Bugs Discussion Download API Reference Cookbook Try jsoup jsoup » jsoup: Java HTML Parser jsoup: Java HTML Parser jsoup is a Java library for working with real-world HTML. It provides a very convenient API for extracting and manipulating data, using the best of DOM, CSS, and jquery-like methods. jsoup implements the WHATWG HTML5 specification, and parses HTML to the same DOM as modern browsers do. scrape and parse HTML from a URL, file, or string find and extract data, using DOM traversal or CSS selectors manipulate the HTML elements, attributes, and text clean user-submitted content against a safe white-list, to prevent XSS attacks output tidy HTML jsoup is designed to deal with all varieties of HTML found in the wild; from pristine and validating, to invalid tag-soup; jsoup will create a sensible parse tree. Example Fetch the Wikipedia homepage, parse it to a DOM, and select the headlines from the In the news section into a list of Elements (online sample, full source): Document doc = Jsoup.connect("http://en.wikipedia.org/").get(); log(doc.title()); Elements newsHeadlines = doc.select("#mp-itn b a"); for (Element headline : newsHeadlines) { log("%s\n\t%s", headline.attr("title"), headline.absUrl("href")); } Open source jsoup is an open source project distributed under the liberal MIT license. The source code is available at GitHub. Getting started Download the jsoup jar (version 1.11.2) Read the cookbook introduction Enjoy! Development and support If you have any questions on how to use jsoup, or have ideas for future development, please get in touch via the mailing list. If you find any issues, please file a bug after checking for duplicates. The colophon talks about the history of and tools used to build jsoup. Status jsoup is in general release. Cookbook contents Introduction Parsing and traversing a Document Input Parse a document from a String Parsing a body fragment Load a Document from a URL Load a Document from a File Extracting data Use DOM methods to navigate a document Use selector-syntax to find elements Extract attributes, text, and HTML from elements Working with URLs Example program: list links Modifying data Set attribute values Set the HTML of an element Setting the text content of elements Cleaning HTML Sanitize untrusted HTML (to prevent XSS) jsoup HTML parser © 2009 - 2017 Jonathan Hedleyjsoup News Bugs Discussion Download API Reference Cookbook Try jsoup jsoup » jsoup: Java HTML Parser jsoup: Java HTML Parser jsoup is a Java library for working with real-world HTML. It provides a very convenient API for extracting and manipulating data, using the best of DOM, CSS, and jquery-like methods. jsoup implements the WHATWG HTML5 specification, and parses HTML to the same DOM as modern browsers do. scrape and parse HTML from a URL, file, or string find and extract data, using DOM traversal or CSS selectors manipulate the HTML elements, attributes, and text clean user-submitted content against a safe white-list, to prevent XSS attacks output tidy HTML jsoup is designed to deal with all varieties of HTML found in the wild; from pristine and validating, to invalid tag-soup; jsoup will create a sensible parse tree. Example Fetch the Wikipedia homepage, parse it to a DOM, and select the headlines from the In the news section into a list of Elements (online sample, full source): Document doc = Jsoup.connect("http://en.wikipedia.org/").get(); log(doc.title()); Elements newsHeadlines = doc.select("#mp-itn b a"); for (Element headline : newsHeadlines) { log("%s\n\t%s", headline.attr("title"), headline.absUrl("href")); } Open source jsoup is an open source project distributed under the liberal MIT license. The source code is available at GitHub. Getting started Download the jsoup jar (version 1.11.2) Read the cookbook introduction Enjoy! Development and support If you have any questions on how to use jsoup, or have ideas for future development, please get in touch via the mailing list. If you find any issues, please file a bug after checking for duplicates. The colophon talks about the history of and tools used to build jsoup. Status jsoup is in general release. Cookbook contents Introduction Parsing and traversing a Document Input Parse a document from a String Parsing a body fragment Load a Document from a URL Load a Document from a File Extracting data Use DOM methods to navigate a document Use selector-syntax to find elements Extract attributes, text, and HTML from elements Working with URLs Example program: list links Modifying data Set attribute values Set the HTML of an element Setting the text content of elements Cleaning HTML Sanitize untrusted HTML (to prevent XSS) jsoup HTML parser © 2009 - 2017 Jonathan Hedleyjsoup News Bugs Discussion Download API Reference Cookbook Try jsoupjsoup News Bugs Discussion Download API Reference Cookbook Try jsoupjsoup News Bugs Discussion Download API Reference Cookbook Try jsoupjsoupjsoupjsoupNewsNewsBugsBugsDiscussionDiscussionDownloadDownloadAPI ReferenceAPI ReferenceCookbookCookbookTry jsoupTry jsoupjsoup » jsoup: Java HTML Parserjsoupjsoupjsoup»jsoup: Java HTML Parser jsoup is a Java library for working with real-world HTML. It provides a very convenient API for extracting and manipulating data, using the best of DOM, CSS, and jquery-like methods. jsoup implements the WHATWG HTML5 specification, and parses HTML to the same DOM as modern browsers do. scrape and parse HTML from a URL, file, or string find and extract data, using DOM traversal or CSS selectors manipulate the HTML elements, attributes, and text clean user-submitted content against a safe white-list, to prevent XSS attacks output tidy HTML jsoup is designed to deal with all varieties of HTML found in the wild; from pristine and validating, to invalid tag-soup; jsoup will create a sensible parse tree. Example Fetch the Wikipedia homepage, parse it to a DOM, and select the headlines from the In the news section into a list of Elements (online sample, full source): Document doc = Jsoup.connect("http://en.wikipedia.org/").get(); log(doc.title()); Elements newsHeadlines = doc.select("#mp-itn b a"); for (Element headline : newsHeadlines) { log("%s\n\t%s", headline.attr("title"), headline.absUrl("href")); } Open source jsoup is an open source project distributed under the liberal MIT license. The source code is available at GitHub. Getting started Download the jsoup jar (version 1.11.2) Read the cookbook introduction Enjoy! Development and support If you have any questions on how to use jsoup, or have ideas for future development, please get in touch via the mailing list. If you find any issues, please file a bug after checking for duplicates. The colophon talks about the history of and tools used to build jsoup. Status jsoup is in general release. Cookbook contents Introduction Parsing and traversing a Document Input Parse a document from a String Parsing a body fragment Load a Document from a URL Load a Document from a File Extracting data Use DOM methods to navigate a document Use selector-syntax to find elements Extract attributes, text, and HTML from elements Working with URLs Example program: list links Modifying data Set attribute values Set the HTML of an element Setting the text content of elements Cleaning HTML Sanitize untrusted HTML (to prevent XSS)jsoup: Java HTML Parser jsoup is a Java library for working with real-world HTML. It provides a very convenient API for extracting and manipulating data, using the best of DOM, CSS, and jquery-like methods. jsoup implements the WHATWG HTML5 specification, and parses HTML to the same DOM as modern browsers do. scrape and parse HTML from a URL, file, or string find and extract data, using DOM traversal or CSS selectors manipulate the HTML elements, attributes, and text clean user-submitted content against a safe white-list, to prevent XSS attacks output tidy HTML jsoup is designed to deal with all varieties of HTML found in the wild; from pristine and validating, to invalid tag-soup; jsoup will create a sensible parse tree. Example Fetch the Wikipedia homepage, parse it to a DOM, and select the headlines from the In the news section into a list of Elements (online sample, full source): Document doc = Jsoup.connect("http://en.wikipedia.org/").get(); log(doc.title()); Elements newsHeadlines = doc.select("#mp-itn b a"); for (Element headline : newsHeadlines) { log("%s\n\t%s", headline.attr("title"), headline.absUrl("href")); } Open source jsoup is an open source project distributed under the liberal MIT license. The source code is available at GitHub. Getting started Download the jsoup jar (version 1.11.2) Read the cookbook introduction Enjoy! Development and support If you have any questions on how to use jsoup, or have ideas for future development, please get in touch via the mailing list. If you find any issues, please file a bug after checking for duplicates. The colophon talks about the history of and tools used to build jsoup. Status jsoup is in general release.jsoup: Java HTML Parserjsoup is a Java library for working with real-world HTML. It provides a very convenient API for extracting and manipulating data, using the best of DOM, CSS, and jquery-like methods.jsoupjsoup implements the WHATWG HTML5 specification, and parses HTML to the same DOM as modern browsers do.jsoupWHATWG HTML5scrape and parse HTML from a URL, file, or string find and extract data, using DOM traversal or CSS selectors manipulate the HTML elements, attributes, and text clean user-submitted content against a safe white-list, to prevent XSS attacks output tidy HTMLscrape and parse HTML from a URL, file, or stringparsefind and extract data, using DOM traversal or CSS selectorsfindmanipulate the HTML elements, attributes, and textmanipulateclean user-submitted content against a safe white-list, to prevent XSS attackscleanXSSoutput tidy HTMLoutputjsoup is designed to deal with all varieties of HTML found in the wild; from pristine and validating, to invalid tag-soup; jsoup will create a sensible parse tree.ExampleFetch the Wikipedia homepage, parse it to a DOM, and select the headlines from the In the news section into a list of Elements (online sample, full source):WikipediaIn the newsElementsonline samplefull sourceDocument doc = Jsoup.connect("http://en.wikipedia.org/").get(); log(doc.title()); Elements newsHeadlines = doc.select("#mp-itn b a"); for (Element headline : newsHeadlines) { log("%s\n\t%s", headline.attr("title"), headline.absUrl("href")); }Document doc = Jsoup.connect("http://en.wikipedia.org/").get(); log(doc.title()); Elements newsHeadlines = doc.select("#mp-itn b a"); for (Element headline : newsHeadlines) { log("%s\n\t%s", headline.attr("title"), headline.absUrl("href")); }Open sourcejsoup is an open source project distributed under the liberal MIT license. The source code is available at GitHub.MIT licenseGitHubGetting startedDownload the jsoup jar (version 1.11.2) Read the cookbook introduction Enjoy!Download the jsoup jar (version 1.11.2)DownloadDownload1.11.2Read the cookbook introductionintroductionEnjoy!Development and supportIf you have any questions on how to use jsoup, or have ideas for future development, please get in touch via the mailing list.mailing listIf you find any issues, please file a bug after checking for duplicates.file a bugThe colophon talks about the history of and tools used to build jsoup.colophonStatusjsoup is in general release.Cookbook contents Introduction Parsing and traversing a Document Input Parse a document from a String Parsing a body fragment Load a Document from a URL Load a Document from a File Extracting data Use DOM methods to navigate a document Use selector-syntax to find elements Extract attributes, text, and HTML from elements Working with URLs Example program: list links Modifying data Set attribute values Set the HTML of an element Setting the text content of elements Cleaning HTML Sanitize untrusted HTML (to prevent XSS)Cookbook contents Introduction Parsing and traversing a Document Input Parse a document from a String Parsing a body fragment Load a Document from a URL Load a Document from a File Extracting data Use DOM methods to navigate a document Use selector-syntax to find elements Extract attributes, text, and HTML from elements Working with URLs Example program: list links Modifying data Set attribute values Set the HTML of an element Setting the text content of elements Cleaning HTML Sanitize untrusted HTML (to prevent XSS)Cookbook contentsIntroductionParsing and traversing a DocumentParsing and traversing a DocumentParsing and traversing a DocumentInputParse a document from a String Parsing a body fragment Load a Document from a URL Load a Document from a FileParse a document from a StringParse a document from a StringParsing a body fragmentParsing a body fragmentLoad a Document from a URLLoad a Document from a URLLoad a Document from a FileLoad a Document from a FileExtracting dataUse DOM methods to navigate a document Use selector-syntax to find elements Extract attributes, text, and HTML from elements Working with URLs Example program: list linksUse DOM methods to navigate a documentUse DOM methods to navigate a documentUse selector-syntax to find elementsUse selector-syntax to find elementsExtract attributes, text, and HTML from elementsExtract attributes, text, and HTML from elementsWorking with URLsWorking with URLsExample program: list linksExample program: list linksModifying dataSet attribute values Set the HTML of an element Setting the text content of elementsSet attribute valuesSet attribute valuesSet the HTML of an elementSet the HTML of an elementSetting the text content of elementsSetting the text content of elementsCleaning HTMLSanitize untrusted HTML (to prevent XSS)Sanitize untrusted HTML (to prevent XSS)Sanitize untrusted HTML (to prevent XSS)jsoup HTML parser © 2009 - 2017 Jonathan Hedleyjsoup HTML parserJonathan HedleyJonathan Hedley